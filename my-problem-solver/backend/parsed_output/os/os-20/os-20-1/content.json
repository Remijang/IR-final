[
    {
        "type": "text",
        "text": "20.1 Simple Solution: Bigger Pages ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "We could reduce the size of the page table in one simple way: use bigger pages. Take our 32-bit address space again, but this time assume 16KB pages. We would thus have an 18-bit VPN plus a 14-bit offset. Assuming the same size for each PTE (4 bytes), we now have $2 ^ { 1 8 }$ entries in our linear page table and thus a total size of 1MB per page table, a factor ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "ASIDE: MULTIPLE PAGE SIZES ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "As an aside, do note that many architectures (e.g., MIPS, SPARC, $\\times 8 6 { - } 6 4 ,$ ) now support multiple page sizes. Usually, a small (4KB or 8KB) page size is used. However, if a “smart” application requests it, a single large page (e.g., of size 4MB) can be used for a specific portion of the address space, enabling such applications to place a frequently-used (and large) data structure in such a space while consuming only a single TLB entry. This type of large page usage is common in database management systems and other high-end commercial applications. The main reason for multiple page sizes is not to save page table space, however; it is to reduce pressure on the TLB, enabling a program to access more of its address space without suffering from too many TLB misses. However, as researchers have shown $[ \\mathsf { N } { + } \\bar { 0 } 2 ]$ , using multiple page sizes makes the OS virtual memory manager notably more complex, and thus large pages are sometimes most easily used simply by exporting a new interface to applications to request large pages directly. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "of four reduction in size of the page table (not surprisingly, the reduction exactly mirrors the factor of four increase in page size). ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "The major problem with this approach, however, is that big pages lead to waste within each page, a problem known as internal fragmentation (as the waste is internal to the unit of allocation). Applications thus end up allocating pages but only using little bits and pieces of each, and memory quickly fills up with these overly-large pages. Thus, most systems use relatively small page sizes in the common case: 4KB (as in $\\times 8 6$ ) or 8KB (as in SPARCv9). Our problem will not be solved so simply, alas. ",
        "page_idx": 1
    }
]