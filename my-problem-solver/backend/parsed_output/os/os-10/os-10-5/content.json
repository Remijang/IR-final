[
    {
        "type": "text",
        "text": "10.5 Multi-Queue Scheduling ",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Because of the problems caused in single-queue schedulers, some systems opt for multiple queues, e.g., one per CPU. We call this approach multi-queue multiprocessor scheduling (or MQMS). ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "In MQMS, our basic scheduling framework consists of multiple scheduling queues. Each queue will likely follow a particular scheduling discipline, such as round robin, though of course any algorithm can be used. When a job enters the system, it is placed on exactly one scheduling queue, according to some heuristic (e.g., random, or picking one with fewer jobs than others). Then it is scheduled essentially independently, thus avoiding the problems of information sharing and synchronization found in the single-queue approach. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "For example, assume we have a system where there are just two CPUs (labeled CPU 0 and CPU 1), and some number of jobs enter the system: $A , B , C ,$ , and $D$ for example. Given that each CPU has a scheduling queue now, the OS has to decide into which queue to place each job. It might do something like this: ",
        "page_idx": 6
    },
    {
        "type": "image",
        "img_path": "images/8e2522ec944f90115f769b823f731c70a37b400373fca5f2b4efc3adf6288964.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "THREE EASY PIECES ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Depending on the queue scheduling policy, each CPU now has two jobs to choose from when deciding what should run. For example, with round robin, the system might produce a schedule that looks like this: ",
        "page_idx": 7
    },
    {
        "type": "table",
        "img_path": "images/3c0016e8fff7e3b6ed35e4b5badb696c2e8390875d7ef7d36f2924e354de3be7.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>PU 0</td><td>A</td><td>A</td><td>c</td><td>c</td><td>A</td><td>A</td><td>c</td><td>c</td><td>A</td><td>A</td><td>c</td><td>c</td><td></td></tr><tr><td>PU 1</td><td>B</td><td>B</td><td>D</td><td>D</td><td>B</td><td>B</td><td>D</td><td>D</td><td>B</td><td>B</td><td>D</td><td>D</td><td></td></tr></table></body></html>\n\n",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "MQMS has a distinct advantage of SQMS in that it should be inherently more scalable. As the number of CPUs grows, so too does the number of queues, and thus lock and cache contention should not become a central problem. In addition, MQMS intrinsically provides cache affinity; jobs stay on the same CPU and thus reap the advantage of reusing cached contents therein. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "But, if you’ve been paying attention, you might see that we have a new problem, which is fundamental in the multi-queue based approach: load imbalance. Let’s assume we have the same set up as above (four jobs, two CPUs), but then one of the jobs (say $C$ ) finishes. We now have the following scheduling queues: ",
        "page_idx": 7
    },
    {
        "type": "image",
        "img_path": "images/21717b0312855b3911f4dfe4ad2df8957c8d4763ce40920b7696e2dd09bad7c3.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "If we then run our round-robin policy on each queue of the system, we will see this resulting schedule: ",
        "page_idx": 7
    },
    {
        "type": "table",
        "img_path": "images/ca058e311d65bc6e82de204a565cd3bdc94ffa55f618c0867311102f338578e8.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>CPU 0</td><td>A</td><td>A</td><td>A</td><td>A</td><td>A</td><td>A</td><td>A</td><td>A</td><td>A</td><td>A</td><td>A</td><td>A</td><td>...</td></tr><tr><td>CPU 1</td><td>B</td><td>B</td><td>D</td><td>D</td><td>B</td><td>B</td><td>D</td><td>D</td><td>B</td><td>B</td><td>D</td><td>D</td><td>...</td></tr></table></body></html>\n\n",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "As you can see from this diagram, $A$ gets twice as much CPU as $B$ and $D$ , which is not the desired outcome. Even worse, let’s imagine that both $A$ and $C$ finish, leaving just jobs $B$ and $D$ in the system. The two scheduling queues, and resulting timeline, will look like this: ",
        "page_idx": 7
    },
    {
        "type": "image",
        "img_path": "images/17b1b79293da3007dabb7fdc261521feb83aa0500f752b4c7a9eb08b2029d664.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "CPU 0 ",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "table",
        "img_path": "images/971cbb3086a11f5ee4e68b28f16d83a4837133d7880e79810477ca6b09751733.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>B</td><td>B</td><td>D D</td><td>B</td><td>B</td><td>D</td><td>D</td><td>B</td><td>B</td><td>D D</td></tr></table></body></html>\n\n",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "How terrible – CPU 0 is idle! (insert dramatic and sinister music here) And thus our CPU usage timeline looks quite sad. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "WWW.OSTEP.ORG ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "So what should a poor multi-queue multiprocessor scheduler do? How can we overcome the insidious problem of load imbalance and defeat the evil forces of ... the Decepticons1? How do we stop asking questions that are hardly relevant to this otherwise wonderful book? ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "CRUX: HOW TO DEAL WITH LOAD IMBALANCE ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "How should a multi-queue multiprocessor scheduler handle load imbalance, so as to better achieve its desired scheduling goals? ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "The obvious answer to this query is to move jobs around, a technique which we (once again) refer to as migration. By migrating a job from one CPU to another, true load balance can be achieved. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Let’s look at a couple of examples to add some clarity. Once again, we have a situation where one CPU is idle and the other has some jobs. ",
        "page_idx": 8
    },
    {
        "type": "image",
        "img_path": "images/b93bb70d03757ab34b327530c27bcbf002aa25c6f8688c00b84fde4443e6f877.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "In this case, the desired migration is easy to understand: the OS should simply move one of $B$ or $D$ to CPU 0. The result of this single job migration is evenly balanced load and everyone is happy. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "A more tricky case arises in our earlier example, where $A$ was left alone on CPU 0 and $B$ and $D$ were alternating on CPU 1: ",
        "page_idx": 8
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { \\texttt { \\textsf { Q 0 } } { \\to } \\texttt { \\textsf { A } } \\qquad \\texttt { \\textsf { Q 1 } } { \\to } \\texttt { \\textsf { B } } { \\to } \\texttt { \\textsf { D } } } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "In this case, a single migration does not solve the problem. What would you do in this case? The answer, alas, is continuous migration of one or more jobs. One possible solution is to keep switching jobs, as we see in the following timeline. In the figure, first $A$ is alone on CPU 0, and $B$ and $D$ alternate on CPU 1. After a few time slices, $B$ is moved to compete with $A$ on CPU 0, while $D$ enjoys a few time slices alone on CPU 1. And thus load is balanced: ",
        "page_idx": 8
    },
    {
        "type": "table",
        "img_path": "images/f4a23a6ef930f74dca732b307db4c5fe12329bc21b4379a7ec3501471b263010.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>CPU 0</td><td>A</td><td>A</td><td>A</td><td>A</td><td>B</td><td>A</td><td>B</td><td>A</td><td>B</td><td>B</td><td>B</td><td>B</td><td>...</td></tr><tr><td>CPU 1</td><td>B</td><td>D</td><td>B</td><td>D</td><td>D</td><td>D</td><td>D</td><td>D</td><td>A</td><td>D</td><td>A</td><td>D</td><td></td></tr></table></body></html>\n\n",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Of course, many other possible migration patterns exist. But now for the tricky part: how should the system decide to enact such a migration? ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "One basic approach is to use a technique known as work stealing [FLR98]. With a work-stealing approach, a (source) queue that is low on jobs will occasionally peek at another (target) queue, to see how full it is. If the target queue is (notably) more full than the source queue, the source will “steal” one or more jobs from the target to help balance load. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Of course, there is a natural tension in such an approach. If you look around at other queues too often, you will suffer from high overhead and have trouble scaling, which was the entire purpose of implementing the multiple queue scheduling in the first place! If, on the other hand, you don’t look at other queues very often, you are in danger of suffering from severe load imbalances. Finding the right threshold remains, as is common in system policy design, a black art. ",
        "page_idx": 9
    }
]