2.1 Virtualizing The CPU
Figure 2.1 depicts our first program. It doesn’t do much. In fact, all it does is call Spin(), a function that repeatedly checks the time and returns once it has run for a second. Then, it prints out the string that the user passed in on the command line, and repeats, forever.  
Let’s say we save this file as cpu.c and decide to compile and run it on a system with a single processor (or CPU as we will sometimes call it). Here is what we will see:  
prompt> gcc -o cpu cpu.c -Wall 
prompt> ./cpu "A" 
A 
A 
A 
A 
$ { \mathrm { ~  ~ \hat { ~ } { ~ C ~ } ~ } }$ 
prompt>  
Not too interesting of a run — the system begins running the program, which repeatedly checks the time until a second has elapsed. Once a second has passed, the code prints the input string passed in by the user (in this example, the letter $^ { \prime \prime } { \mathrm { A } } ^ { \prime \prime }$ ), and continues. Note the program will run forever; by pressing “Control- $\cdot \mathrm { c } ^ { \prime \prime }$ (which on UNIX-based systems will terminate the program running in the foreground) we can halt the program.  

Figure 2.2: Running Many Programs At Once  
Now, let’s do the same thing, but this time, let’s run many different instances of this same program. Figure 2.2 shows the results of this slightly more complicated example.  
Well, now things are getting a little more interesting. Even though we have only one processor, somehow all four of these programs seem to be running at the same time! How does this magic happen?4  
It turns out that the operating system, with some help from the hardware, is in charge of this illusion, i.e., the illusion that the system has a very large number of virtual CPUs. Turning a single CPU (or a small set of them) into a seemingly infinite number of CPUs and thus allowing many programs to seemingly run at once is what we call virtualizing the CPU, the focus of the first major part of this book.  
Of course, to run programs, and stop them, and otherwise tell the OS which programs to run, there need to be some interfaces (APIs) that you can use to communicate your desires to the OS. We’ll talk about these APIs throughout this book; indeed, they are the major way in which most users interact with operating systems.  
You might also notice that the ability to run multiple programs at once raises all sorts of new questions. For example, if two programs want to run at a particular time, which should run? This question is answered by a policy of the OS; policies are used in many different places within an OS to answer these types of questions, and thus we will study them as we learn about the basic mechanisms that operating systems implement (such as the ability to run multiple programs at once). Hence the role of the OS as a resource manager.  
1 #include  
2 #include  
3 #include  
4 #include "common.h" 
5 
6 int 
7 main(int argc, char *argv[]) 
8 { 
9 int $\looparrowleft$ malloc(sizeof(int)); // a1 
10 assert(p ! $\ O =$ NULL); 
11 printf("(%d) address pointed to by p: %p\n" 
12 getpid(), p); // a2 
13 $\star _ { \mathrm { { P } } } ~ = ~ 0$ ; // a3 
14 while (1) { 
15 Spin(1); 
16 $\star { \tt p } = \star { \tt p } + 1 .$ ; 
17 printf("(%d) p: %d\n", getpid(), *p); // a4 
18 } 
19 return 0; 
20 }  