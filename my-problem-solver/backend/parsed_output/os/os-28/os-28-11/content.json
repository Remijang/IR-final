[
    {
        "type": "text",
        "text": "28.11 Fetch-And-Add ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "One final hardware primitive is the fetch-and-add instruction, which atomically increments a value while returning the old value at a particular address. The C pseudocode for the fetch-and-add instruction looks like this: ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "1 int FetchAndAdd(int \\*ptr) {   \n2 int old = \\*ptr;   \n3 $\\star \\mathrm { p t r } \\ = \\ \\mathrm { { o l d } } \\ + \\ 1 ;$   \n4 return old;   \n5 } ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "TIP: LESS CODE IS BETTER CODE (LAUER’S LAW) Programmers tend to brag about how much code they wrote to do something. Doing so is fundamentally broken. What one should brag about, rather, is how little code one wrote to accomplish a given task. Short, concise code is always preferred; it is likely easier to understand and has fewer bugs. As Hugh Lauer said, when discussing the construction of the Pilot operating system: “If the same people had twice as much time, they could produce as good of a system in half the code.” [L81] We’ll call this Lauer’s Law, and it is well worth remembering. So next time you’re bragging about how much code you wrote to finish the assignment, think again, or better yet, go back, rewrite, and make the code as clear and concise as possible. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "In this example, we’ll use fetch-and-add to build a more interesting ticket lock, as introduced by Mellor-Crummey and Scott [MS91]. The lock and unlock code is found in Figure 28.7 (page 14). ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Instead of a single value, this solution uses a ticket and turn variable in combination to build a lock. The basic operation is pretty simple: when a thread wishes to acquire a lock, it first does an atomic fetch-and-add on the ticket value; that value is now considered this thread’s “turn” (myturn). The globally shared lock->turn is then used to determine which thread’s turn it is; when (myturn $\\scriptstyle = =$ turn) for a given thread, it is that thread’s turn to enter the critical section. Unlock is accomplished simply by incrementing the turn such that the next waiting thread (if there is one) can now enter the critical section. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Note one important difference with this solution versus our previous attempts: it ensures progress for all threads. Once a thread is assigned its ticket value, it will be scheduled at some point in the future (once those in front of it have passed through the critical section and released the lock). In our previous attempts, no such guarantee existed; a thread spinning on test-and-set (for example) could spin forever even as other threads acquire and release the lock. ",
        "page_idx": 12
    }
]