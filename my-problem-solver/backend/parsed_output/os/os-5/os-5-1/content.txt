5.1 The fork() System Call
The fork() system call is used to create a new process [C63]. However, be forewarned: it is certainly the strangest routine you will ever call1. More specifically, you have a running program whose code looks like what you see in Figure 5.1; examine the code, or better yet, type it in and run it yourself!  
1 #include  
2 #include  
3 #include  
4 
5 int main(int argc, char *argv[]) { 
6 printf("hello (pid:%d)\n", (int) getpid()); 
7 int rc $\mathbf { \Sigma } = \mathbf { \Sigma }$ fork(); 
8 if (rc < 0) { 
9 // fork failed 
10 fprintf(stderr, "fork failed\n"); 
11 exit(1); 
12 } else if ( $\scriptstyle \mathbf  \begin{array} { c c }  \mathbf { \begin{array} { c c } { \mathbf {  \begin{array} { c c } { \mathbf {  \begin{array} { c c } { \mathbf {  \begin{array} { c c } { \mathbf {  \begin{array} } { c c } { \mathbf {  \begin{array} } { \mathbf {  \begin{array} } { c } { \mathbf {  \begin{array} } { \end{array} } } \end{array}  } } \end{array} } } \end{array}  } } } } \end{array} } } \end{array} \end{array} \end{array} \end{array}$ ) { 
13 // child (new process) 
14 printf("child (pid:%d)\n", (int) getpid()); 
15 } else { 
16 // parent goes down this path (main) 
17 printf("parent of %d (pid:%d)\n", 
18 rc, (int) getpid()); 
19 } 
20 return 0; 
21 } 
22  
When you run this program (called p1.c), you’ll see the following:  
prompt> ./p1 
hello (pid:29146) 
parent of 29147 (pid:29146) 
child (pid:29147) 
prompt>  
Let us understand what happened in more detail in p1.c. When it first started running, the process prints out a hello message; included in that message is its process identifier, also known as a PID. The process has a PID of 29146; in UNIX systems, the PID is used to name the process if one wants to do something with the process, such as (for example) stop it from running. So far, so good.  
Now the interesting part begins. The process calls the fork() system call, which the OS provides as a way to create a new process. The odd part: the process that is created is an (almost) exact copy of the calling process. That means that to the OS, it now looks like there are two copies of the program $\mathtt { p l }$ running, and both are about to return from the fork() system call. The newly-created process (called the child, in contrast to the creating parent) doesn’t start running at main(), like you might expect (note, the “hello” message only got printed out once); rather, it just comes into life as if it had called fork() itself.  
OPERATINGSYSTEMS[VERSION 1.10]  
1 #include  
2 #include  
3 #include  
4 #include  
5 
6 int main(int argc, char *argv[]) { 
7 printf("hello (pid:%d)\n", (int) getpid()); 
8 int rc $\mathbf { \Sigma } = \mathbf { \Sigma }$ fork(); 
9 if $\mathit { \Omega } _ { \mathrm { ~ \tiny ~  ~ } } ^ { \prime } \mathrm { c c \ } < 0$ ) { // fork failed; exit 
10 fprintf(stderr, "fork failed\n"); 
11 exit(1); 
12 } else if ( $\mathrm { ~ \ : ~ \ : ~ } . _ { \mathrm { ~ C ~ C ~ } } = = \mathrm { ~ ~ 0 ~ }$ ) { // child (new process) 
13 printf("child (pid:%d)\n", (int) getpid()); 
14 } else { // parent goes down this path 
15 int rc_wait $\mathbf { \Sigma } = \mathbf { \Sigma }$ wait(NULL); 
16 printf("parent of %d (rc_wait:%d) (pid:%d)\n", 
17 rc, rc_wait, (int) getpid()); 
18 } 
19 return 0; 
20 }  
You might have noticed: the child isn’t an exact copy. Specifically, although it now has its own copy of the address space (i.e., its own private memory), its own registers, its own PC, and so forth, the value it returns to the caller of fork() is different. Specifically, while the parent receives the PID of the newly-created child, the child receives a return code of zero. This differentiation is useful, because it is simple then to write the code that handles the two different cases (as above).  
You might also have noticed: the output $( \mathrm { o f } \mathrm { p } 1 . \mathrm { c } )$ is not deterministic. When the child process is created, there are now two active processes in the system that we care about: the parent and the child. Assuming we are running on a system with a single CPU (for simplicity), then either the child or the parent might run at that point. In our example (above), the parent did and thus printed out its message first. In other cases, the opposite might happen, as we show in this output trace:  
prompt> ./p1 
hello (pid:29146) 
child (pid:29147) 
parent of 29147 (pid:29146) 
prompt>  
The CPU scheduler, a topic we’ll discuss in great detail soon, determines which process runs at a given moment in time; because the scheduler is complex, we cannot usually make strong assumptions about what it will choose to do, and hence which process will run first. This nondeterminism, as it turns out, leads to some interesting problems, particularly in multi-threaded programs; hence, we’ll see a lot more nondeterminism when we study concurrency in the second part of the book.  