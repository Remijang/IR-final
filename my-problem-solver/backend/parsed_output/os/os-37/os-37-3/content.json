[
    {
        "type": "text",
        "text": "37.3 A Simple Disk Drive ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Let’s understand how disks work by building up a model one track at a time. Assume we have a simple disk with a single track (Figure 37.1). This track has just 12 sectors, each of which is 512 bytes in size (our typical sector size, recall) and addressed therefore by the numbers 0 through 11. The single platter we have here rotates around the spindle, to which a motor is attached. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Of course, the track by itself isn’t too interesting; we want to be able to read or write those sectors, and thus we need a disk head, attached to a disk $\\mathsf { a r m } ,$ as we now see (Figure 37.2). In the figure, the disk head, attached to the end of the arm, is positioned over sector 6, and the surface is rotating counter-clockwise. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Single-track Latency: The Rotational Delay ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "To understand how a request would be processed on our simple, onetrack disk, imagine we now receive a request to read block 0. How should the disk service this request? ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "In our simple disk, the disk doesn’t have to do much. In particular, it must just wait for the desired sector to rotate under the disk head. This wait happens often enough in modern drives, and is an important enough component of I/O service time, that it has a special name: rotational delay (sometimes rotation delay, though that sounds weird). In the example, if the full rotational delay is $R ,$ the disk has to incur a rotational delay of about $\\textstyle { \\frac { R } { 2 } }$ to wait for 0 to come under the read/write head (if we start at 6). A worst-case request on this single track would be to sector 5, causing nearly a full rotational delay in order to service such a request. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Multiple Tracks: Seek Time ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "So far our disk just has a single track, which is not too realistic; modern disks of course have many millions. Let’s thus look at an ever-so-slightly more realistic disk surface, this one with three tracks (Figure 37.3, left). ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "In the figure, the head is currently positioned over the innermost track (which contains sectors 24 through 35); the next track over contains the next set of sectors (12 through 23), and the outermost track contains the first sectors (0 through 11). ",
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/2631f28d9b7c12bc76a94999a7bacbec3ad395b01682ac97abf9740a573049da.jpg",
        "img_caption": [
            "Figure 37.3: Three Tracks Plus A Head (Right: With Seek) "
        ],
        "img_footnote": [],
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "To understand how the drive might access a given sector, we now trace what would happen on a request to a distant sector, e.g., a read to sector 11. To service this read, the drive has to first move the disk arm to the correct track (in this case, the outermost one), in a process known as a seek. Seeks, along with rotations, are one of the most costly disk operations. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "The seek, it should be noted, has many phases: first an acceleration phase as the disk arm gets moving; then coasting as the arm is moving at full speed, then deceleration as the arm slows down; finally settling as the head is carefully positioned over the correct track. The settling time is often quite significant, e.g., 0.5 to $2 \\mathrm { m s } ,$ , as the drive must be certain to find the right track (imagine if it just got close instead!). ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "After the seek, the disk arm has positioned the head over the right track. A depiction of the seek is found in Figure 37.3 (right). ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "As we can see, during the seek, the arm has been moved to the desired track, and the platter of course has rotated, in this case about 3 sectors. Thus, sector 9 is just about to pass under the disk head, and we must only endure a short rotational delay to complete the transfer. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "When sector 11 passes under the disk head, the final phase of I/O will take place, known as the transfer, where data is either read from or written to the surface. And thus, we have a complete picture of $\\mathrm { I } / \\mathrm { O }$ time: first a seek, then waiting for the rotational delay, and finally the transfer. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Some Other Details ",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Though we won’t spend too much time on it, there are some other interesting details about how hard drives operate. Many drives employ some kind of track skew to make sure that sequential reads can be properly serviced even when crossing track boundaries. In our simple example disk, this might appear as seen in Figure 37.4 (page 5). ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/9b8499b448d07f9fdc127c629e19ef65dc553032b076e36e086a9620265330a4.jpg",
        "img_caption": [
            "Figure 37.4: Three Tracks: Track Skew Of 2 "
        ],
        "img_footnote": [],
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Sectors are often skewed like this because when switching from one track to another, the disk needs time to reposition the head (even to neighboring tracks). Without such skew, the head would be moved to the next track but the desired next block would have already rotated under the head, and thus the drive would have to wait almost the entire rotational delay to access the next block. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Another reality is that outer tracks tend to have more sectors than inner tracks, which is a result of geometry; there is simply more room out there. These tracks are often referred to as multi-zoned disk drives, where the disk is organized into multiple zones, and where a zone is consecutive set of tracks on a surface. Each zone has the same number of sectors per track, and outer zones have more sectors than inner zones. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Finally, an important part of any modern disk drive is its cache, for historical reasons sometimes called a track buffer. This cache is just some small amount of memory (usually around 8 or $1 6 ~ \\mathrm { M B }$ ) which the drive can use to hold data read from or written to the disk. For example, when reading a sector from the disk, the drive might decide to read in all of the sectors on that track and cache them in its memory; doing so allows the drive to quickly respond to any subsequent requests to the same track. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "On writes, the drive has a choice: should it acknowledge the write has completed when it has put the data in its memory, or after the write has actually been written to disk? The former is called write back caching (or sometimes immediate reporting), and the latter write through. Write back caching sometimes makes the drive appear “faster”, but can be dangerous; if the file system or applications require that data be written to disk in a certain order for correctness, write-back caching can lead to problems (read the chapter on file-system journaling for details). ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "ASIDE: DIMENSIONAL ANALYSIS ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Remember in Chemistry class, how you solved virtually every problem by simply setting up the units such that they canceled out, and somehow the answers popped out as a result? That chemical magic is known by the highfalutin name of dimensional analysis and it turns out it is useful in computer systems analysis too. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Let’s do an example to see how dimensional analysis works and why it is useful. In this case, assume you have to figure out how long, in milliseconds, a single rotation of a disk takes. Unfortunately, you are given only the RPM of the disk, or rotations per minute. Let’s assume we’re talking about a 10K RPM disk (i.e., it rotates 10,000 times per minute). How do we set up the dimensional analysis so that we get time per rotation in milliseconds? ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "To do so, we start by putting the desired units on the left; in this case, we wish to obtain the time (in milliseconds) per rotation, so that is exactly what we write down: T ime (ms) . We then write down everything we know, making sure to cancel units where possible. First, we obtain 10,0100mRiontuatteions (keeping rotation on the bottom, as that’s where it is on tfihnealleyftt)r,atnhsefnortrmasnesfcornmdsmininmuitlelissienctonsdescownitdhs $\\frac { 6 0 ~ s e c o n d s } { 1 ~ m i n u t e }$ ,alarnedsutlhteins $\\frac { 1 0 0 0 ~ m s } { 1 ~ s e c o n d }$   \nthe following (with units nicely canceled): ",
        "page_idx": 5
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { \\frac { T i m e \\left( m s \\right) } { 1 \\ R o t . } = \\frac { 1 \\ m i \\pi \\pi \\mathrm { f c } } { 1 0 , 0 0 0 \\ R o t . } \\cdot \\frac { 6 0 \\ s e e \\pi \\mathrm { f c } } { 1 \\_ m i \\pi \\mathrm { f c } \\mathrm { f c } } \\cdot \\frac { 1 0 0 \\ m s } { 1 \\ . s e e \\pi \\mathrm { f c } d } = \\frac { 6 0 , 0 0 0 \\ m s } { 1 0 , 0 0 0 \\ R o t . } = \\frac { 6 \\ m s } { R o t a t i o n } } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "As you can see from this example, dimensional analysis makes what seems intuitive into a simple and repeatable process. Beyond the RPM calculation above, it comes in handy with $\\mathrm { \\Delta I / O }$ analysis regularly. For example, you will often be given the transfer rate of a disk, e.g., 100 MB/second, and then asked: how long does it take to transfer a 512 KB block (in milliseconds)? With dimensional analysis, it’s easy: ",
        "page_idx": 5
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { r } { \\frac { T i m e \\ ( m s ) } { 1 \\ R e q u e s t } = \\frac { 5 1 2 \\ k \\mathcal { B } } { 1 \\ R e q u e s t } \\cdot \\frac { 1 \\ 3 \\mathcal { H } \\mathcal { B } } { 1 0 2 4 \\ \\mathcal { K } \\mathcal { B } } \\cdot \\frac { 1 \\  s e e \\sigma \\widehat { m d } } { 1 0 0 \\mathcal { M } \\mathcal { B } } \\cdot \\frac { 1 0 0 0 \\ m s } { 1 \\mathcal { s } e e \\sigma \\widehat { n d } } = \\frac { 5 \\ m s } { R e q u e s t } } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 5
    }
]