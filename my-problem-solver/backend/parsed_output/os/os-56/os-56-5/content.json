[
    {
        "type": "text",
        "text": "56.5 Cracking Cryptography ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Chances are that you’ve heard about people cracking cryptography. It’s a popular theme in film and television. How worried should you be about that? ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Well, if you didn’t take our earlier advice and went ahead and built your own cipher, you should be very worried. Worried enough that you should stop reading this, rip out your own cipher from your system, and replace it with a well-known respected standard. Go ahead, we’ll still be here when you get back. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "What if you did use one of those standards? In that case, you’re probably OK. If you use a modern standard, with a few unimportant exceptions, there are no known ways to read data encrypted with these algorithms without obtaining the key. Which isn’t to say your system is secure, but probably no one will break into it by cracking the cryptographic algorithm. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "How will they do it, then? Probably by exploiting software flaws in your system having nothing to do with the cryptography, but there’s some chance they will crack it by obtaining your keys or exploiting some other flaw in your management of cryptography. How? Software flaws in how you create and use your keys are a common problem. In distributed environments, flaws in the methods used to share keys are also a common weakness that can be exploited. Peter Gutmann produced a nice survey of the sorts of problems improper management of cryptography frequently causes [G02]. Examples include distributing secret keys in software shared by many people, incorrectly transmitting plaintext versions of keys across a network, and choosing keys from a seriously reduced set of possible choices, rather than the larger theoretically possible set. More recently, the Heartbleed attack demonstrated a way to obtain keys being used in OpenSSL sessions from the memory of a remote computer, which allowed an attacker to decrypt the entire session, despite no flaws in either the cipher itself or its implementation, nor in its key selection procedures. This flaw allowed attackers to read the traffic of something between 1/4 and $1 / 2$ of all sites using HTTPS, the cryptographically protected version of HTTP $[ \\mathrm { D } \\substack { + } 1 4 ]$ . ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "One way attackers deal with cryptography is by guessing the key. Doing so doesn’t actually crack the cryptography at all. Cryptographic algorithms are designed to prevent people who don’t know the key from obtaining the secrets. If you know the key, it’s not supposed to make decryption hard. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "So an attacker could try simply guessing each possible key and trying it. That’s called a brute force attack, and it’s why you should use long keys. For example, AES keys are at least 128 bits. Assuming you generate your AES key at random, an attacker will need to make $2 ^ { 1 \\bar { 2 } 7 }$ guesses at your key, on average, before he gets it right. That’s a lot of guesses and will take a lot of time. Of course, if a software flaw causes your system to select one out of thirty two possible AES keys, instead of one out of $2 ^ { 1 2 8 }$ , a brute force attack may become trivial. Key selection is a big deal for cryptography. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "For example, the original 802.11 wireless networking standard included no cryptographic protection of data being streamed through the air. The ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "TIP: SELECTING KEYS ",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "One important aspect of key secrecy is selecting a good one to begin with. For public key cryptography, you need to run an algorithm to select one of the few possible pairs of keys you will use. But for symmetric cryptography, you are free to select any of the possible keys. How should you choose? ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Randomly. If you use any deterministic method to select your key, your opponent’s problem of finding out your key has just been converted into a problem of figuring out your method. Worse, since you’ll probably generate many keys over the course of time, once he knows your method, he’ll get all of them. If you use random chance to generate keys, though, figuring out one of them won’t help your opponent figure out any of your other keys. This highly desirable property in a cryptographic system is called perfect forward secrecy. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Unfortunately, true randomness is hard to come by. The best source for operating system purposes is to examine hardware processes that are believed to be random in nature, like low order bits of the times required for pieces of hardware to perform operations, and convert the results into random numbers. That’s called gathering entropy. In Linux, this is done for you automatically, and you can use the gathered entropy by reading /dev/random. Windows has a similar entropy-gathering feature. Use these to generate your keys. They’re not perfect, but they’re good enough for many purposes. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "first attempt to add such protection was called WEP (Wired Equivalent Protocol, a rather optimistic name). WEP was constrained by the need to fit into the existing standard, but the method it used to generate and distribute symmetric keys was seriously flawed. Merely by listening in on wireless traffic on an 802.11 network, an attacker could determine the key being used in as little as a minute. There are widely available tools that allow anyone to do so4. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "As another example, an early implementation of the Netscape web browser generated cryptographic keys using some easily guess-able values as seeds to a random number generator, such as the time of day and the ID of the process requesting the key. Researchers discovered they could guess the keys produced in around 30 seconds [GW96]. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "You might have heard that PK systems use much longer keys, 2K or 4K bits. Sounds much safer, no? Shouldn’t that at least make them stronger against brute force attacks? However, you can’t select keys for this type of cryptosystem at random. Only a relatively few pairs of public and private keys are possible. That’s because the public and private keys must be related to each other for the system to work. The relationship is usually mathematical, and usually intended to be mathematically hard to derive, so knowing the public key should not make it easy to learn the private key. However, with the public key in hand, one can use the mathematical properties of the system to derive the private key eventually. That’s why PK systems use such big keys – to make sure “eventually” is a very long time. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "But that only matters if you keep the private key secret. By now, we hope this sounds obvious, but many makers of embedded devices use PK to provide encryption for those devices, and include a private key in the device’s software. All too often, the same private key is used for all devices of a particular model. Such shared private keys invariably become, well, public. In September 2016, one study found 4.5 million embedded devices relying on these private keys that were no longer so private [V16]. Anyone could pose as any of these devices for any purpose, and could read any information sent to them using PK. In essence, the cryptography performed by these devices was little more than window dressing and did not increase the security of the devices by any appreciable amount. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "To summarize, cracking cryptography is usually about learning the key. $\\scriptstyle \\mathrm { O r , }$ as you might have guessed: THE CRYPTOGRAPHY’S BENEFIT RELIES ENTIRELY ON THE SECRECY OF THE KEY. ",
        "page_idx": 11
    }
]