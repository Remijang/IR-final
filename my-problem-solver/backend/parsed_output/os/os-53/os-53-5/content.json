[
    {
        "type": "text",
        "text": "53.5 The Basics of OS Security ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "In a typical operating system, then, we have some set of security goals, centered around various aspects of confidentiality, integrity, and availability. Some of these goals tend to be built in to the operating system model, while others are controlled by the owners or users of the system. The built-in goals are those that are extremely common, or must be ensured to make the more specific goals achievable. Most of these built-in goals relate to controlling process access to pieces of the hardware. That’s because the hardware is shared by all the processes on a system, and unless the sharing is carefully controlled, one process can interfere with the security goals of another process. Other built-in goals relate to services that the operating system offers, such as file systems, memory management, and interprocess communications. If these services are not carefully controlled, processes can subvert the system’s security goals. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Clearly, a lot of system security is going to be related to process handling. If the operating system can maintain a clean separation of processes that can only be broken with the operating system’s help, then neither shared hardware nor operating system services can be used to subvert our security goals. That requirement implies that the operating system needs to be careful about allowing use of hardware and of its services. In many cases, the operating system has good opportunities to apply such caution. For example, the operating system controls virtual memory, which in turn completely controls which physical memory addresses each process can access. Hardware support prevents a process from even naming a physical memory address that is not mapped into its virtual memory space. (The software folks among us should remember to regularly thank the hardware folks for all the great stuff they’ve given us to work with.) ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "System calls offer the operating system another opportunity to provide protection. In most operating systems, processes access system services by making an explicit system call, as was discussed in earlier chap",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "TIP: BE CAREFUL OF THE WEAKEST LINK ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "It’s worthwhile to remember that the people attacking your systems share many characteristics with you. In particular, they’re probably pretty smart and they probably are kind of lazy, in the positive sense that they don’t do work that they don’t need to do. That implies that attackers tend to go for the easiest possible way to overcome your system’s security. They’re not going to search for a zero-day buffer overflow if you’ve chosen “password” as your password to access the system. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "The practical implication for you is that you should spend most of the time you devote to securing your system to identifying and strengthening your weakest link. Your weakest link is the least protected part of your system, the one that’s easiest to attack, the one you can’t hide away or augment with some external security system. Often, a running system’s weakest link is actually its human users, not its software. You will have a hard time changing the behavior of people, but you can design the software bearing in mind that attackers may try to fool the legitimate users into misusing it. Remember that principle of least privilege? If an attacker can fool a user who has complete privileges into misusing the system, it will be a lot worse than fooling a user who can only damage his own assets. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Generally, thinking about security is a bit different than thinking about many other system design issues. It’s more adversarial. If you want to learn more about good ways to think about security of the systems you build, check out Schneier’s book “Secrets and Lies” [SC00]. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "ters. As you have learned, system calls switch the execution mode from the processor’s user mode to its supervisor mode, invoking an appropriate piece of operating system code as they do so. That code can determine which process made the system call and what service the process requested. Earlier, we only talked about how this could allow the operating system to call the proper piece of system code to perform the service, and to keep track of who to return control to when the service had been completed. But the same mechanism gives the operating system the opportunity to check if the requested service should be allowed under the system’s security policy. Since access to peripheral devices is through device drivers, which are usually also accessed via system call, the same mechanism can ensure proper application of security policies for hardware access. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "When a process performs a system call, then, the operating system will use the process identifier in the process control block or similar structure to determine the identity of the process. The OS can then use access control mechanisms to decide if the identified process is authorized to perform the requested action. If so, the OS either performs the action itself on behalf of the process or arranges for the process to perform it without ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "further system intervention. If the process is not authorized, the OS can simply generate an error code for the system call and return control to the process, if the scheduling algorithm permits. ",
        "page_idx": 10
    }
]