[
    {
        "type": "text",
        "text": "57.5 SSL/TLS ",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "We saw in an earlier chapter that a standard method of communicating between processes in modern systems is the socket. That’s equally true when the processes are on different machines. So a natural way to add cryptographic protection to communications crossing unprotected networks is to add cryptographic features to sockets. That’s precisely what SSL (the Secure Socket Layer) was designed to do, many years ago. Unfortunately, SSL did not get it quite right. That’s because it’s pretty darn hard to get it right, not because the people who designed and built it were careless. They learned from their mistakes and created a new version of encrypted sockets called Transport Layer Security $( \\mathbf { T L S } ) ^ { 5 }$ . You will frequently hear people talk about using SSL. They are usually treating it as a shorthand for SSL/TLS. SSL, formally, is insecure and should never be used for anything. Use TLS. The only exception is that some very old devices might run software that doesn’t support TLS. In that case, it’s better to use SSL than nothing. We’ll adopt the same shorthand as others from here on, since it’s ubiquitous. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "The concept behind SSL is simple: move encrypted data through an ordinary socket. You set up a socket, set up a special structure to perform whatever cryptography you want, and hook the output of that structure to the input of the socket. You reverse the process on the other end. What’s simple in concept is rather laborious in execution, with a number of steps required to achieve the desired result. There are further complications due to the general nature of SSL. The technology is designed to support a variety of cryptographic operations and many different ciphers, as well as multiple methods to perform key exchange and authentication between the sender and receiver. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "The process of adding SSL to your program is intricate, requiring the use of particular libraries and a sequence of calls into those libraries to set up a correct SSL connection. We will not go through those operations step by step here, but you will need to learn about them to make proper use of SSL. Their purpose is, for the most part, to allow a wide range of generality both in the cryptographic options SSL supports and the ways you use those options in your program. For example, these setup calls would allow you to create one set of SSL connections using AES-128 and another using AES-256, if that’s what you needed to do. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "One common requirement for setting up an SSL connection that we will go through in a bit more detail is how to securely distribute whatever cryptographic key you will use for the connection you are setting up. Best cryptographic practice calls for you to use a brand new key to encrypt the bulk of your data for each connection you set up. You will use public/private keys for authentication many times, but as we discussed earlier, you need to use symmetric cryptography to encrypt the data once you have authenticated your partner, and you want a fresh key for that. Even if you are running multiple simultaneous SSL connections with the same partner, you want a different symmetric key for each connection. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "So what do you need to do to set up a new SSL connection? We won’t go through all of the gory details, but, in essence, SSL needs to bootstrap a secure connection based (usually) on asymmetric cryptography when no usable symmetric key exists. (You’ll hear “usually” and “normally” and “by default” a lot in SSL discussions, because of SSL’s ability to support a very wide range of options, most of which are ordinarily not what you want to do.) The very first step is to start a negotiation between the client and the server. Each party might only be able to handle particular ciphers, secure hashes, key distribution strategies, or authentication schemes, based on what version of SSL they have installed, how it’s configured, and how the programs that set up the SSL connection on each side were written. In the most common cases, the negotiation will end in both sides finding some acceptable set of ciphers and techniques that hit a balance between security and performance. For example, they might use RSA with 2048 bit keys for asymmetric cryptography, some form of a Diffie-Hellman key exchange mechanism (see the Aside on this mechanism) to establish a new symmetric key, SHA-3 to generate secure hashes for integrity, and AES with 256 bit keys for bulk encryption. A modern installation of SSL might support 50 or more different combinations of these options. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "In some cases, it may be important for you to specify which of these many combinations are acceptable for your system, but often most of them will do, in which case you can let SSL figure out which to use for each connection without worrying about it yourself. The negotiation will happen invisibly and SSL will get on with its main business: authenticating at least the server (optionally the client), creating and distributing a new symmetric key, and running the communication through the chosen cipher using that key. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "We can use Diffie-Hellman key exchange to create the key (and SSL frequently does), but we need to be sure who we are sharing that key with. SSL offers a number of possibilities for doing so. The most common method is for the client to obtain a certificate containing the server’s public key (typically by having the server send it to the client) and to use the public key in that certificate to verify the authenticity of the server’s messages. It is possible for the client to obtain the certificate through some other means, though less common. Note that having the server send the certificate is every bit as secure (or insecure) as having the client obtain the certificate through other means. Certificate security is not based on the method used to transport it, but on the cryptography embedded in the certificate. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "With the certificate in hand (however the client got it), the Diffie-Hellman key exchange can now proceed in an authenticated fashion. The server ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "ASIDE: DIFFIE-HELLMAN KEY EXCHANGE ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "What if you want to share a secret key between two parties, but they can only communicate over an insecure channel, where eavesdroppers can hear anything they say? You might think this is an impossible problem to solve, but you’d be wrong. Two extremely smart cryptographers named Whitfield Diffie and Martin Hellman solved this problem years ago, and their solution is in common use. It’s called Diffie-Hellman key exchange. Here’s how it works. Let’s say Alice and Bob want to share a secret key, but currently don’t share anything, other than the ability to send each other messages. First, they agree on two numbers, $\\scriptstyle n$ (a large prime number) and $g$ (which is primitive mod $^ n$ ). They can use the insecure channel to do this, since $^ n$ and $g$ don’t need to be secret. Alice chooses a large random integer, say $\\scriptstyle { \\mathrm { \\begin{array} { l } { \\scriptstyle { \\mathrm {  } } } \\end{array} } }$ calculates $X = g ^ { x } m o d ~ n ,$ and sends $X$ to Bob. Bob independently chooses a large random integer, say $y$ , calculates $Y = g ^ { y } m o d n ,$ and sends $Y$ to Alice. The eavesdroppers can hear $X$ and $Y$ , but since Alice and Bob didn’t send $x$ or $y ,$ the eavesdroppers don’t know those values. It’s important that Alice and Bob keep $x$ and $y$ secret. Alice now computes $k = Y ^ { x } m o d ~ n ,$ and Bob computes $k = X ^ { y } m o d :$ $n$ . Alice and Bob get the same value $k$ from these computations. Why? Well, $Y ^ { x } m o d$ $n \\ = \\ ( g ^ { y } m o d n ) ^ { x }$ mod $n ,$ which in turn equals $g ^ { y x }$ mod $n$ . $X ^ { y }$ mod $n = ( g ^ { x } m o d n ) ^ { y }$ mod $n = g ^ { x y }$ mod $n ,$ which is the same thing Alice got. Nothing magic there, that’s just how exponentiation and modulus arithmetic work. Ah, the glory of mathematics! So $k$ is the same in both calculations and is known to both Alice and Bob. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "What about those eavesdroppers? They know $g , n , X ,$ , and $Y$ , but not $x$ or $y$ . They can compute $k ^ { \\prime } = \\bar { X } Y$ mod $n ,$ but that is not equal to the $k$ Alice and Bob calculated. They do have approaches to derive $x$ or $y ,$ which would give them enough information to obtain $k _ { \\ast }$ , but those approaches require them either to perform a calculation for every possible value of $^ n$ (which is why you want $^ n$ to be very large) or to compute a discrete logarithm. Computing a discrete logarithm is a solvable problem, but it’s computationally infeasible for large numbers. So if the prime $^ n$ is large (and meets other properties), the eavesdroppers are out of luck. How large? 600 digit primes should be good enough. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Neat, no? But there is a fly in the ointment, when one considers using Diffie-Hellman over a network. It ensures that you securely share a key with someone, but gives you no assurance of who you’re sharing the key with. Maybe Alice is sharing the key with Bob, as she thinks and hopes, but maybe she’s sharing it with Mallory, who posed as Bob and injected his own $Y$ . Since we usually care who we’re in secure communication with, we typically augment Diffie-Hellman with an authentication mechanism to provide the assurance of our partner’s identity. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "will sign its Diffie-Hellman messages with its private key, which will allow the client to determine that its partner in this key exchange is the correct server. Typically, the client does not provide (or even have) its own certificate, so it cannot sign its Diffie-Hellman messages. This implies that when SSL’s Diffie-Hellman key exchange completes, typically the client is pretty sure who the server is, but the server has no clue about the client’s identity. (Again, this need not be the case for all uses of SSL. SSL includes connection creation options where both parties know each other’s public key and the key exchange is authenticated on both sides. Those options are simply not the most commonly used ones, and particularly are not the ones typically used to secure web browsing.) ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Recalling our discussion earlier in this chapter, it actually isn’t a problem for the server to be unsure about the client’s identity at this point, in many cases. As we stated earlier, the client will probably want to use a password to authenticate itself, not a public key extracted from a certificate. As long as the server doesn’t permit the client to do anything requiring trust before the server obtains and checks the client’s password, the server probably doesn’t care who the client is, anyway. Many servers offer some services to anonymous clients (such as providing them with publicly available information), so as long as they can get a password from the client before proceeding to more sensitive subjects, there is no security problem. The server can ask the client for a user ID and password later, at any point after the SSL connection is established. Since creating the SSL connection sets up a symmetric key, the exchange of ID and password can be protected with that key. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "A final word about SSL/TLS: it’s a protocol, not a software package. There are multiple different software packages that implement this protocol. Ideally, if they all implement the protocol properly, they all interact correctly. However, they use different code to implement the protocol. As a result, software flaws in one implementation of SSL/TLS might not be present in other implementations. For example, the Heartbleed attack was based on implementation details of OpenSSL [H14], but was not present in other implementations, such as the version of SSL/TLS found in Microsoft’s Windows operating system. It is also possible that the current protocol definition of SSL/TLS contains protocol flaws that would be present in any compliant implementation. If you hear of a security problem involving SSL, determine whether it is a protocol flaw or an implementation flaw before taking further action. If it’s an implementation flaw, and you use a different implementation, you might not need to take any action in response. ",
        "page_idx": 10
    }
]