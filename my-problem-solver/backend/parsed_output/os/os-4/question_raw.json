[
    {
        "type": "text",
        "text": "1. Run process-run.py with the following flags: $- 1 5 : 1 0 0 , 5 : 1 0 0$ What should the CPU utilization be (e.g., the percent of time the CPU is in use?) Why do you know this? Use the $- \\mathtt { C }$ and $- \\mathtt { p }$ flags to see if you were right.",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "2. Now run with these flags: ./process-run.py $\\begin{array} { r l } { - 1 } & { { } 4 : 1 0 0 , 1 : 0 } \\end{array}$ . These flags specify one process with 4 instructions (all to use the CPU), and one that simply issues an I/O and waits for it to be done. How long does it take to complete both processes? Use $- c$ and $- \\mathtt { p }$ to find out if you were right.",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "3. Switch the order of the processes: $^ { - 1 } \\ 1 : 0 , 4 : 1 0 0$ . What happens now? Does switching the order matter? Why? (As always, use $- \\mathtt { C }$ and $- \\mathtt { p }$ to see if you were right)",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "4. Weâ€™ll now explore some of the other flags. One important flag is $- \\mathsf { S } ,$ which determines how the system reacts when a process issues an I/O. With the flag set to SWITCH ON END, the system will NOT switch to another process while one is doing $\\mathrm { I } / \\mathrm { \\bar { O } } ,$ instead waiting until the process is completely finished. What happens when you run the following two processes $( - 1 \\ 1 : 0 , 4 : 1 0 0$ $- c \\mathbf { \\Sigma } - \\mathsf { S }$ SWITCH ON END), one doing $\\mathrm { I } / \\mathrm { \\bar { O } }$ and the other doing CPU work?",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "5. Now, run the same processes, but with the switching behavior set to switch to another process whenever one is WAITING for I/O ( $- 1$ $1 : 0 , 4 : 1 0 0 \\mathrm { ~  ~ { ~ - ~ c ~ } ~ } - S$ SWITCH ON IO). What happens now? Use $- c$ and $- \\mathtt { p }$ to confirm that you are right.",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "6. One other important behavior is what to do when an I/O completes. With -I IO RUN LATER, when an I/O completes, the process that issued it is not necessarily run right away; rather, whatever was running at the time keeps running. What happens when you run this combination of processes? (./process-run.py $^ { - 1 }$ 3:0,5:100,5:100,5:100 -S SWITCH ON IO -c -p -I IO RUN LATER) Are system resources being effectively utilized?",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "7. Now run the same processes, but with -I IO RUN IMMEDIATE set, which immediately runs the process that issued the I/O. How does this behavior differ? Why might running a process that just completed an I/O again be a good idea?",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "8. Now run with some randomly generated processes using flags $- s$ $\\mathrm { ~  ~ { ~ 1 ~ } ~ } -  { 1 } 3 : 5 0 , 3 : 5 0$ or $- s 2 - 1 3 : 5 0 , 3 : 5 0$ or $- s 3 - 1 3 : 5 0 ,$ , 3:50. See if you can predict how the trace will turn out. What happens when you use the flag -I IO RUN IMMEDIATE versus that flag -I IO RUN LATER? What happens when you use the flag $- S$ SWITCH ON IO versus -S SWITCH ON END? ",
        "page_idx": 12
    }
]