[
    {
        "type": "text",
        "text": "29.4 Concurrent Hash Table ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "We end our discussion with a simple and widely applicable concurrent data structure, the hash table. Weâ€™ll focus on a simple hash table that does not resize; a little more work is required to handle resizing, which we leave as an exercise for the reader (sorry!). ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "This concurrent hash table (Figure 29.10) is straightforward, is built using the concurrent lists we developed earlier, and works incredibly well. The reason for its good performance is that instead of having a single lock for the entire structure, it uses a lock per hash bucket (each of which is represented by a list). Doing so enables many concurrent operations to take place. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Figure 29.11 (page 13) shows the performance of the hash table under concurrent updates (from 10,000 to 50,000 concurrent updates from each of four threads, on the same iMac with four CPUs). Also shown, for the sake of comparison, is the performance of a linked list (with a single lock). As you can see from the graph, this simple concurrent hash table scales magnificently; the linked list, in contrast, does not. ",
        "page_idx": 11
    }
]