[
    {
        "type": "text",
        "text": "17.4 Other Approaches ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Beyond the basic approaches described above, there have been a host of suggested techniques and algorithms to improve memory allocation in some way. We list a few of them here for your consideration (i.e., to make you think about a little more than just best-fit allocation). ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Segregated Lists ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "One interesting approach that has been around for some time is the use of segregated lists. The basic idea is simple: if a particular application has one (or a few) popular-sized request that it makes, keep a separate list just to manage objects of that size; all other requests are forwarded to a more general memory allocator. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "The benefits of such an approach are obvious. By having a chunk of memory dedicated for one particular size of requests, fragmentation is much less of a concern; moreover, allocation and free requests can be served quite quickly when they are of the right size, as no complicated search of a list is required. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Just like any good idea, this approach introduces new complications into a system as well. For example, how much memory should one dedicate to the pool of memory that serves specialized requests of a given size, as opposed to the general pool? One particular allocator, the slab allocator by uber-engineer Jeff Bonwick (which was designed for use in the Solaris kernel), handles this issue in a rather nice way [B94]. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Specifically, when the kernel boots up, it allocates a number of object caches for kernel objects that are likely to be requested frequently (such as locks, file-system inodes, etc.); the object caches thus are each segregated free lists of a given size and serve memory allocation and free requests quickly. When a given cache is running low on free space, it requests some slabs of memory from a more general memory allocator (the total amount requested being a multiple of the page size and the object in question). Conversely, when the reference counts of the objects within a given slab all go to zero, the general allocator can reclaim them from the specialized allocator, which is often done when the VM system needs more memory. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "ASIDE: GREAT ENGINEERS ARE REALLY GREAT Engineers like Jeff Bonwick (who not only wrote the slab allocator mentioned herein but also was the lead of an amazing file system, ZFS) are the heart of Silicon Valley. Behind almost any great product or technology is a human (or small group of humans) who are way above average in their talents, abilities, and dedication. As Mark Zuckerberg (of Facebook) says: “Someone who is exceptional in their role is not just a little better than someone who is pretty good. They are 100 times better.” This is why, still today, one or two people can start a company that changes the face of the world forever (think Google, Apple, or Facebook). Work hard and you might become such a $\\mathbf { \\bar { \\rho } } ^ { \\prime \\prime } 1 0 \\mathbf { \\bar { 0 } } \\mathbf { \\bar { x } } ^ { \\prime \\prime }$ person as well! Failing that, find a way to work with such a person; you’ll learn more in a day than most learn in a month. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "The slab allocator also goes beyond most segregated list approaches by keeping free objects on the lists in a pre-initialized state. Bonwick shows that initialization and destruction of data structures is costly [B94]; by keeping freed objects in a particular list in their initialized state, the slab allocator thus avoids frequent initialization and destruction cycles per object and thus lowers overheads noticeably. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Buddy Allocation ",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Because coalescing is critical for an allocator, some approaches have been designed around making coalescing simple. One good example is found in the binary buddy allocator [K65]. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "In such a system, free memory is first conceptually thought of as one big space of size $2 ^ { N }$ . When a request for memory is made, the search for free space recursively divides free space by two until a block that is big enough to accommodate the request is found (and a further split into two would result in a space that is too small). At this point, the requested block is returned to the user. Here is an example of a 64KB free space getting divided in the search for a 7KB block (Figure 17.8, page 15). ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "In the example, the leftmost 8KB block is allocated (as indicated by the darker shade of gray) and returned to the user; note that this scheme can suffer from internal fragmentation, as you are only allowed to give out power-of-two-sized blocks. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "The beauty of buddy allocation is found in what happens when that block is freed. When returning the 8KB block to the free list, the allocator checks whether the “buddy” 8KB is free; if so, it coalesces the two blocks into a 16KB block. The allocator then checks if the buddy of the 16KB block is still free; if so, it coalesces those two blocks. This recursive coalescing process continues up the tree, either restoring the entire free space or stopping when a buddy is found to be in use. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 13
    },
    {
        "type": "image",
        "img_path": "images/c6c729748866fcd329aa5bc62c3cffd9b8b5642c4e79349e2aa91c97041dae5e.jpg",
        "img_caption": [
            "Figure 17.8: Example Buddy-managed Heap "
        ],
        "img_footnote": [],
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "The reason buddy allocation works so well is that it is simple to determine the buddy of a particular block. How, you ask? Think about the addresses of the blocks in the free space above. If you think carefully enough, you’ll see that the address of each buddy pair only differs by a single bit; which bit is determined by the level in the buddy tree. And thus you have a basic idea of how binary buddy allocation schemes work. For more detail, as always, see the Wilson survey $\\left[ \\ W + 9 5 \\right]$ . ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Other Ideas ",
        "text_level": 1,
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "One major problem with many of the approaches described above is their lack of scaling. Specifically, searching lists can be quite slow. Thus, advanced allocators use more complex data structures to address these costs, trading simplicity for performance. Examples include balanced binary trees, splay trees, or partially-ordered trees $\\left[ [ W + 9 5 ] \\right.$ . ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Given that modern systems often have multiple processors and run multi-threaded workloads (something you’ll learn about in great detail in the section of the book on Concurrency), it is not surprising that a lot of effort has been spent making allocators work well on multiprocessorbased systems. Two wonderful examples are found in Berger et al. $\\left[ \\mathsf { B } { + } 0 0 \\right]$ and Evans [E06]; check them out for the details. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "These are but two of the thousands of ideas people have had over time about memory allocators; read on your own if you are curious. Failing that, read about how the glibc allocator works [S15], to give you a sense of what the real world is like. ",
        "page_idx": 14
    }
]