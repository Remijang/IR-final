[
    {
        "type": "text",
        "text": "15.6 Summary ",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "In this chapter, we have extended the concept of limited direct execution with a specific mechanism used in virtual memory, known as address translation. With address translation, the OS can control each and every memory access from a process, ensuring the accesses stay within the bounds of the address space. Key to the efficiency of this technique is hardware support, which performs the translation quickly for each access, turning virtual addresses (the processâ€™s view of memory) into physical ones (the actual view). All of this is performed in a way that is transparent to the process that has been relocated; the process has no idea its memory references are being translated, making for a wonderful illusion. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "We have also seen one particular form of virtualization, known as base and bounds or dynamic relocation. Base-and-bounds virtualization is quite efficient, as only a little more hardware logic is required to add a ",
        "page_idx": 10
    },
    {
        "type": "table",
        "img_path": "images/df76ad3166989c423dbd9b3dd45c674825946d27326250a448357c3ca9a5ca66.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>OS @ run (kernel mode) To start process A: allocate entry</td><td>Hardware</td><td>Program (user mode)</td></tr><tr><td>in process table alloc memory for process set base/bound registers return-from-trap (into A)</td><td>restore registers of A move to user mode jump to A's (initial) PC</td><td></td></tr><tr><td></td><td>translate virtual address perform fetch if explicit load/store:</td><td>Process A runs Fetch instruction Execute instruction</td></tr><tr><td>Handle timer decide: stop A, run B call switch() routine</td><td>ensure address is legal translate virtual address perform load/store Timer interrupt move to kernel mode</td><td>(A runs...)</td></tr><tr><td>save regs(A) to proc-struct(A) (including base/bounds)</td><td>jump to handler</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>restore regs(B) from proc-struct(B)</td><td></td><td></td></tr><tr><td>(including base/bounds)</td><td></td><td></td></tr><tr><td>return-from-trap (into B)</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td>restore registers of B</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td>move to user mode</td><td></td></tr><tr><td></td><td> jump to B's PC</td><td></td></tr><tr><td></td><td></td><td>Process B runs</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td>Execute bad load</td></tr><tr><td></td><td>Load is out-of-bounds;</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td>move to kernel mode</td><td></td></tr><tr><td></td><td> jump to trap handler</td><td></td></tr><tr><td>Handle the trap</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>decide to kill process B</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>deallocate B's memory</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>free B's entry</td><td></td><td></td></tr><tr><td>in process table</td><td></td><td></td></tr><tr><td></td><td></td><td>mic Relocation) @ Runtim.</td></tr></table></body></html>\n\n",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "WWW.OSTEP.ORG ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "base register to the virtual address and check that the address generated by the process is in bounds. Base-and-bounds also offers protection; the OS and hardware combine to ensure no process can generate memory references outside its own address space. Protection is certainly one of the most important goals of the OS; without it, the OS could not control the machine (if processes were free to overwrite memory, they could easily do nasty things like overwrite the trap table and take over the system). ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Unfortunately, this simple technique of dynamic relocation does have its inefficiencies. For example, as you can see in Figure 15.2 (page 5), the relocated process is using physical memory from $\\bar { 3 } 2 \\ \\mathrm { K B }$ to $\\bar { 4 8 } \\bar { \\mathsf { K B } }$ ; however, because the process stack and heap are not too big, all of the space between the two is simply wasted. This type of waste is usually called internal fragmentation, as the space inside the allocated unit is not all used (i.e., is fragmented) and thus wasted. In our current approach, although there might be enough physical memory for more processes, we are currently restricted to placing an address space in a fixed-sized slot and thus internal fragmentation can arise2. Thus, we are going to need more sophisticated machinery, to try to better utilize physical memory and avoid internal fragmentation. Our first attempt will be a slight generalization of base and bounds known as segmentation, which we will discuss next. ",
        "page_idx": 12
    }
]