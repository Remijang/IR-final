[
    {
        "type": "text",
        "text": "26.5 The Wish For Atomicity ",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "One way to solve this problem would be to have more powerful instructions that, in a single step, did exactly whatever we needed done and thus removed the possibility of an untimely interrupt. For example, what if we had a super instruction that looked like this: ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "memory-add 0x8049a1c, $\\$ 0 x1$ ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Assume this instruction adds a value to a memory location, and the hardware guarantees that it executes atomically; when the instruction executed, it would perform the update as desired. It could not be interrupted mid-instruction, because that is precisely the guarantee we receive from the hardware: when an interrupt occurs, either the instruction has not run at all, or it has run to completion; there is no in-between state. Hardware can be a beautiful thing, no? ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Atomically, in this context, means “as a unit”, which sometimes we take as “all or none.” What we’d like is to execute the three instruction sequence atomically: ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "mov 0x8049a1c, %eax add $\\$ 0 x1$ , %eax mov %eax, 0x8049a1c ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "As we said, if we had a single instruction to do this, we could just issue that instruction and be done. But in the general case, we won’t have such an instruction. Imagine we were building a concurrent B-tree, and wished to update it; would we really want the hardware to support an “atomic update of B-tree” instruction? Probably not, at least in a sane instruction set. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Thus, what we will instead do is ask the hardware for a few useful instructions upon which we can build a general set of what we call synchronization primitives. By using this hardware support, in combination with some help from the operating system, we will be able to build multi-threaded code that accesses critical sections in a synchronized and controlled manner, and thus reliably produces the correct result despite the challenging nature of concurrent execution. Pretty awesome, right? ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "This is the problem we will study in this section of the book. It is a wonderful and hard problem, and should make your mind hurt (a bit). If it doesn’t, then you don’t understand! Keep working until your head hurts; you then know you’re headed in the right direction. At that point, take a break; we don’t want your head hurting too much. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "THE CRUX: HOW TO SUPPORT SYNCHRONIZATION ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "What support do we need from the hardware in order to build useful synchronization primitives? What support do we need from the OS? How can we build these primitives correctly and efficiently? How can programs use them to get the desired results? ",
        "page_idx": 11
    }
]