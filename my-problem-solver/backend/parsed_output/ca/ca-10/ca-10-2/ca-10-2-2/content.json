[
    {
        "type": "text",
        "text": "10.2.2 Timing ",
        "text_level": 1,
        "page_idx": 417
    },
    {
        "type": "text",
        "text": "Now, we need to design a method that ensures that instructions seamlessly proceed to the subsequent pipeline stage. We need a global mechanism that ensures that all the instructions proceed to the next stages simultaneously. We already have this global mechanism built in, and is nothing else, but the clock. We can have a protocol that for example, ensures that at the falling edge of the clock, all the instructions proceed to the subsequent stages. ",
        "page_idx": 417
    },
    {
        "type": "image",
        "img_path": "images/b2dbbde9eca344ca6f1f7cdb534dfad65f7d11dc3406d4605100493679e31cac.jpg",
        "img_caption": [
            "Figure 10.3: A pipelined data path with registers "
        ],
        "img_footnote": [],
        "page_idx": 417
    },
    {
        "type": "text",
        "text": "Figure 10.3 shows a simple method to achieve this. We insert a register between two consecutive pipeline stages. Since we have five pipeline stages in our data path, we insert 4 registers. The four registers are named after their locations \u2013 IF-OF, OF-EX, EX-MA, and MA-RW. Each of these registers are called pipeline registers or pipeline latches. The reader needs to note that in this case, a latch, is actually referring to an edge triggered register. We shall use the terms interchangeably. All the pipeline registers are connected to a common clock, and read-write data at the same time. ",
        "page_idx": 417
    },
    {
        "type": "text",
        "text": "Definition 66 ",
        "text_level": 1,
        "page_idx": 418
    },
    {
        "type": "text",
        "text": "A pipeline register or a pipeline latch is a register that is added between two consecutive pipeline stages. All the registers are connected to the common clock, and help in seamlessly transferring instructions between pipeline stages. ",
        "page_idx": 418
    },
    {
        "type": "text",
        "text": "Let us explain with an example. When an instruction enters the pipeline, it enters the IF unit. At the end of the first cycle, it gets saved in the IF-OF register. At the beginning of the second cycle, it enters the OF stage, and then again at the end of the second cycle, it gets latched into the OF-EX register. This pattern continues till the instruction leaves the pipeline. The pipeline registers essentially transfer their inputs to the outputs at the end of a cycle (negative edge of the clock). Then the logic of the pipeline stage processes the instruction, and at the end of the cycle, the instruction gets transferred to the register of the subsequent pipeline stage. In this manner, an instruction hops between stages till it reaches the end of the pipeline. ",
        "page_idx": 418
    }
]