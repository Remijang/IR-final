[
    {
        "type": "text",
        "text": "10.1.2 Overview of Pipelining ",
        "text_level": 1,
        "page_idx": 414
    },
    {
        "type": "text",
        "text": "Let us try to find an analogy to the problem of idleness in a simple single-cycle processor as we just discussed. Let us go back to our original example of the car factory. If we assume, that we start making a car, after the previous car has been completely manufactured, then we have a similar problem. When we are assembling the engine of a car, the paint shop is idle. Likewise, when we are painting a car, the engine shop is idle. Clearly, car factories cannot operate this way. They thus typically overlap the manufacturing stages of different cars. For example, when car $A$ is in the paint shop, car $B$ is in the engine shop. Subsequently, these cars move to the next stage of manufacturing and another new car enters the assembly line. ",
        "page_idx": 414
    },
    {
        "type": "text",
        "text": "We can do something very similar here. When one instruction is in the EX stage, the next instruction can be in the OF stage, and the subsequent instruction can be in the IF stage. In fact, if we have 5 stages in our processor, where we simplistically assume that each stage roughly takes the same amount of time, we can assume that we have 5 instructions simultaneously being processed at the same time. Each instruction undergoes processing in a different unit of the processor. Similar to a car in an assembly line, an instruction moves from stage to stage in the processor. This strategy ensures that we do not have any idle units in our processor because all the different units in a processor are busy at any point in time. ",
        "page_idx": 414
    },
    {
        "type": "text",
        "text": "In this scheme, the life cycle of an instruction is as follows. It enters the IF stage in cycle $n$ , enters the OF stage in cycle $n + 1$ , EX stage in cycle $n + 2$ , MA stage in cycle $n + 3$ , and finally it finishes its execution in the RW stage in cycle $n + 4$ . This strategy is known as pipelining, and a processor that implements pipelining is known as a pipelined processor. The sequence of five stages (IF, OF, EX, MA, RW) conceptually laid out one after the other is known as the pipeline (similar to the car assembly line). Figure 10.1 shows the organization of a pipelined data path. ",
        "page_idx": 414
    },
    {
        "type": "text",
        "text": "In Figure 10.1, we have divided the data path into five stages, where each stage processes a separate instruction. In the next cycle, each instruction passes on to the next stage as shown in the figure. ",
        "page_idx": 414
    },
    {
        "type": "image",
        "img_path": "images/5b6f2dfc7024df750375cfc5ef21f9a152503c016a78bba27f0002279f4c83db.jpg",
        "img_caption": [
            "Figure 10.1: A pipelined data path "
        ],
        "img_footnote": [],
        "page_idx": 415
    },
    {
        "type": "text",
        "text": "Definition 65 ",
        "text_level": 1,
        "page_idx": 415
    },
    {
        "type": "text",
        "text": "The notion of dividing a processor into a set of stages where the stages are ordered one after the other, and simultaneously process a set of instructions by assigning an instruction to each stage, is known as pipelining. The implicit assumption here is that it takes the same amount of time for each stage to complete its work. After this time quanta is over, each instruction moves to the subsequent stage. ",
        "page_idx": 415
    },
    {
        "type": "text",
        "text": "The conceptual layout of stages where one stage is laid out after the other is known as $a$ pipeline, and a processor that incorporates pipelining is known as a pipelined processor. ",
        "page_idx": 415
    }
]