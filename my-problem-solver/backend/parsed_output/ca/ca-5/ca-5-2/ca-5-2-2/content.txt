5.2.2 Floating Point Registers

The floating point instructions in x86 have a dual view of the floating point register file. They can see them either as normal registers or as a set of registers organized as a stack. Let us elaborate.

To start out, x86 defines 8 floating point registers named:  . These are 80-bit registers, The x86 floating point format has a 64-bit mantissa, and a 15-bit exponent. It is thus more precise than double precision numbers. The registers  to  are organized as a stack. Here,  is the top of the stack, and  is the bottom of the stack as shown in Figure 5.2. Additionally, x86 has a tag register that maintains the status of each register in the stack. The tag register has 8 fields (1 field for 1 register). Each field contains 2 bits. If the value of these bits is 00, then the corresponding register contains valid data. If the value is 01, then the register contains a 0, and if it is 11, then the register is empty. 10 is reserved for special purposes. We shall refer to the stack of registers, as the floating point stack, or simply the FP stack.

The registers  to  are positions on the FP stack. st0 is always the top of the stack, and  is always the bottom of the stack. If we push a data item on to the FP stack, then the contents of each register get transferred to the register below it. If the stack is full (means that  contains valid data), then a stack overflow occurs. This situation needs to be avoided. Most floating point instructions operate on data values saved at the top of the stack. They pop the source operands, and push the destination operand.