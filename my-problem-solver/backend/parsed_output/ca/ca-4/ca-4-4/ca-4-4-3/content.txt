4.4.3 Branch Instructions

Figure 4.9 shows the format of the branch (  ) and the branch-and-link (  ) instructions. If the L(link) bit is equal to 1, then the instruction is  , otherwise it is just  . The instruction contains a 24-bit signed offset. The ARM processor first shifts the offset by 2 bits. This is because each instruction is 32 bits or 4 bytes long, and additionally the hardware expects instructions to be stored at 4 byte boundaries. Therefore, the starting address of each instruction will contain two zeros in its two least significant positions. Hence, there is no necessity to waste two bits in the encoding for saving these two zeros. The next step is to extend the sign of this shifted offset to 32 bits. Lastly, the hardware computes the branch target by adding the shifted and sign-extended offset to the PC plus 8 bytes.

The interesting thing to note is that we are adding the sign-extended shifted offset to PC+8, not the PC. We shall see in Chapter 10 that the reason for doing this is to simplify the hardware. The format for branches is different from the format used to encode data transfer and data processing instructions. This is because more bits are used to encode the displacement. We had followed a similar approach in SimpleRisc also. However, we need to note that having a new format is not a very bad thing if it is simple, as is the case for a branch.