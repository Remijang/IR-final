3.2.3 Assembly Language Syntax

In this section, we shall describe the syntax of assembly language. The exact syntax of an assembly file is dependent on the assembler. Different assemblers can use different syntax, even though they might agree on the basic instructions, and their operand formats. In this chapter, we explain the syntax of the GNU family of assembly languages. They are designed for the GNU assembler, which is a part of the GNU compiler collection (gcc). Like all GNU software, this assembler and the associated compiler is freely available for most platforms. As of 2012, the assembler is available at [gnu.org, ]. In this section, we shall provide a brief overview of the format of assembly files. For additional details refer to the official manual of the GNU assembler [Elsner and Fenlason, 1994]. Note that other assemblers such as NASM, and MASM, have their own formats. However, the overall structure is not conceptually very different from what we shall describe in this section.

Assembly Language File Structure

An assembly file is a regular text file, and it has a (.s) suffix. The reader can quickly generate an assembly file for a C program (test.c), if she has the gcc (GNU Compiler) installed. It can be generated by issuing the following command.

gcc -S test.c

The generated assembly file will be named test.s. GNU assembly files have a very simple structure, as shown in Figure 3.4. They contain a list of sections. Examples of different sections are text (actual program), data (data with initialized values), and bss (common data that is initialized to 0). Each section starts with a section heading, which is the name of the section prefixed by the ‘.’ symbol. For example, the text section starts with the line “.text”. Thereafter, there is a list of assembly language statements. Each statement is typically terminated by the newline character. Likewise, the data section contains a list of data values. An assembly file begins with the file section that contains a line of the form – “.file <name of the file> ”. When we are generating an assembly file from a C program using the gcc compiler, the name of the file in the .file section is typically the same as our original C program (test.c). The text section is mandatory, and the rest of the sections are optional. There might be one or more data sections. It is also possible to define new sections using the .section directive. In this book, we primarily concentrate on the text section because we are interested in learning about the nature of the instruction set. Let us now look at the format of assembly statements.

Basic Statements

A bare bones assembly language statement specifies an assembly instruction and has two parts – the instruction and its list of operands, as shown in Figure 3.5. The instruction is a textual identifier of the actual machine instruction. The list of operands contains the value or location of each operand. The value of an operand is a numeric constant. It is also known as an immediate value. The operand locations can either be register locations or memory locations.

Definition 29

In computer architecture, a constant value specified in an instruction is also known as an immediate.

Now, let us consider an example.

add r3, r1, r2

In this ARM assembly statement, the add instruction is specifying the fact that we wish to add two numbers and save the result in some pre-specified location. The format of the add instruction in this case is as follows:  instruction > < destination register  operand register 1 > < operand register  . The name of the instruction is add, the destination register is  , the operand registers are  and  . The detailed steps of the instruction are as follows:

1. Read the value of register  . Let us refer to the value as  .   
2. Read the value of register  . Let us refer to the value as  .   
3. Compute  .   
4. Save  in register 

Let us now give an example of two more instructions that work similarly (see Example 23).

Example 23   
sub r3, r1, r2   
mul r3, r1, 3

The sub instructions subtracts two numbers stored in registers, and the mul instruction multiplies a number stored in the register,  , with the numeric constant, 3. Both the instructions save the result in the register,  . Their mode of operation is similar to the add instruction. Moreover, the arithmetic instructions – add, sub, and mul – are also known as data processing instructions. There are several other classes of instructions such as data transfer instructions that load or store values from memory, and control instructions that implement branching.

Generic Statement Structure

The generic structure of an assembly statement is shown in Figure 3.6. It consists of three fields namely a label (identifier of the instruction), the key (an assembly instruction, or a directive to the assembler), and a comment. All three of these fields are optional. However, any assembly statement needs to have at least one of these fields.

A statement can optionally begin with a label. A label is a textual identifier for the statement. In other words, a label uniquely identifies an assembly statement in an assembly file. Note that we are not allowed to repeat labels in the same assembly file. We shall find labels to be very useful while implementing branch instructions.

Definition 30

A label in an assembly file uniquely identifies a given point or data item in the assembly program.

An example of a label is shown in Example 24. Here the name of the label is “label1”, and it is succeeded by a colon. After the label we have written an assembly instruction and given it a list of operands. A label can consist of valid alpha-numeric characters  and the symbols  , and ‘\$’. Typically, we cannot start a label with a digit. After specifying a label we can keep the line empty, or we can specify a key (part of an assembly statement). If the key begins with a ‘.’, then it is an assembler directive, which is valid for all computers. It directs the assembler to perform a certain action. This action can include starting a new section, or declaring a constant. The directive can also take a list of arguments. If the key begins with a letter, then it is a regular assembly instruction.

Example 24   
label1: add r1, r2, r3

After the label, assembly instruction, and list of operands, it is possible to optionally insert comments. The GNU assembler supports two types of comments. We can insert regular C or Java style comments enclosed between  and  . It is also possible to have a small single line comment by preceding the comment with the  character in ARM assembly.

Example 25

label1: add r1, r2, r3 @ Add the values in r2 and r3 label2: add r3, r4, r5 @ Add the values in r4 and r5 add r5, r6, r7 /\* Add the values in r6 and r7 \*/

Let us not slightly amend our statement regarding labels. It is possible that an assembly statement only contains a label, and does not contain a key. In this case, the label essentially points to an empty statement, which is not very useful. Hence, the assembler assumes that in such a case a label points to the nearest succeeding assembly statement that contains a key.