[
    {
        "type": "text",
        "text": "3.4.2 Further Reading ",
        "text_level": 1,
        "page_idx": 137
    },
    {
        "type": "text",
        "text": "Instruction set design and the study of assembly languages are very old fields. Readers should refer to classic computer architecture textbooks by Henessey and Patterson [Henessey and Patterson, 2010], Morris Mano [Mano, 2007], and William Stallings [Stallings, 2010] to get a different perspective. For other simple instruction sets such as SimpleRisc , readers can read about the MIPS [Farquhar and Bunce, 2012], and Sparc [Paul, 1993] instruction sets. Their early variants are simple RISC instruction sets with up to 64 instructions, and a very regular structure. Along with the references that we provide, there are a lot of excellently written tutorials and guides on the web for different ISAs. ",
        "page_idx": 137
    },
    {
        "type": "text",
        "text": "Since the last 10 years, a trend has started to move towards virtual instruction sets. Programs compiled for these instruction sets need to be compiled once again on a real machine such that the virtual instruction set can be translated to a real instruction set. The reasons for doing so shall be described in later chapters. The Java language uses a virtual instruction set. Details can be found in the book by Meyer et al. [Downing and Meyer, 1997]. Readers can also refer to a highly cited research paper that proposes the LLVA [Adve et al., 2003] virtual instruction set. ",
        "page_idx": 137
    },
    {
        "type": "text",
        "text": "Exercises ",
        "text_level": 1,
        "page_idx": 137
    },
    {
        "type": "text",
        "text": "Assembly Language Concepts ",
        "text_level": 1,
        "page_idx": 137
    },
    {
        "type": "text",
        "text": "Ex. 1 \u2014 What is the advantage of the register-indirect addressing mode over the memorydirect addressing mode?   \nEx. 2 \u2014 When is the base-offset addressing mode useful?   \nEx. 3 \u2014 Consider the base-scaled-offset addressing mode, which directs the hardware to automatically multiply the offset by 4. When is this addressing mode useful?   \nEx. 4 \u2014 Which addressing modes are preferable in a machine with a large number of registers?   \nEx. 5 \u2014 Which addressing modes are preferable in a machine with very few registers? Ex. 6 \u2014 Assume that we are constrained to have at the most two operands per instruction. Design a format for arithmetic instructions such as add and multiply in this setting. ",
        "page_idx": 137
    },
    {
        "type": "text",
        "text": "Assembly Programming ",
        "text_level": 1,
        "page_idx": 137
    },
    {
        "type": "text",
        "text": "Ex. 7 \u2014 Write simple assembly code snippets in SimpleRisc to compute the following: ",
        "page_idx": 137
    },
    {
        "type": "text",
        "text": "i) $a + b + c$   \nii) $a + b - c / d$   \niii) $( a + b ) * 3 - c / d$   \niv) $a / b - ( c * d ) / 3$   \nv) $( a \\ll 2 ) - ( b \\gg 3 )$ (( $\\ll$ (left shift logical), $\\gg$ (left shift arithmetic)) ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "Ex. 8 \u2014 Write a program to load the value $0 x F F E D F C 0 0$ into $r 0$ . Try to minimize the number of instructions. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "Ex. 9 \u2014 Write an assembly program to set the $5 ^ { t h }$ bit of register $r 0$ to the value of the $3 ^ { r d }$ bit of $r 1$ . Keep the rest of the contents of $r 0$ the same. The convention is that the LSB is the first bit, and the MSB is the $3 2 ^ { n d }$ bit. (Use less than or equal to 5 SimpleRisc assembly statements) ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "Ex. 10 \u2014 Write a program in SimpleRisc assembly to convert an integer stored in memory from the little endian to the big endian format. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "Ex. 11 \u2014 Write a program in SimpleRisc assembly to compute the factorial of a positive number using an iterative algorithm. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "Ex. 12 \u2014 Write a program in SimpleRisc assembly to find if a number is prime. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "Ex. 13 \u2014 Write a program in SimpleRisc assembly to test if a number is a perfect square. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "Ex. 14 \u2014 Given a 32-bit integer in $r 3$ , write a SimpleRisc assembly program to count the number of $1$ to 0 transitions in it. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "\\* Ex. 15 \u2014 Write a program in SimpleRisc assembly to find the smallest number that is a sum of two different pairs of cubes. [Note: 1729 is the Hardy-Ramanujan number. $1 7 2 9 =$ $1 2 ^ { 3 } + 1 ^ { 3 } = 1 0 ^ { 3 } + 9 ^ { 3 } \\phantom { . 0 0 0 }$ ]. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "Ex. 16 \u2014 Write a SimpleRisc assembly program that checks if a 32-bit number is a palindrome. Assume that the input is available in $r 3$ . The program should set $r 4$ to $1$ if it is a palindrome, otherwise $r 4$ should contain a 0. A palindrome is a number which is the same when read from both sides. For example, 1001 is a 4-bit palindrome. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "Ex. 17 \u2014 Design a SimpleRisc program that examines a 32-bit value stored in $r 1$ and counts the number of contiguous sequences of 1s. For example, the value: ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "contains six sequences of 1s. Write the result in $r 2$ . ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "\\*\\* Ex. 18 \u2014 Write a program in SimpleRisc assembly to subtract two 64-bit numbers, where each number is stored in two registers. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "\\*\\* Ex. 19 \u2014 In some cases, we can rotate an integer to the right by $n$ positions (less than or equal to 31) so that we obtain the same number. For example: A 8-bit number 11011011 can be right rotated by 3 or 6 places to obtain the same number. Write an assembly program to efficiently count the number of ways we can rotate a number to the right such that the result is equal to the original number. ",
        "page_idx": 138
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 139
    },
    {
        "type": "text",
        "text": "$^ { * * }$ Ex. 20 \u2014 A number is known as a cubic Armstrong number if the sum of the cubes of the decimal digits is equal to the number itself. For example, 153 is a cubic Armstrong number $1 5 3 = 1 ^ { 3 } + 5 ^ { 3 } + 3 ^ { 3 }$ ). You are given a number in register, $r 0$ , and it is known to be between 1 and 1 million. Can you write a piece of assembly code in SimpleRisc to find out if this number is a cubic Armstrong number. Save 1 in $r 1$ if it is a cubic Armstrong number; otherwise, save 0. ",
        "page_idx": 139
    },
    {
        "type": "text",
        "text": "\\*\\*\\* Ex. 21 \u2014 Write a SimpleRisc assembly language program to find the greatest common divisor of two binary numbers $u$ and $v$ . Assume the two inputs (positive integers) to be available in $r 3$ and $r 4$ . Store the result in $r 5$ . [HINT: The gcd of two even numbers $u$ and $v$ is $2 \\ast$ $g c d ( u / 2 , v / 2 ) ]$ ",
        "page_idx": 139
    },
    {
        "type": "text",
        "text": "Instruction Set Encoding ",
        "text_level": 1,
        "page_idx": 139
    },
    {
        "type": "text",
        "text": "Ex. 22 \u2014 Encode the following SimpleRisc instructions: ",
        "page_idx": 139
    },
    {
        "type": "text",
        "text": "i) sub sp, sp, 4 ii) mov r4, r5 iii) addu r4, r4, 3 iv) ret v) ld r0, [sp] vi) st r4, 8[r9] ",
        "page_idx": 139
    },
    {
        "type": "text",
        "text": "Design Problems ",
        "text_level": 1,
        "page_idx": 139
    },
    {
        "type": "text",
        "text": "Ex. 23 \u2014 Design an emulator for the SimpleRisc ISA. The emulator reads an assembly program line by line, checks each assembly statement for errors, and executes it. Furthermore, define two assembler directives namely .print, and .encode to print data on the screen. The .print directive takes a register or memory location as input. When the emulator encounters the .print directive, it prints the value in the register or memory location to the screen. Similarly, when the emulator encounters the .encode directive it prints the 32-bit encoding of the instruction on the screen. Additionally, it needs to also execute the instruction. ",
        "page_idx": 139
    }
]