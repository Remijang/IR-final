3.3.14 Encoding the SimpleRisc Instruction Set

Let us now try to encode each instruction to a 32-bit value. We observe that we have instructions in 0,1,2 and 3 address formats. Secondly, some instructions take immediate values. Hence, we need to divide 32 bits into multiple fields. Let us first try to encode the type of instruction. Since there are 21 instructions, we require 5 bits to encode the instruction type. The code for each instruction is shown in Table 3.10. We can use the five most significant bits in a 32-bit field to specify the instruction type. The code for an instruction is also known as its opcode.

Definition 39

An opcode is a unique identifier for each machine instruction.

Now, let us try to encode each type of instruction starting from 0-address instructions.

Encoding 0-Address Instructions

The two 0-address instructions that we have are ret, and nop. The opcode is specified by the five most significant bits. In this case it is equal to 10100 for ret and 01101 for nop (refer to Table 3.10). Their encoding is shown in Figure 3.12. We only need to specify the 5 bit opcode in the MSB positions. The rest of the 27 bits are not required.

Encoding 1-Address Instructions

The 1-address instructions that we have are call,  , beq, and bgt. In SimpleRisc assembly, they take a label as an argument. While encoding the instruction we need to specify the address of the label as the argument. The address of a label is the same as the address of the instruction that it is pointing to. If the line after the label is empty, then we need to consider the next assembly statement that has an instruction.

These four instructions require 5 bits for their opcode. The remaining 27 bits can be used for the address. Note that a memory address is 32 bits long. Hence, we cannot cover the address space with 27 bits. However, we can make two key optimizations. The first is that we can assume PC-relative addressing. We can assume that the 27 bits specify an offset (both positive and negative) with respect to the current PC. The branch statements in modern programs are generated because of for/while loops or if-statements. For these constructs the branch target is typically within a range of several hundred instructions. If we have 27 bits to specify the offset, and we assume that it is a 2’s complement number, then the maximum offset in any direction (positive or negative) is  . This is more than sufficient for almost all programs.

There is another important observation to be made. An instruction takes 4 bytes. If we assume that all instructions are aligned to 4-byte boundaries, then all starting memory addresses of instructions will be a multiple of 4. Hence, the least two significant binary digits of the address will be 00. There is no reason for wasting bits in trying to specify them. We can assume that the 27 bits specify the offset of the address of the memory word (in units of 4-byte memory words) that contains the instruction. With this optimization, the offset from the PC in terms of bytes becomes 29 bits. This number should suffice for even the largest programs.

Just in case, there is a pathological example, in which the branch target is more than  bytes away, then the assembler needs to chain the branches such that one branch will call another branch and so on. However, this would be a very rare case. The encoding for these instructions is shown in Figure 3.13.

Note that the 1-address instruction format finds a use for the unused bits in the 0-address format. We can think of the 0-address format for the ret instruction as a special case of the 1-address format. Let us refer to the 1-address format as the branch format. Let us name the fields in this format. Let us call the opcode portion of the format as  , and the offset as offset. The op field contains the bits in positions 28-32, and the offset field contains the bits in positions 1-27.

Encoding 3-Address Instructions

Let us consider 3-address instructions first, and then look at other types of instructions. The 3-address instructions in SimpleRisc are add, sub, mul, div, mod, and, or, lsl, lsr, and  .

Let us consider a generic 3-address instruction. It has a destination register, one input source register, and a second source operand that can either be a register or an immediate. We need to devote one bit to find out if the second source operand is a register or an immediate. Let us call this the  bit and specify it just after the opcode in the instruction. If  , then the second source operand is an immediate. If  , the second source operand is a register.

Let us now consider the case of 3-address registers that have their second source operand as a register(  ). Since we have 16 registers, we require 4 bits to uniquely specify each register. Register  can be encoded as the unsigned 4-bit binary equivalent of  . Hence, to specify the destination register and two input source registers, we require 12 bits. The structure is shown in Figure 3.14. Let us call this instruction format as the register format. Like the branch format let us name the different fields – op (opcode, bits: 28-32),  (immediate present, bits:27),  (destination register, bits: 23-26), rs1 (source register 1, bits: 19-22), and  (source register 2, bits:15-18).

Now, if we assume that the second source operand is an immediate, then we need to set  to 1. Let us calculate the number of bits we have left for specifying the immediate. We have already devoted 5 bits for the opcode, 1 bit for the  bit, 4 bits for the destination register, and 4 bits for the first source register. In all, we have expended 14 bits. Hence, out of 32 bits, we are left with 18 bits, and we can use them to specify the immediate.

We propose to divide the 18 bits into two parts – 2 bits (modifier)  bits (constant part of the immediate). The two modifier bits can take three values – 00 (default), 01 (‘u’), and 10 (‘h’). The remaining 16 bits are used to specify a 16-bit 2’s complement number when we are using default modifiers. For the  and  modifiers, we assume that the 16-bit constant in the immediate field is an unsigned number. In the rest of this book, we assume that the immediate field is 18 bits long with a modifier part, and a constant part. The processor internally expands the immediate to a 32-bit value, in accordance with the modifiers.

This encoding is shown in Figure 3.15. Let us call this instruction format as the immediate format. Like the branch format let us name the different fields – op (opcode, bits: 28-32),  (immediate present, bits:27), rd (destination register, bits: 23-26), rs1 (source register 1, bits: 19-22), and imm (immediate, bits:1-18).

Example 35 Encode the instruction: sub r1, r2, 3.

Answer: Let us encode each field of the instruction. We have:

Thus, the binary encoding is (spaces added for readability): 00001 1 0001 0010 00 0000 0000 0000 0011. When we convert to hex, we get: 0x0C480003.

Encoding cmp, not, and mov

The cmp instruction has two source operands. The second source operand can be a register or an immediate. We will use the standard 3-address register or immediate formats for encoding the cmp instruction. The destination register field will remain empty. See Figure 3.16. One of our aims in designing the encoding is to keep things as simple and regular as possible such that the processor can decode the instruction very easily. We could have designed a separate encoding for a 2-address instruction such as cmp. However, the gains would have been negligible, and by sticking to a fixed format, the processor’s instruction decode logic becomes more straightforward.

The not and mov instructions have one destination register, and one source operand. This source operand can be either an immediate or a register. Hence, we can treat the source operand of these instructions as the second source operand in the 3-address format, and keep the field for the first source register empty for both of these instructions. The format is shown in Figure 3.16.

Load and Store Instructions

In SimpleRisc the instructions –  and  – are 2-address instructions. The second operand points to a memory address. It uses a base-offset addressing mode. There is a base register, and an integer offset.

For a load instruction, there are three unique pieces of information that need to be encoded: destination register, base register, and offset. In this case, we propose to use the three address immediate format. The  bit is set to 1, because we need to specify an offset. The first source register represents the base register, and the immediate represents the offset. Note that this encoding follows our principle of regularity and simplicity. Our aim is to reuse the 3-address register and immediate formats for as many instructions as possible.

Now, let us look at store instructions. Store instructions are slightly special in the sense that they do not have a destination register. The destination of a store instruction is a memory location. This information cannot be encoded in the immediate format. However, for reasons of simplicity, we still want to stick to the formats that we have defined. We need to take a crucial design decision here by answering Question 5.

Question 5

Should we define a new instruction format for the store instruction?

Let us adjudge this case in the favor of not introducing a new format. Let us try to reuse the immediate format. The immediate format has four fields – op, rd, rs1, and imm. The opcode field (op) need not be touched. We can assume that the format of the store instruction is: st rd, imm[rs1]. In this case, the field  represents the register to be stored. Like the load instruction we can keep the base register as  , and use the imm field to specify the offset. We break the pattern we have been following up till now by saving a source register in rd, which is meant to save a destination register. However, we were compelled to do this at the cost of not introducing a new instruction format. Such design trade-offs need to be made continuously. We have to always balance the twin objectives of elegance and efficiency. It is sometimes not possible to choose the best of both worlds. In this case, we have gone for efficiency, because introducing a new instruction format for just one instruction is overkill.

To conclude, figure 3.17 shows the encoding for load and store instructions.

Example 36 Encode the instruction: st r8, 20[r2].

Answer: Let us encode each field of the instruction. We have:

Thus, the binary encoding is (spaces added for readability): 01111 1 1000 0010 00 0000 0000 0001 0100. When we convert to hex, we get: 0x7E080014.

Summary of Instruction Formats

In the last few subsections, we have described a method to encode an instruction into a sequence of bits (machine code). A compiler can use this method to translate a program written in a high level language to machine code, and thus create an executable program. It is now the job of the processor to execute this program by reading the instructions one by one. We have made our life substantially easy by assuming that each instruction is exactly 4 bytes long. The processor simply needs to start at the starting address of the program in memory and fetch one instruction after the other. If an instruction is a branch, then the processor needs to evaluate the branch condition, and jump to the branch target. The part of the processor that is primarily concerned about the details of the ISA is the decode logic or the decoder . It is the role of the decoder to understand and decode an instruction. While designing an encoding for an ISA, creating a simple and efficient instruction decoder was our prime objective.

To decode a SimpleRisc instruction, the first task is to find the instruction format. We have defined three formats – branch, immediate, and register. Let us refer to Table 3.10. The six branch format instructions are call, ret, beq, bgt, b, and nop. Recall that we encode both 0 and 1-address format instructions in the branch format.

The opcodes of all the five branch instructions (  , beq, bgt, call, ret) have 1 as their most significant bit, whereas all other instructions have a 0 in their most significant position. Hence, for a decoder to find out if an instruction is a branch is very easy. It just needs to take a look at the three most significant bit of the opcode. It should be 1. Moreover, to find out if an instruction is a nop, the decoder needs to compare it with 01101, which requires a small circuit.

If an instruction is not in the branch format, then it must be in the immediate or register format. This can be quickly decided by taking a look at the  bit. If it is 1, then the instruction is in the immediate format, otherwise it is in the register format. The formats are summarized in Table 3.11.

Lessons Learned

Now that we have designed a small instruction set of our own, looked at sample programs, and encoded our instructions, we are all set to design a processor for our SimpleRisc ISA. It needs to decode every single instruction, and execute it accordingly. Before proceeding further, let us look back at how we designed our ISA, and how should ISAs be designed in general.

1. The first step in designing an ISA is to study the workload that the ISA is being designed for. In the case of SimpleRisc , we wanted to use it for running general purpose programs. This meant that SimpleRisc needed to be simple, concise, generic, and complete as outlined in Chapter 1. However, for different target workloads, the requirements might be very different.   
2. After studying the workload, we need to next decide on the number of instructions that we need to have. Unless there are compelling requirements otherwise, it is not advisable to have more than 64-128 instructions. More than 128 instructions will make the instruction decoder very complex. It will also complicate the design of the processor.   
3. After finalizing the number of instructions, we need to finalize the different types of instructions. If we are designing an ISA for extensive numerical computation, then we should have many arithmetic operations. If we are designing an ISA for processing text, then we should have many instructions that can process strings (pieces of text). In the case of SimpleRisc we devoted 6 instructions to arithmetic operations, 3 instructions to shift operations, 3 instructions to logical operations, 3 instructions to data transfer, 5 instructions to branch operations, and designated 1 instruction as no-op (no operation). We chose this distribution because we expect to run a lot of general purpose programs that will have complex arithmetical and logical constructs. We could have very well gotten rid of an instruction such as mod and replaced it with a sophisticated branch instruction, if we wanted to look at programs that will have a lot of branches. These subtle trade-offs need to be evaluated thoroughly.

4. Once, we have finalized the broad types of instructions and the distribution of instructions across these types, we come to the actual instructions themselves. In this case also, we want to make the common case fast. For example, there is no point in having a division instruction in programs that do not have divisions operations. Secondly, we need to decide the format of each instruction in terms of the number and type of operands. For example, in SimpleRisc , all our arithmetic operations are in the 3-address format. If there is a requirement from the side of processor designers that they want to reduce the number of registers, then we can opt for the 2-address format. Alternatively, if we want to process a massive amount of information in one go such as add a list of 10 numbers, then we can even have an 11-address format instruction.

5. Once the format of the instruction is decided, we need to decide on the different addressing modes. This decision has many ramifications. For example, if we allow the register-indirect addressing mode in arithmetic instructions, then we need to add additional hardware to access the memory and fetch the operand values. On the other hand, if we have a register-only addressing mode for arithmetic instructions, then their implementation will be fast. However, the flip side is that we will need more registers, and more dedicated load-store instructions to access memory. This tradeoff needs to be kept in mind.

6. Once we have designed the set of instructions, we need to decide a proper encoding for it. The main aim should be to reduce the work of the instruction decoder. It is best to have a small set of generic instruction formats that the decoder can quickly discern. We need to balance elegance and efficiency such that the decoder can be simple yet efficient.