B.1.2 Graphics Pipeline

Let us now look at the pipeline of a typical graphics processor in Figure B.1.

The first stage is called vertex processing. In this stage, the set of vertices, shapes, and triangles, are processed. The GPU performs complex operations such as object rotation, and translation. The programmer might specify that she wants a given object to move at a certain velocity towards another object. It is thus necessary to translate the position of a shape at a given rate. Such operations are also performed in this stage. The output of this stage is a set of simple triangles in a 2D plane.

The second stage is known as rasterization. The process of rasterization converts each of the triangles into a set of pixels, known as fragments. Moreover, it associates each pixel in a fragment with a set of parameters. These parameters are later used to interpolate the value of the color. The third stage does fragment processing. This stage either colors the pixels of a fragment according to a fixed set of rules using the intermediate results computed in the previous stage, or, it maps a given texture to the fragment. For example, if a fragment represents the surface of a wooden table, then this stage maps the texture of wood to the colors of the pixels. This stage is also used to incorporate effects such as shadows and illumination.

Note that up till now we have computed the colors of the fragments for all the objects in a scene. However, it is possible that one object might be in front of another object, and thus a part of the second object might be hidden. The fourth stage aggregates all the fragments from the third stage, and performs an operation called frame buffer processing. The frame buffer is a large array that contains the color values for each pixel. The graphics card passes the frame buffer to the display device 50-100 times per second. One of the operations performed in this stage is known as depth buffering. Here, it computes a 2D view of the 3D space at a certain angle by hiding parts of objects. Once the final scene is created, the graphics pipeline transfers the image to the frame buffer.

This is precisely the way complex games, or even standard operations such as minimizing or maximizing a window are rendered by a graphics processor. Rendering is defined as the process of generating a scene in pixels, by processing the high level description of a scene in terms of objects, rules, and visual effects. Discussing the exact details of rendering is beyond the scope of this book. The interested reader can refer to a book on computer graphics [Hughes et al., 2013]. The only point that the user should appreciate is that the process of rendering essentially involves a lot of linear algebra operations. Readers familiar with linear algebra will quickly appreciate the fact that object rotation or translation are all matrix operations. These operations process numerous floating point values and are inherently parallel.