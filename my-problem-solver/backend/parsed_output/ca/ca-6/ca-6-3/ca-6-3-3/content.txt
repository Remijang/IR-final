6.3.3 Load and Store Instructions

Table 6.11: Load and store instructions. Note that  is an assembler directive.

Table 6.11 shows the load and store instructions in RISC-V. We only show the 32-bit versions of these instructions. The  instruction loads 32-bit values from memory that is specified in the base-offset format. On similar lines, the  instruction stores the value of a register to memory. Note that the store instruction takes two register source operands, and it has its separate format. The store operation has always been an exception in such respects. RISCV defines a special format for it, which accepts two register-based source operands and an immediate.

Example 110 Write an assembly program to load a0 with the contents of the memory address

sp s0 4 12.

Answer:

. main :

slli s0 , s0 , 2 # s0 = s0 \* 4   
add s0 , s0 , 12 # s0 = s0 + 12   
sub t0 , sp , s0 # t0 = sp - s0   
lw a0 , 0( t0) # load the value of mem [t0] in a0

Example 111

Write an assembly program to create a copy of a 10-element array. Assume the starting address of the original array is stored in a1 and that of destination array is stored in a2.

Answer:

. main : addi t1 , zero , 0 # counter (t1) = 0 addi t2 , zero , 10 # number of iterations   
. loop : lw t0 , 0( a1) # load an element from the source array sw t0 , 0( a2) # store an element in the destination array addi a1 , a1 , 4 # get the address of the next element : src array addi a2 , a2 , 4 # destination array addi t1 , t1 , 1 # increment the counter bne t1 , t2 , . loop # loop back

Example 112

Write a RISC-V assembly program to compute the sum of the elements in a 10-element array. Assume that the base address of the array is stored in a1. Store the result in a0.

Answer:

Listing 6.3: C code

void addNumbers (int a [10]) { int idx ; int sum = 0; for (idx = 0; idx < 10; idx ++){

Example 113

Write a RISC-V assembly program to compute the factorial of a number (stored in a1) using recursion. Store the result in a0.

Answer:

. fact : # check if n (in a1) is 0 or 1 addi t1 , zero , 1 # t1 = 1 bge t1 , a1 , . ltone # if (a1 <= 1) jump to . ltone # need to make a recursive call add s0 , a1 , zero # s0 = a1 (=n) addi a1 , a1 , -1 # a1 = n 1 # store the state addi sp , sp , -8  sw ra , 0( sp) sw s0 , 4( sp) # recursive call jal ra , . fact # restore the state of the stack

The la Assembler Directive

There is often a need to load values to memory before a program starts to execute. A need arises when we use built-in constants and initialize global or static variables. Using the  instruction, it is always possible to load 32-bits to a given memory address. However, it is possible to design a more elegant solution that in practice will translate to multiple assembly instructions. It will nevertheless make the job of the assembly programmer much easier. The la directive achieves this.

Let us consider an example. A constant val needs to be defined as a label. The specific way of defining it is as follows: val: .word 17. A 32-bit integer constant requires the .word directive and a floating point constant requires the .float directive. It is then succeeded by the value of the constant.

The la directive can be used to load the address of a constant into a register. Subsequently, a regular load instruction can be used to read the value of the constant (refer to Example 114).

Example 114

Define a constant val that is initialized to 17. Store its value in register s0 after loading it from memory.

Answer: