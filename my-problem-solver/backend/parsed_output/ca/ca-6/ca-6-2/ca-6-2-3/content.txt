Example 95

Write an assembly program to multiply 3 with -17 and save the result in t3.

Answer:

Example 96

Compute  and save the result in t4.

Answer:

# load the registers with required values addi t1 , zero , 1 # t1 = 1 addi t2 , zero , 12 # t2 = 12

# perform the arithmetic operations

The division instruction div is comparatively simpler. In the RV32 variant, it requires 32- bit dividends and divisors. The quotient is stored in the destination register. The rounding is towards zero. Let us explain rounding using a few examples.

We see that rounding towards zero also means that the sign of the remainder is the same as the sign of the dividend. The remainder instruction works on similar lines. It computes the remainder of the division operation (rounding towards zero).

Akin to the multiplication operations, the division and remainder operation work in the same manner. When they are issued back to back, micro-architectures are expected to fuse them. They compute a single division operation and store the results in two registers â€“ one register for the quotient and one for the remainder, respectively.

This is an example of a scenario where the ISA has deliberately been under-designed. Instead of having an instruction that stores to two 32-bit registers, the programmer or compiler are expected to invoke these instructions consecutively. It is the job of the hardware to dynamically identify such sequences and fuse them. This transfers the responsibility of ensuring efficiency to hardware at the cost of keeping the ISA simple.

Example 97

Write a RISC-V assembly program to divide -50 by 3. Store the quotient in t2 and remainder in t3.

Answer: