[
    {
        "type": "text",
        "text": "9.6.3 Implementing Instructions in the Microassembly Language ",
        "text_level": 1,
        "page_idx": 392
    },
    {
        "type": "text",
        "text": "Let us now try to implement program instructions in the microassembly language using the set of basic microinstructions enumerated in Table 9.8. ",
        "page_idx": 392
    },
    {
        "type": "text",
        "text": "For all the instructions, they start with a common set of microinstructions as shown below. We refer to these 4 microinstructions as the preamble. ",
        "page_idx": 392
    },
    {
        "type": "text",
        "text": ".begin:   \n2 mloadIR   \n3 mdecode   \n4 madd pc, 4   \n5 mswitch ",
        "page_idx": 392
    },
    {
        "type": "text",
        "text": "Definition 64 ",
        "text_level": 1,
        "page_idx": 392
    },
    {
        "type": "text",
        "text": "A set of microinstructions that is common to all program instructions and is executed at the beginning before proceeding to implement the logic of the instruction, is known as the preamble, or microcode preamble. ",
        "page_idx": 392
    },
    {
        "type": "text",
        "text": "Every instruction needs to pass through at least three of these steps. We need to fetch the contents of the PC and load them into the ir register. Then, we need to decode the instruction, and break it down into its constituent fields. For instructions, other than branches, we need to increment the value of the PC by 4. In our microcode we prefer to do this step for all the instructions. For taken branches, we need to later overwrite the PC with the branch target. Lastly, we need to execute the mswitch instruction to jump to the starting location of the set of microinstructions that are specific to the program instruction. ",
        "page_idx": 393
    },
    {
        "type": "text",
        "text": "The label .begin points to the beginning of this routine. Note that after finishing the execution of an instruction, we need to jump to the .begin label such that we can start processing the next instruction in the program. Note that in our microassembly code we specify the label that we need to branch to. When the microassembly code is translated to actual machine level microinstructions, then each label is replaced by the address of the corresponding microinstruction. ",
        "page_idx": 393
    }
]