[
    {
        "type": "text",
        "text": "9.3 The Control Unit ",
        "text_level": 1,
        "page_idx": 377
    },
    {
        "type": "text",
        "text": "Table 9.4 shows the list of control signals that need to be generated by the control unit along with their associated conditions. The only control signal that is not generated by the control unit is isBranchT aken. This is generated by the branch unit that is a part of the execute unit. However, the rest of the 22 signals need to be generated by the control unit. Recall that the inputs to the control unit are the opcode of the instruction, and the value of the immediate bit. ",
        "page_idx": 377
    },
    {
        "type": "text",
        "text": "The hardwired control unit for our simple processor can be thought of as a black box that takes 6 bits as input (5 opcode bits, and 1 immediate bit), and produces 22 control signals as its output. This is shown in Figure 9.16. ",
        "page_idx": 377
    },
    {
        "type": "image",
        "img_path": "images/3145c10d1bd9fa322af0781ee11ef40f47e4aa574b181105bc360eeebb0bce5d.jpg",
        "img_caption": [
            "Figure 9.15: A basic processor "
        ],
        "img_footnote": [],
        "page_idx": 378
    },
    {
        "type": "text",
        "text": "Internally, there are a set of logic gates that act on the input bits to produce each output bit. For example, to set the isAdd signal, we need to check if the opcode is equal to 00000. Let us number the five bits of the opcode as $\\ o p _ { 1 }$ , $\\ o p _ { 2 }$ , $o p _ { 3 }$ , $o p _ { 4 }$ and $o p _ { 5 }$ . Here $o p _ { 1 }$ is the LSB, and $o p _ { 5 }$ is the MSB. Let us refer to the immediate bit as $I$ . ",
        "page_idx": 378
    },
    {
        "type": "table",
        "img_path": "images/2eaffbaaba50039cad8df1400cc2857ecbc474744114f9a63a8d2eb46498cf47.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Serial No.</td><td>Signal</td><td>Condition</td></tr><tr><td>1</td><td>isSt</td><td>Instruction: st</td></tr><tr><td>2</td><td>isLd</td><td>Instruction: ld</td></tr><tr><td>3</td><td>isBeq</td><td>Instruction: beq</td></tr><tr><td>4</td><td>isBgt</td><td>Instruction: bgt</td></tr><tr><td>5</td><td>isRet</td><td>Instruction: ret</td></tr><tr><td>6</td><td>isImmediate</td><td>I bit set to 1</td></tr><tr><td>7</td><td>isWb</td><td>Instructions: add, sub, mul, div, mod,and, or,not, mov, ld, lsl, lsr,</td></tr><tr><td>8</td><td>isUBranch</td><td>asr, call</td></tr><tr><td>9</td><td>isCall</td><td>Instructions: b, call, ret Instructions: call</td></tr><tr><td></td><td colspan=\"2\">aluSignals</td></tr><tr><td>10</td><td>isAdd</td><td>Instructions: add, ld, st</td></tr><tr><td>11</td><td>isSub</td><td>Instruction: sub</td></tr><tr><td>12</td><td>isCmp</td><td>Instruction: cmp</td></tr><tr><td>13</td><td>isMul</td><td>Instruction: mul</td></tr><tr><td>14</td><td>isDiu</td><td>Instruction: div</td></tr><tr><td>15</td><td>isMod</td><td>Instruction: mod</td></tr><tr><td>16</td><td>isLsl</td><td>Instruction: lsl</td></tr><tr><td>17</td><td>isLsr</td><td>Instruction: lsr</td></tr><tr><td>18</td><td>isAsr</td><td>Instruction: asr</td></tr><tr><td>19</td><td>isOr</td><td>Instruction: or</td></tr><tr><td>20</td><td>isAnd</td><td>Instruction: and</td></tr><tr><td>21</td><td>isNot</td><td>Instruction: not</td></tr><tr><td></td><td></td><td></td></tr><tr><td>22</td><td>isMou</td><td>Instruction: mou</td></tr></table></body></html>\n\n",
        "page_idx": 379
    },
    {
        "type": "image",
        "img_path": "images/5f78695fb50e3fc18143fd1945049d2b5663b6f38a82c8f0ef242080c4bd53f4.jpg",
        "img_caption": [
            "Table 9.4: List of control signals ",
            "Figure 9.16: Abstraction of a hardwired control unit "
        ],
        "img_footnote": [],
        "page_idx": 379
    },
    {
        "type": "text",
        "text": "Table 9.5 shows the conditions for setting all the control signals. We leave the implementation of Table 9.5 using logic gates as an exercise to the reader. Note that it will take the maximum amount of time to compute the value of isW b. Nevertheless, this circuit is extremely simple as compared to a multiplier or a carry lookahead adder. Hence, the total execution time of the control unit is expected to be small as compared to the execute unit. ",
        "page_idx": 379
    },
    {
        "type": "table",
        "img_path": "images/8f0917d48b09e0a7e9d51894c6745683ccebff511beb803544463e7a9fbcbb5e.jpg",
        "table_caption": [
            "Table 9.5: Boolean conditions for setting all the control signals "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Serial No.</td><td>Signal</td><td>Condition</td><td></td></tr><tr><td>1</td><td>isSt</td><td>Op5.Op4.Op3.Op2.0p1</td><td></td></tr><tr><td>2</td><td>isLd</td><td>0p50p4.Op3.Op2.0p1</td><td></td></tr><tr><td>3</td><td>isBeq</td><td>0p5.0p4.0p3.0p2.0p1</td><td></td></tr><tr><td>4</td><td>isBgt</td><td>0p5.Op4.Op3.Op2.0p1</td><td></td></tr><tr><td>5</td><td>isRet</td><td>0p5.Op4.Op3.Op2.0p1</td><td></td></tr><tr><td>6</td><td>isImmediate</td><td>I</td><td></td></tr><tr><td>7</td><td>isWb</td><td>~ (op5 +Op5.0p3.0p1.(op4 + Op2)) +</td><td></td></tr><tr><td>8</td><td>isUbranch</td><td>0p5.Op4.Op3.Op2.0p1 0p5.Op4.(Op3.0p2+op3.Op2.0p1)</td><td></td></tr><tr><td>9</td><td>isCall</td><td>0p5.0p4.op3.op2.0p1</td><td></td></tr><tr><td></td><td colspan=\"2\">aluSignals</td><td></td></tr><tr><td>10</td><td>isAdd</td><td>0P5.0p4.Op3.Op2.Op1+Op5.Op4.Op3.0p2</td><td></td></tr><tr><td>11</td><td>isSub</td><td>0p5.0p4.Op3.Op2.Op1</td><td></td></tr><tr><td>12</td><td>isCmp</td><td>0p5.0p4.0p3.0p2.0p1</td><td></td></tr><tr><td>13</td><td>isMul</td><td>0p5.0p4.Op3.op2.0p1</td><td></td></tr><tr><td>14</td><td>isDiu</td><td>0p5.0p4.Op3.Op2.0p1</td><td></td></tr><tr><td>15</td><td>isMod</td><td>Op5.0p4.op3.Op2.op1</td><td></td></tr><tr><td>16</td><td>isLsl</td><td>0p5.0p4.Op3.op2.0p1</td><td></td></tr><tr><td>17</td><td>isLsr</td><td>0p5.0p4.Op3.op2.0p1</td><td></td></tr><tr><td>18</td><td>isAsr</td><td>OP5.Op4.Op3.Op2.Op1</td><td></td></tr><tr><td>19</td><td>isOr</td><td>0p5.Op4.Op3.Op2.0p1</td><td></td></tr><tr><td>20</td><td>isAnd</td><td>0p5.op4.op3.op2.op1</td><td></td></tr><tr><td>21</td><td>isNot</td><td>0p5.0p4.0p3.0p2.op1</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>22</td><td>isMou</td><td>Op5.0p4.Op3.Op2.0p1</td><td></td></tr></table></body></html>\n\n",
        "page_idx": 380
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 380
    },
    {
        "type": "text",
        "text": "The hardwired control unit is thus fast and efficient. This is the reason why most commercial processors today use a hardwired control unit. However, hardwired control units are not very flexible. For example, it is not possible to change the behavior of an instruction, or even introduce a new instruction, after the processor has been shipped. Sometimes we need to change the way an instruction is executed if there are bugs in functional units. For example, if the multiplier has a design defect, then it is theoretically possible to run the Booth\u2019s multiplication algorithm with the adder, and shift units. We will however, need a very elaborate control unit to dynamically reconfigure the way instructions are executed. ",
        "page_idx": 380
    },
    {
        "type": "text",
        "text": "There are other more practical reasons for favoring a flexible control unit. Some instruction sets such as x86 have rep instructions that repeat an instruction a given number of times. They also have complicated string instructions that operate on large pieces of data. Supporting such instructions requires a very complicated data path. In principle, we can execute such instructions by having elaborate control units that in turn have simple processors to process these instructions. These sub processors can generate control signals for implementing complicated ",
        "page_idx": 380
    },
    {
        "type": "text",
        "text": "CISC instructions. ",
        "page_idx": 381
    },
    {
        "type": "text",
        "text": "Way Point 6 ",
        "text_level": 1,
        "page_idx": 381
    },
    {
        "type": "text",
        "text": "1. We have successfully designed a hardwired processor that implements the entire SimpleRisc ISA. 2. Our processor is broadly divided into five stages: IF, OF, EX, MA, and RW. 3. The data path contains state elements (such as registers), arithmetic units, logical units, and multiplexers to choose the right set of inputs for each functional unit. 4. The multiplexers are controlled by control signals generated by the control unit. ",
        "page_idx": 381
    }
]