2.4.3 IEEE 754 Format for Representing Floating Point Numbers

Let us now try to represent a floating point number using a sequence of 32 bits. We shall describe the IEEE 754 format, which is the de facto standard for representing floating point numbers in binary.

Let us start with the normal form as shown in Equation 2.25. We observe that there are three variables in the equation:  (sign bit),  (mantissa), and  (exponent). Since all significands have 1 as their first digit, there is no need to explicitly represent it. We can assume that we have a 1 by default as the MSB of the significand, and we need to just represent the  bits of the mantissa. Secondly, since we are representing all our numbers in binary, the base is 2, and this can be assumed to be the default value. The IEEE 754 format thus proposes to apportion 32 bits as shown in Figure 2.8.

The format allocates 1 bit for the sign bit, 8 bits for the exponent, and 23 bits for the mantissa. The exponent can be positive, negative or zero. The point to note here is that the exponent is not represented in the 2’s complement notation. It is represented using the biased representation (see Section 2.3.3). The exponent(  ) is represented by a number,  , where:

In this case, the bias is equal to 127. Thus, if the exponent is equal 10, it is represented as 137. If the exponent is -20, it is represented as 107.  is an unsigned number between  and 255. 0 and 255 are reserved for special values. The valid range for  for normal floating point numbers is 1 to 254. Thus, the exponent can vary from -126 to 127. We can represent the normal form for IEEE 754 numbers as:

Example 16   
Find the smallest and largest positive normal floating point numbers. Answer:

• The largest positive normal floating point number is  .

The result is equal to  .

The smallest positive normal floating point number is  .

Example 17   
What is the range of normal floating point numbers. Answer:  .

Special Numbers

We reserve two values of  ,  and 255, to represent special numbers.

If (  ), then we can represent two kinds of values:  and NAN (Not a number). We need to further look at the mantissa(  . If (  ), then the number represents  depending on the sign bit. We can get  as a result of trying to divide any non-zero number by 0, or as the result of other mathematical operations. The point to note is that the IEEE 754 format treats infinities separately.

If we divide  or try to compute  for  , then the result is invalid. An invalid result is known as a  . Any mathematical operation involving a NAN has as its result a NAN. Even  . If  , then the represented number is a NAN. In this case the exact value of  is not relevant.

Now, let us take a look at the case, when  . If  is also  , then the number represented is 0. Note that there are two 0s in the IEEE 754 format – a positive zero and a negative zero. Ideally implementations of this format are supposed to treat both the zeros as the same. However, this can vary depending upon the processor vendor.

The last category of numbers is rather special. They are called denormal numbers. We shall discuss them separately in Section 2.4.4.