[
    {
        "type": "text",
        "text": "2.2.4 Sizes of Integers ",
        "text_level": 1,
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "Note that up till now we have only considered positive integers. We shall consider negative integers in Section 2.3. Such positive integers are known as unsigned integers in high level programming languages such as C or C++. Furthermore, high level languages define three types of unsigned integers \u2013 short (2 bytes), int (4 bytes), long long int (8 bytes). A short unsigned integer is represented using 16 bits. Hence, it can represent all the integers from 0 to $2 ^ { 1 6 } - 1$ (for a proof, see Example 12). Likewise, a regular 32-bit unsigned integer can represent numbers from 0 till $2 ^ { 3 2 } - 1$ . The ranges of each data type are given in Table 2.11. ",
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "Example 12 Calculate the range of unsigned 2-byte short integers. ",
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "Answer: A short integer is represented by 16 bits. The smallest short integer is represented by 16 zeros. It has a decimal value equal to 0. The largest short integer is represented by all 1s. Its value, V , is equal to $2 ^ { 1 5 } + . . . + 2 ^ { 0 } = 2 ^ { 1 6 } - 1$ . Hence, the range of unsigned short integers is 0 to $2 ^ { 1 6 } - 1$ . ",
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "Example 13 Calculate the range of an n-bit integer. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "Answer: 0 to $2 ^ { n } - 1$ . ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "Example 14 ",
        "text_level": 1,
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "We need to represent a set of decimal numbers from 0 till $m - 1$ . What is the minimum number of binary bits that we require? ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "Answer: Let us assume that we use n binary bits. The range of numbers that we can represent is 0 to $2 ^ { n } - 1$ . We note that $2 ^ { n } - 1$ needs to be at least as large as m. Thus, we have: ",
        "page_idx": 66
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { l } { 2 ^ { n } - 1 \\geq m - 1 } \\\\ { \\Rightarrow 2 ^ { n } \\geq m } \\\\ { \\Rightarrow { n } \\geq l o g _ { 2 } ( m ) } \\\\ { \\Rightarrow { n } \\geq \\lceil l o g _ { 2 } ( m ) \\rceil } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "Hence, the minimum number of bits that we require is $\\lceil l o g _ { 2 } ( m ) \\rceil$ . ",
        "page_idx": 66
    },
    {
        "type": "table",
        "img_path": "images/973c264cff37b743958a0452f55ec7377f573de05135ffbe93b7438b5b9ca1e9.jpg",
        "table_caption": [
            "Table 2.11: Ranges of unsigned integers in C/C++ "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Data Type</td><td>Size</td><td>Range</td></tr><tr><td>unsigned short int</td><td>2 bytes</td><td>0 to 216-1</td></tr><tr><td>unsigned int</td><td>4 bytes</td><td>0 to 232-1</td></tr><tr><td>unsigned long long int</td><td>8 bytes</td><td>O to 264-1</td></tr></table></body></html>\n\n",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "Important Point 5   \nFor the more mathematically inclined, we need to prove that for an n-bit integer, there is a one to one mapping between the set of n bit binary numbers, and the decimal numbers, 0 to $2 ^ { n } - 1$ . In other words, every n-bit binary number has a unique decimal representation. We leave this as an exercise for the reader. ",
        "page_idx": 66
    }
]