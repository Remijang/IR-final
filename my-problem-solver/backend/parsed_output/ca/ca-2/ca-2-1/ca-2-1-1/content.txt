2.1.1 Basic Operators

A simple Boolean variable can take two values – 0 or 1. It corresponds to two states of a system. For example, it can represent the fact that a light bulb is off(0) or on(1). It is easy to represent a Boolean variable in an electronic circuit. If the voltage on a wire is  , then we are representing a logical 0. If the voltage is equal to the supply voltage  , then we are representing a logical 1. We shall have an opportunity to read more about electronic circuits in Chapter 7.

Let us consider a simple Boolean variable,  . Let us assume that  represents the fact that a light bulb is on. If  , then the bulb is on, else it is off. Then the logical complement or negation of  , represented by  , represents the fact that the bulb is off. If  , then the bulb is off, otherwise, it is on. The logical complement is known as the NOT operator. Any Boolean operator can be represented by the means of a truth table, which lists the outputs of the operator for all possible combinations of inputs. The truth table for the NOT operator is shown in Table 2.1.

Let us now consider multiple Boolean variables. Let us consider the three bulbs in a typical traffic light – red, yellow, green. Let their states at a given time  be represented by the Boolean variables – R, Y, and G – respectively. At any point of time, we want one and only one of the lights to be on. Let us try to represent the first condition (one light on) symbolically using Boolean logic. We need to define the OR operator that represents the fact that either of the operands is equal to 1. For example,  OR  , is equal to 1, if  or  . Two symbols for the OR operator are used in literature – ’  ’ and ’ ’. In most cases ’+’ is preferred. The reader needs to be aware that ’+’ is not the same as the addition operator. The correct connotation for this operator needs to be inferred from the context. Whenever, there is a confusion, we will revert to the ∨ operator in this book. By default, we will use the ’+’ operator to represent Boolean OR. Thus, condition 1 is:  . The truth table for the OR operator is shown in Table 2.2.

Now, let us try to formalize condition 2. This states that only one light needs to be on. We can alternatively say that it is not possible to find a pair of bulbs that are on together. We need to define a new operator called the AND operator (represented by ’.’ or  ).  AND  is equal to 1, when both  and  are 1. The truth table for the AND operator is shown in Table 2.3. Now,  represents the fact that both the red and yellow bulbs are on. This is not possible. Considering all such pairs, we have condition 2 as:  . This formula represents the fact that no two pairs of bulbs are on simultaneously.

We thus observe that it is possible to represent complex logical statements using a combination of Boolean variables and operators. We can say that NOT, AND, and OR, are basic operators. Let us derive a set of operators from them.