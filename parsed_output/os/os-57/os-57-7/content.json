[
    {
        "type": "text",
        "text": "57.7 Some Higher Level Tools ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "In some cases, we can achieve desirable security effects by working at a higher level. HTTPS (the cryptographically protected version of the HTTP protocol) and SSH (a competitor to SSL most often used to set up secure sessions with remote computers) are two good examples. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "HTTPS ",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "HTTP, the protocol that supports the World Wide Web, does not have its own security features. Nowadays, though, much sensitive and valuable information is moved over the web, so sending it all unprotected over the network is clearly a bad idea. Rather than come up with a fresh implementation of security for HTTP, however, HTTPS takes the existing HTTP definition and connects it to SSL/TLS. SSL takes care of establishing a secure connection, including authenticating the web server using the certificate approach discussed earlier and establishing a new symmetric encryption key known only to the client and server. Once the SSL connection is established, all subsequent interactions between the client and server use the secured connection. To a large extent, HTTPS is simply HTTP passed through an SSL connection. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "That does not devalue the importance of HTTPS, however. In fact, it is a useful object lesson. Rather than spend years in development and face the possibility of the same kinds of security flaws that other developers of security protocols inevitably find, HTTPS makes direct use of a high quality transport security tool, thus replacing an insecure transport with a highly secure transport at very little development cost. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "HTTPS obviously depends heavily on authentication, since we want to be sure we aren’t communicating with malicious web sites. HTTPS uses certificates for that purpose. Since HTTPS is intended primarily for use in web browsers, the certificates in question are gathered and managed by the browser. Modern browsers come configured with the public keys of many certificate signing authorities (CAs, as we mentioned earlier). Certificates for web sites are checked against these signing authorities to determine if the certificate is real or bogus. Remember, however, what a certificate actually tells you, assuming it checks out: that at some moment in time the signing authority thoughts it was a good idea to vouch that a particular public key belongs to a particular party. There is no implication that the party is good or evil, that the matching private key is still secret, or even that the certificate signing authority itself is secure and uncompromised, either when it created the certificate or at the moment you check it. There have been real world problems with web certificates for all these reasons. Remember also that HTTPS only vouches for authenticity. An authenticated web site using HTTPS can still launch an attack on your client. An authenticated attack, true, but that won’t be much consolation if it succeeds. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Not all web browsers always supported HTTPS, typically because they didn’t have SSL installed or configured. In those cases, a web site using HTTPS only would not be able to interact with the client, since the client couldn’t set up its end of the SSL socket. The standard solution for web servers was to fall back on HTTP when a client claimed it was unable to use HTTPS. When the server did so, no security would be applied, just as if the server wasn’t running HTTPS at all. As ability to support HTTPS in browsers and client machines has become more common, there has been ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "a push towards servers insisting on HTTPS, and refusing to talk to clients who can’t or won’t speak HTTPS. This approach is called HSTS (HTTP Strict Transport Security). HSTS is an option for a web site. If the web site decides it will support HSTS, all interactions with it will be cryptographically secured for any client. Clients who can’t or won’t accept HTTPS will not be allowed to interact with such a web site. HSTS is used by a number of major web sites, including Google’s google.com domain, but is far from ubiquitous as of 2020. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "While HTTPS is primarily intended to help secure web browsing, it is sometimes used to secure other kinds of communications. Some developers have leveraged HTTP for purposes rather different than standard web browsing, and, for them, using HTTPS to secure their communications is both natural and cheap. However, you can only use HTTPS to secure your system if you commit to using HTTP as your application protocol, and HTTP was intended primarily to support a human-based activity. HTTP messages, for example, are typically encoded in ASCII and include substantial headers designed to support web browsing needs. You may be able to achieve far greater efficiency of your application by using SSL, rather than HTTPS. Or you can use SSH. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "SSH ",
        "text_level": 1,
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "SSH stands for Secure Shell which accurately describes the original purpose of the program. SSH is available on Linux and other Unix systems, and to some extent on Windows systems. SSH was envisioned as a secure remote shell, but it has been developed into a more general tool for allowing secure interactions between computers. Most commonly this shell is used for command line interfaces, but SSH can support many other forms of secure remote interactions. For example, it can be used to protect remote X Windows sessions. Generally, TCP ports can be forwarded through SSH, providing a powerful method to protect interactions between remote systems. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "SSH addresses many of the same problems seen by ${ \\mathrm { s s L } } ,$ often in similar ways. Remote users must be authenticated, shared encryption keys must be established, integrity must be checked, and so on. SSH typically relies on public key cryptography and certificates to authenticate remote servers. Clients frequently do not have their own certificates and private keys, in which case providing a user ID and password is permitted. SSH supports other options for authentication not based on certificates or passwords, such as the use of authentication servers (such as Kerberos). Various ciphers (both for authentication and for symmetric encryption) are supported, and some form of negotiation is required between the client and the server to choose a suitable set. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "A typical use of SSH provides a good example of a common general kind of network security vulnerability called a man-in-the-middle attack. This kind of attack occurs when two parties think they are communicating directly, but actually are communicating through a malicious third party without knowing it. That third party sees all of the messages passed between them, and can alter such messages or inject new messages without their knowledge7. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Well-designed network security tools are immune to man-in-the-middl attacks of many types, but even a good tool like SSH can sometimes be subject to them. If you use SSH much, you might have encountered an example yourself. When you first use SSH to log into a remote machine you’ve never logged into before, you probably don’t have the public key associated with that remote machine. How do you get it? Often, not through a certificate or any other secure means, but simply by asking the remote site to send it to you. Then you have its public key and away you go, securely authenticating that machine and setting up encrypted communications. But what if there’s a man in the middle when you first attempt to log into the remote machine? In that case, when the remote machine sends you its public key, the man in the middle can discard the message containing the correct public key and substitute one containing his own public key. Now you think you have the public key for the remote server, but you actually have the public key of the man in the middle. That means the man in the middle can pose as the remote server and you’ll never be the wiser. The folks who designed SSH were well aware of this problem, and if you ever do use SSH this way, up will pop a message warning you of the danger and asking if you want to go ahead despite the risk. Folk wisdom suggests that everyone always says “yes, go ahead” when they get this message, including network security professionals. For that matter, folk wisdom suggests that all messages warning a user of the possibility of insecure actions are always ignored, which should suggest to you just how much security benefit will arise from adding such confirmation messages to your system. ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "SSH is not built on SSL, but is a separate implementation. As a result, the two approaches each have their own bugs, features, and uses. A security flaw found in SSH will not necessarily have any impact on ${ \\mathrm { s s L } } ,$ , and vice versa. ",
        "page_idx": 15
    }
]