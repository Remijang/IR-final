[
    {
        "type": "text",
        "text": "50.7 Scale And Performance Of AFSv2 ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "With the new protocol in place, AFSv2 was measured and found to be much more scalable than the original version. Indeed, each server could support about 50 clients (instead of just 20). A further benefit was that client-side performance often came quite close to local performance, because in the common case, all file accesses were local; file reads usually went to the local disk cache (and potentially, local memory). Only when a client created a new file or wrote to an existing one was there need to send a Store message to the server and thus update the file with new contents. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Let us also gain some perspective on AFS performance by comparing common file-system access scenarios with NFS. Figure 50.4 (page 9) shows the results of our qualitative comparison. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "In the figure, we examine typical read and write patterns analytically, for files of different sizes. Small files have $N _ { s }$ blocks in them; medium files have $N _ { m }$ blocks; large files have $\\boldsymbol { N } _ { L }$ blocks. We assume that small and medium files fit into the memory of a client; large files fit on a local disk but not in client memory. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "We also assume, for the sake of analysis, that an access across the network to the remote server for a file block takes $L _ { n e t }$ time units. Access to local memory takes $L _ { m e m }$ , and access to local disk takes $\\_ L _ { d i s k }$ . The general assumption is that $L _ { n e t } > L _ { d i s k } > L _ { m e m }$ . ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Finally, we assume that the first access to a file does not hit in any caches. Subsequent file accesses (i.e., “re-reads”) we assume will hit in caches, if the relevant cache has enough capacity to hold the file. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "The columns of the figure show the time a particular operation (e.g., a small file sequential read) roughly takes on either NFS or AFS. The rightmost column displays the ratio of AFS to NFS. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "We make the following observations. First, in many cases, the performance of each system is roughly equivalent. For example, when first reading a file (e.g., Workloads 1, 3, 5), the time to fetch the file from the remote server dominates, and is similar on both systems. You might think AFS would be slower in this case, as it has to write the file to local disk; however, those writes are buffered by the local (client-side) file system cache and thus said costs are likely hidden. Similarly, you might think that AFS reads from the local cached copy would be slower, again because AFS stores the cached copy on disk. However, AFS again benefits here from local file system caching; reads on AFS would likely hit in the client-side memory cache, and performance would be similar to NFS. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Second, an interesting difference arises during a large-file sequential re-read (Workload 6). Because AFS has a large local disk cache, it will access the file from there when the file is accessed again. NFS, in contrast, only can cache blocks in client memory; as a result, if a large file (i.e., a file bigger than local memory) is re-read, the NFS client will have to re-fetch the entire file from the remote server. Thus, AFS is faster than NFS in this case by a factor of $\\frac { L _ { n e t } } { L _ { d i s k } }$ , assuming that remote access is indeed slower than local disk. We also note that NFS in this case increases server load, which has an impact on scale as well. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Third, we note that sequential writes (of new files) should perform similarly on both systems (Workloads 8, 9). AFS, in this case, will write the file to the local cached copy; when the file is closed, the AFS client will force the writes to the server, as per the protocol. NFS will buffer writes in client memory, perhaps forcing some blocks to the server due to client-side memory pressure, but definitely writing them to the server when the file is closed, to preserve NFS flush-on-close consistency. You might think AFS would be slower here, because it writes all data to local disk. However, realize that it is writing to a local file system; those writes are first committed to the page cache, and only later (in the background) to disk, and thus AFS reaps the benefits of the client-side OS memory caching infrastructure to improve performance. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Fourth, we note that AFS performs worse on a sequential file overwrite (Workload 10). Thus far, we have assumed that the workloads that write are also creating a new file; in this case, the file exists, and is then over-written. Overwrite can be a particularly bad case for AFS, because the client first fetches the old file in its entirety, only to subsequently overwrite it. NFS, in contrast, will simply overwrite blocks and thus avoid the initial (useless) read2. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Finally, workloads that access a small subset of data within large files perform much better on NFS than AFS (Workloads 7, 11). In these cases, the AFS protocol fetches the entire file when the file is opened; unfortunately, only a small read or write is performed. Even worse, if the file is modified, the entire file is written back to the server, doubling the per",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "ASIDE: THE IMPORTANCE OF WORKLOAD ",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "One challenge of evaluating any system is the choice of workload. Because computer systems are used in so many different ways, there are a large variety of workloads to choose from. How should the storage system designer decide which workloads are important, in order to make reasonable design decisions? ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "The designers of AFS, given their experience in measuring how file systems were used, made certain workload assumptions; in particular, they assumed that most files were not frequently shared, and accessed sequentially in their entirety. Given those assumptions, the AFS design makes perfect sense. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "However, these assumptions are not always correct. For example, imagine an application that appends information, periodically, to a log. These little log writes, which add small amounts of data to an existing large file, are quite problematic for AFS. Many other difficult workloads exist as well, e.g., random updates in a transaction database. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "One place to get some information about what types of workloads are common are through various research studies that have been performed. See any of these studies for good examples of workload analysis $[ { \\mathrm { B } } { + } 9 1 _ { \\cdot }$ , $_ \\mathrm { H + 1 1 }$ , $\\mathbf { \\bar { R } } { + } 0 0$ , V99], including the AFS retrospective $\\left[ \\mathrm { H } \\substack { + 8 8 } \\right]$ . ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "formance impact. NFS, as a block-based protocol, performs I/O that is proportional to the size of the read or write. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Overall, we see that NFS and AFS make different assumptions and not surprisingly realize different performance outcomes as a result. Whether these differences matter is, as always, a question of workload. ",
        "page_idx": 10
    }
]