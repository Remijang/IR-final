50.5 Cache Consistency
When we discussed NFS, there were two aspects of cache consistency we considered: update visibility and cache staleness. With update visibility, the question is: when will the server be updated with a new version of a file? With cache staleness, the question is: once the server has a new version, how long before clients see the new version instead of an older cached copy?  
Because of callbacks and whole-file caching, the cache consistency provided by AFS is easy to describe and understand. There are two important cases to consider: consistency between processes on different machines, and consistency between processes on the same machine.  
Between different machines, AFS makes updates visible at the server and invalidates cached copies at the exact same time, which is when the updated file is closed. A client opens a file, and then writes to it (perhaps repeatedly). When it is finally closed, the new file is flushed to the server (and thus visible). At this point, the server then “breaks” callbacks for any clients with cached copies; the break is accomplished by contacting each client and informing it that the callback it has on the file is no longer  
OPERATINGSYSTEMS[VERSION 1.10]  
Client1 P1 P2 Cache open(F)Client2 P3 CacheServer DiskCommentswrite(A) close( open(F) close() open(F) write(B) open(F) close()A A A read() -> A A A A B B read() -> B B B B B- - 1 open(F) A- A A A A A A A A AFile created Local processes see writes immediatelyclose()B B B B B Bread0 - A A close() A A open(F) B read() > B B close() B open(F)A A A B B B BRemote processes do not see writes... .. until close() has taken placeopen(F) write(D)B DB B BB B Bclose()D D Dwrite(C) C close() CB c DD D Dopen(F) D read() -> D D close() DD D DUnfortunately for P3 the last writer wins
valid. This step ensures that clients will no longer read stale copies of the file; subsequent opens on those clients will require a re-fetch of the new version of the file from the server (and will also serve to reestablish a callback on the new version of the file).  
AFS makes an exception to this simple model between processes on the same machine. In this case, writes to a file are immediately visible to other local processes (i.e., a process does not have to wait until a file is closed to see its latest updates). This makes using a single machine behave exactly as you would expect, as this behavior is based upon typical UNIX semantics. Only when switching to a different machine would you be able to detect the more general AFS consistency mechanism.  
There is one interesting cross-machine case that is worthy of further discussion. Specifically, in the rare case that processes on different machines are modifying a file at the same time, AFS naturally employs what is known as a last writer wins approach (which perhaps should be called last closer wins). Specifically, whichever client calls close() last will update the entire file on the server last and thus will be the “winning”  
file, i.e., the file that remains on the server for others to see. The result is a file that was generated in its entirety either by one client or the other. Note the difference from a block-based protocol like NFS: in NFS, writes of individual blocks may be flushed out to the server as each client is updating the file, and thus the final file on the server could end up as a mix of updates from both clients. In many cases, such a mixed file output would not make much sense, i.e., imagine a JPEG image getting modified by two clients in pieces; the resulting mix of writes would not likely constitute a valid JPEG.  
A timeline showing a few of these different scenarios can be seen in Figure 50.3. The columns show the behavior of two processes $\mathrm { \cdot } \mathrm { \mathrm { } P } _ { 1 }$ and $\mathrm { P _ { 2 } }$ ) on Client1 and its cache state, one process $\left( \mathrm { P _ { 3 } } \right)$ on Client2 and its cache state, and the server (Server), all operating on a single file called, imaginatively, F. For the server, the figure simply shows the contents of the file after the operation on the left has completed. Read through it and see if you can understand why each read returns the results that it does. A commentary field on the right will help you if you get stuck.  