[
    {
        "type": "text",
        "text": "6.2 Problem #1: Restricted Operations ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Direct execution has the obvious advantage of being fast; the program runs natively on the hardware CPU and thus executes as quickly as one would expect. But running on the CPU introduces a problem: what if the process wishes to perform some kind of restricted operation, such as issuing an I/O request to a disk, or gaining access to more system resources such as CPU or memory? ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "THE CRUX: HOW TO PERFORM RESTRICTED OPERATIONS A process must be able to perform I/O and some other restricted operations, but without giving the process complete control over the system. How can the OS and hardware work together to do so? ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "ASIDE: WHY SYSTEM CALLS LOOK LIKE PROCEDURE CALLS ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "You may wonder why a call to a system call, such as open() or read(), looks exactly like a typical procedure call in C; that is, if it looks just like a procedure call, how does the system know it’s a system call, and do all the right stuff? The simple reason: it is a procedure call, but hidden inside that procedure call is the famous trap instruction. More specifically, when you call open() (for example), you are executing a procedure call into the C library. Therein, whether for open() or any of the other system calls provided, the library uses an agreed-upon calling convention with the kernel to put the arguments to open() in well-known locations (e.g., on the stack, or in specific registers), puts the system-call number into a well-known location as well (again, onto the stack or a register), and then executes the aforementioned trap instruction. The code in the library after the trap unpacks return values and returns control to the program that issued the system call. Thus, the parts of the C library that make system calls are hand-coded in assembly, as they need to carefully follow convention in order to process arguments and return values correctly, as well as execute the hardware-specific trap instruction. And now you know why you personally don’t have to write assembly code to trap into an OS; somebody has already written that assembly for you. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "One approach would simply be to let any process do whatever it wants in terms of I/O and other related operations. However, doing so would prevent the construction of many kinds of systems that are desirable. For example, if we wish to build a file system that checks permissions before granting access to a file, we can’t simply let any user process issue I/Os to the disk; if we did, a process could simply read or write the entire disk and thus all protections would be lost. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Thus, the approach we take is to introduce a new processor mode, known as user mode; code that runs in user mode is restricted in what it can do. For example, when running in user mode, a process can’t issue I/O requests; doing so would result in the processor raising an exception; the OS would then likely kill the process. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "In contrast to user mode is kernel mode, which the operating system (or kernel) runs in. In this mode, code that runs can do what it likes, including privileged operations such as issuing I/O requests and executing all types of restricted instructions. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "We are still left with a challenge, however: what should a user process do when it wishes to perform some kind of privileged operation, such as reading from disk? To enable this, virtually all modern hardware provides the ability for user programs to perform a system call. Pioneered on ancient machines such as the Atlas $\\mathrm { [ \\bar { K } + 6 1 , L 7 8 ] }$ , system calls allow the kernel to carefully expose certain key pieces of functionality to user programs, such as accessing the file system, creating and destroying processes, communicating with other processes, and allocating more ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "TIP: USE PROTECTED CONTROL TRANSFER ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "The hardware assists the OS by providing different modes of execution. In user mode, applications do not have full access to hardware resources. In kernel mode, the OS has access to the full resources of the machine. Special instructions to trap into the kernel and return-from-trap back to user-mode programs are also provided, as well as instructions that allow the OS to tell the hardware where the trap table resides in memory. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "memory. Most operating systems provide a few hundred calls (see the POSIX standard for details [P10]); early Unix systems exposed a more concise subset of around twenty calls. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "To execute a system call, a program must execute a special trap instruction. This instruction simultaneously jumps into the kernel and raises the privilege level to kernel mode; once in the kernel, the system can now perform whatever privileged operations are needed (if allowed), and thus do the required work for the calling process. When finished, the OS calls a special return-from-trap instruction, which, as you might expect, returns into the calling user program while simultaneously reducing the privilege level back to user mode. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "The hardware needs to be a bit careful when executing a trap, in that it must make sure to save enough of the caller’s registers in order to be able to return correctly when the OS issues the return-from-trap instruction. On x86, for example, the processor will push the program counter, flags, and a few other registers onto a per-process kernel stack; the return-fromtrap will pop these values off the stack and resume execution of the usermode program (see the Intel systems manuals [I11] for details). Other hardware systems use different conventions, but the basic concepts are similar across platforms. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "There is one important detail left out of this discussion: how does the trap know which code to run inside the OS? Clearly, the calling process can’t specify an address to jump to (as you would when making a procedure call); doing so would allow programs to jump anywhere into the kernel which clearly is a Very Bad Idea1. Thus the kernel must carefully control what code executes upon a trap. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "The kernel does so by setting up a trap table at boot time. When the machine boots up, it does so in privileged (kernel) mode, and thus is free to configure machine hardware as need be. One of the first things the OS thus does is to tell the hardware what code to run when certain exceptional events occur. For example, what code should run when a harddisk interrupt takes place, when a keyboard interrupt occurs, or when a program makes a system call? The OS informs the hardware of the ",
        "page_idx": 3
    },
    {
        "type": "table",
        "img_path": "images/417415182846b7a44c6131afafe5650da9e9378cf0403da7ceeb92aed937a367.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>OS @ boot (kernel mode)</td><td colspan=\"2\">Hardware</td></tr><tr><td>initialize trap table</td><td colspan=\"2\">remember address of... syscall handler.</td></tr><tr><td>OS @ run (kernel mode)</td><td>Hardware</td><td>Program (user mode)</td></tr><tr><td>Create entry for process list Allocate memory for program Load program into memory Setup user stack with argv Fill kernel stack with reg/PC return-from-trap</td><td>restore regs (from kernel stack) move to user mode</td><td></td></tr><tr><td rowspan=\"2\">Handle trap Do work of syscall return-from-trap</td><td>jump to main save regs</td><td>Run main() Call system call trap into OS</td></tr><tr><td>(to kernel stack) move to kernel mode jump to trap handler</td><td></td></tr><tr><td>Free memory of process Remove from process list</td><td>restore regs (from kernel stack) move to user mode jump to PC after trap</td><td>return from main trap (via exit ())</td></tr></table></body></html>\n\n",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Figure 6.2: Limited Direct Execution Protocol ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "locations of these trap handlers, usually with some kind of special instruction. Once the hardware is informed, it remembers the location of these handlers until the machine is next rebooted, and thus the hardware knows what to do (i.e., what code to jump to) when system calls and other exceptional events take place. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "TIP: BE WARY OF USER INPUTS IN SECURE SYSTEMS Even though we have taken great pains to protect the OS during system calls (by adding a hardware trapping mechanism, and ensuring all calls to the OS are routed through it), there are still many other aspects to implementing a secure operating system that we must consider. One of these is the handling of arguments at the system call boundary; the OS must check what the user passes in and ensure that arguments are properly specified, or otherwise reject the call. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "For example, with a write() system call, the user specifies an address of a buffer as a source of the write call. If the user (either accidentally or maliciously) passes in a “bad” address (e.g., one inside the kernel’s portion of the address space), the OS must detect this and reject the call. Otherwise, it would be possible for a user to read all of kernel memory; given that kernel (virtual) memory also usually includes all of the physical memory of the system, this small slip would enable a program to read the memory of any other process in the system. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "In general, a secure system must treat user inputs with great suspicion. Not doing so will undoubtedly lead to easily hacked software, a despairing sense that the world is an unsafe and scary place, and the loss of job security for the all-too-trusting OS developer. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "To specify the exact system call, a system-call number is usually assigned to each system call. The user code is thus responsible for placing the desired system-call number in a register or at a specified location on the stack; the OS, when handling the system call inside the trap handler, examines this number, ensures it is valid, and, if it is, executes the corresponding code. This level of indirection serves as a form of protection; user code cannot specify an exact address to jump to, but rather must request a particular service via number. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "One last aside: being able to execute the instruction to tell the hardware where the trap tables are is a very powerful capability. Thus, as you might have guessed, it is also a privileged operation. If you try to execute this instruction in user mode, the hardware won’t let you, and you can probably guess what will happen (hint: adios, offending program). Point to ponder: what horrible things could you do to a system if you could install your own trap table? Could you take over the machine? ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "The timeline (with time increasing downward, in Figure 6.2) summarizes the protocol. We assume each process has a kernel stack where registers (including general purpose registers and the program counter) are saved to and restored from (by the hardware) when transitioning into and out of the kernel. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "There are two phases in the limited direct execution (LDE) protocol. In the first (at boot time), the kernel initializes the trap table, and the CPU remembers its location for subsequent use. The kernel does so via a ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "privileged instruction (all privileged instructions are highlighted in bold). ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "In the second (when running a process), the kernel sets up a few things (e.g., allocating a node on the process list, allocating memory) before using a return-from-trap instruction to start the execution of the process; this switches the CPU to user mode and begins running the process. When the process wishes to issue a system call, it traps back into the OS, which handles it and once again returns control via a return-from-trap to the process. The process then completes its work, and returns from main(); this usually will return into some stub code which will properly exit the program (say, by calling the exit() system call, which traps into the OS). At this point, the OS cleans up and we are done. ",
        "page_idx": 6
    }
]