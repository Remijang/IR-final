15.4 Hardware Support: A Summary
Let us now summarize the support we need from the hardware (also see Figure 15.3, page 9). First, as discussed in the chapter on CPU virtualization, we require two different CPU modes. The OS runs in privileged mode (or kernel mode), where it has access to the entire machine; applications run in user mode, where they are limited in what they can do. A single bit, perhaps stored in some kind of processor status word, indicates which mode the CPU is currently running in; upon certain special occasions (e.g., a system call or some other kind of exception or interrupt), the CPU switches modes.  
The hardware must also provide the base and bounds registers themselves; each CPU thus has an additional pair of registers, part of the memory management unit (MMU) of the CPU. When a user program is running, the hardware will translate each address, by adding the base value to the virtual address generated by the user program. The hardware must also be able to check whether the address is valid, which is accomplished by using the bounds register and some circuitry within the CPU.  
The hardware should provide special instructions to modify the base and bounds registers, allowing the OS to change them when different processes run. These instructions are privileged; only in kernel (or privileged) mode can the registers be modified. Imagine the havoc a user process could wreak1 if it could arbitrarily change the base register while running. Imagine it! And then quickly flush such dark thoughts from your mind, as they are the ghastly stuff of which nightmares are made.  
Figure 15.3: Dynamic Relocation: Hardware Requirements   
Hardware RequirementsNotesPrivileged modeNeeded to prevent user-mode processes from executing privileged operations.Base/bounds registersNeed pair of registers per CPU to support address translation and bounds checksAbility to translate virtual addresses and check if within boundsCircuitry to do translations and check limits; in this case, quite simplePrivileged instruction(s) to update base/boundsOS must be able to set these values. before letting a user program runPrivileged instruction(s) to register. exception handlersOS must be able to tell hardware what code to run if exception occursAbility to raise exceptionsWhen processes try to access privileged. instructions or out-of-bounds memory.
Finally, the CPU must be able to generate exceptions in situations where a user program tries to access memory illegally (with an address that is “out of bounds”); in this case, the CPU should stop executing the user program and arrange for the OS “out-of-bounds” exception handler to run. The OS handler can then figure out how to react, in this case likely terminating the process. Similarly, if a user program tries to change the values of the (privileged) base and bounds registers, the CPU should raise an exception and run the “tried to execute a privileged operation while in user mode” handler. The CPU also must provide a method to inform it of the location of these handlers; a few more privileged instructions are thus needed.  