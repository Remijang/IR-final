[
    {
        "type": "text",
        "text": "39.8 Renaming Files ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Once we have a file, it is sometimes useful to be able to give a file a different name. When typing at the command line, this is accomplished with mv command; in this example, the file $\\scriptstyle { \\mathrm { ~ f o o ~ } }$ is renamed bar: ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "ASIDE: M M A P() AND PERSISTENT MEMORY (Guest Aside by Terence Kelly) ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Memory mapping is an alternative way to access persistent data in files. The mmap() system call creates a correspondence between byte offsets in a file and virtual addresses in the calling process; the former is called the backing file and the latter its in-memory image. The process can then access the backing file using CPU instructions (i.e., loads and stores) to the in-memory image. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "By combining the persistence of files with the access semantics of memory, file-backed memory mappings support a software abstraction called persistent memory. The persistent memory style of programming can streamline applications by eliminating translation between different data formats for memory and storage [K19]. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "$\\mathrm { ~ p ~ } =$ mmap(NULL, file_size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);   \nassert(p ! $\\ ! = \\ !$ MAP_FAILED);   \nfor (int $\\mathrm { ~ i ~ } = \\mathrm { ~ 1 ~ }$ ; i $\\prec$ argc; $\\dot { 1 } + +$ ) if (strcmp(argv[i], \"pop\") $\\scriptstyle \\mathbf { \\mu } = \\mathbf { \\mu } 0$ ) // pop if $( \\mathtt { p } \\mathtt { - } > \\mathtt { n } > \\mathtt { 0 }$ ) // stack not empty printf(\"%d\\n\", $_ { \\mathtt { p } \\mathrm { - } \\mathrm { > } }$ stack $[ \\mathrm { -- } \\mathrm { p } \\mathrm { - } \\mathrm { > } \\mathrm { n } ]$ ); } else { // push if (sizeof(pstack_t) $^ +$ $( 1 + \\infty , 0 ]  \\ln ;$ ) $\\star$ sizeof(int) $< =$ file_size) // stack not full $_ { \\mathrm { p \\mathrm { - } } \\mathrm { > } }$ stack $\\begin{array} { r l } { [ \\mathtt { p } \\mathrm { - } > \\mathtt { n } + + ] } & { { } = } \\end{array}$ atoi(argv[i]); } ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "The program pstack.c (included on the OSTEP code github repo, with a snippet shown above) stores a persistent stack in file ps.img, which begins life as a bag of zeros, e.g., created on the command line via the truncate or dd utility. The file contains a count of the size of the stack and an array of integers holding stack contents. After mmap()-ing the backing file we can access the stack using C pointers to the in-memory image, e.g., $\\mathtt { p \\mathrm { - } > \\mathrm { n } }$ accesses the number of items on the stack, and $\\mathrm { p - } >$ stack the array of integers. Because the stack is persistent, data push’d by one invocation of pstack can be pop’d by the next. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "A crash, e.g., between the increment and the assignment of the push, could leave our persistent stack in an inconsistent state. Applications prevent such damage by using mechanisms that update persistent memory atomically with respect to failure [K20]. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "prompt> mv foo bar ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Using strace, we can see that mv uses the system call rename(char $\\star \\mathsf { o l d }$ , char $\\star \\boldsymbol { \\mathrm { n e w } }$ ), which takes precisely two arguments: the original name of the file (old) and the new name (new). ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "One interesting guarantee provided by the rename() call is that it is (usually) implemented as an atomic call with respect to system crashes; if the system crashes during the renaming, the file will either be named the old name or the new name, and no odd in-between state can arise. Thus, rename() is critical for supporting certain kinds of applications that require an atomic update to file state. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Let’s be a little more specific here. Imagine that you are using a file editor (e.g., emacs), and you insert a line into the middle of a file. The file’s name, for the example, is foo.txt. The way the editor might update the file to guarantee that the new file has the original contents plus the line inserted is as follows (ignoring error-checking for simplicity): ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "int fd $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ open(\"foo.txt.tmp\", O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR);   \nwrite(fd, buffer, size); // write out new version of file fsync(fd);   \nclose(fd);   \nrename(\"foo.txt.tmp\", \"foo.txt\"); ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "What the editor does in this example is simple: write out the new version of the file under a temporary name (foo.txt.tmp), force it to disk with fsync(), and then, when the application is certain the new file metadata and contents are on the disk, rename the temporary file to the original file’s name. This last step atomically swaps the new file into place, while concurrently deleting the old version of the file, and thus an atomic file update is achieved. ",
        "page_idx": 13
    }
]