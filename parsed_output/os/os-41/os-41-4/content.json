[
    {
        "type": "text",
        "text": "41.4 Policies: How To Allocate Files and Directories ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "With this group structure in place, FFS now has to decide how to place files and directories and associated metadata on disk to improve performance. The basic mantra is simple: keep related stuff together (and its corollary, keep unrelated stuff far apart). ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Thus, to obey the mantra, FFS has to decide what is “related” and place it within the same block group; conversely, unrelated items should be placed into different block groups. To achieve this end, FFS makes use of a few simple placement heuristics. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "The first is the placement of directories. FFS employs a simple approach: find the cylinder group with a low number of allocated directories (to balance directories across groups) and a high number of free inodes (to subsequently be able to allocate a bunch of files), and put the directory data and inode in that group. Of course, other heuristics could be used here (e.g., taking into account the number of free data blocks). ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "For files, FFS does two things. First, it makes sure (in the general case) to allocate the data blocks of a file in the same group as its inode, thus preventing long seeks between inode and data (as in the old file system). Second, it places all files that are in the same directory in the cylinder group of the directory they are in. Thus, if a user creates four files, $/ { \\tt a } / { \\tt b } ,$ $\\bar { / } \\mathrm { a } / \\bar { \\mathrm { c } } , / \\mathrm { a } / \\mathrm { d } ,$ and ${ \\mathrm { b } } / { \\mathrm { f } }$ , FFS would try to place the first three near one another (same group) and the fourth far away (in some other group). ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Let’s look at an example of such an allocation. In the example, assume that there are only 10 inodes and 10 data blocks in each group (both unrealistically small numbers), and that the three directories (the root directory $/ , / \\bar { \\mathsf { a } } ,$ and $1 6$ ) and four files (/a/c, /a/d, /a/e, /b/f) are placed within them per the FFS policies. Assume the regular files are each two blocks in size, and that the directories have just a single block of data. For this figure, we use the obvious symbols for each file or directory (i.e., / for the root directory, a for /a, f for $/ \\mathrm { b } / \\mathrm { f } ,$ , and so forth). ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "group inodes data 0 /- 1 acde- accddee2 bf- bff3 4 5 6 7 ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Note that the FFS policy does two positive things: the data blocks of each file are near each file’s inode, and files in the same directory are near one another (namely, $/ { \\sf a } / { \\sf c } , / { \\sf a } / { \\sf d } ,$ and $/ a / e$ are all in Group 1, and directory $/ \\mathrm { b }$ and its file /b/f are near one another in Group 2). ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "In contrast, let’s now look at an inode allocation policy that simply spreads inodes across groups, trying to ensure that no group’s inode table fills up quickly. The final allocation might thus look something like this: ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "group inodes data 0 /- 1 a- a2 b- b3 c- cc4 d- dd5 e- ee6 f- ff7 ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "As you can see from the figure, while this policy does indeed keep file (and directory) data near its respective inode, files within a directory are arbitrarily spread around the disk, and thus name-based locality is not preserved. Access to files $/ { \\sf a } / { \\sf c } , / { \\sf a } / { \\sf d } ,$ and $/ \\mathsf { a } / \\mathsf { e }$ now spans three groups instead of one as per the FFS approach. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "The FFS policy heuristics are not based on extensive studies of filesystem traffic or anything particularly nuanced; rather, they are based on good old-fashioned common sense (isn’t that what CS stands for after all?)1. Files in a directory are often accessed together: imagine compiling a bunch of files and then linking them into a single executable. Because such namespace-based locality exists, FFS will often improve performance, making sure that seeks between related files are nice and short. ",
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/5f4a8e9878aed7996ddc431aa96a6e3961b00ff177a9f9c5660c7fbca694f598.jpg",
        "img_caption": [
            "Figure 41.1: FFS Locality For SEER Traces "
        ],
        "img_footnote": [],
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 6
    }
]