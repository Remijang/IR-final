48.1 Communication Basics
The central tenet of modern networking is that communication is fundamentally unreliable. Whether in the wide-area Internet, or a local-area high-speed network such as Infiniband, packets are regularly lost, corrupted, or otherwise do not reach their destination.  
There are a multitude of causes for packet loss or corruption. Sometimes, during transmission, some bits get flipped due to electrical or other similar problems. Sometimes, an element in the system, such as a network link or packet router or even the remote host, are somehow damaged or otherwise not working correctly; network cables do accidentally get severed, at least sometimes.  
More fundamental however is packet loss due to lack of buffering within a network switch, router, or endpoint. Specifically, even if we could guarantee that all links worked correctly, and that all the components in the system (switches, routers, end hosts) were up and running as expected, loss is still possible, for the following reason. Imagine a packet arrives at a router; for the packet to be processed, it must be placed in memory somewhere within the router. If many such packets arrive at  
OPERATINGSYSTEMS[VERSION 1.10]  
// client code 
int main(int argc, char *argv[]) { int sd $\mathbf { \Sigma } = \mathbf { \Sigma }$ UDP_Open(20000); struct sockaddr_in addrSnd, addrRcv; int rc $\mathbf { \Sigma } = \mathbf { \Sigma }$ UDP_FillSockAddr(&addrSnd, "cs.wisc.edu", 10000); char message[BUFFER_SIZE]; sprintf(message, "hello world"); rc $\mathbf { \Sigma } = \mathbf { \Sigma }$ UDP_Write(sd, &addrSnd, message, BUFFER_SIZE); if ( $\yen 123,456$ ) int rc $\mathbf { \tau } = \mathbf { \tau }$ UDP_Read(sd, &addrRcv, message, BUFFER_SIZE); return 0; 
} 
// server code 
int main(int argc, char *argv[]) { int sd $\mathbf { \Sigma } = \mathbf { \Sigma }$ UDP_Open(10000); assert( $\mathrm { ~ \tt ~ { ~ s ~ d ~ } ~ } > \mathrm { ~ \tt ~ { ~ - ~ } 1 ~ }$ ); while (1) { struct sockaddr_in addr; char message[BUFFER_SIZE]; int rc $\mathbf { \Sigma } = \mathbf { \Sigma }$ UDP_Read(sd, &addr, message, BUFFER_SIZE); if ( $\because 0$ ) { char reply[BUFFER_SIZE]; sprintf(reply, "goodbye world"); rc $\mathbf { \Sigma } = \mathbf { \Sigma }$ UDP_Write(sd, &addr, reply, BUFFER_SIZE); } } return 0; 
}  
once, it is possible that the memory within the router cannot accommodate all of the packets. The only choice the router has at that point is to drop one or more of the packets. This same behavior occurs at end hosts as well; when you send a large number of messages to a single machine, the machineâ€™s resources can easily become overwhelmed, and thus packet loss again arises.  
Thus, packet loss is fundamental in networking. The question thus becomes: how should we deal with it?  