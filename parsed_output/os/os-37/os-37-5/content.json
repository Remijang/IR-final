[
    {
        "type": "text",
        "text": "37.5 Disk Scheduling ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Because of the high cost of I/O, the OS has historically played a role in deciding the order of I/Os issued to the disk. More specifically, given a set of $\\mathrm { I } / \\mathrm { \\bar { O } }$ requests, the disk scheduler examines the requests and decides which one to schedule next [SCO90, JW91]. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Unlike job scheduling, where the length of each job is usually unknown, with disk scheduling, we can make a good guess at how long a “job” (i.e., disk request) will take. By estimating the seek and possible rotational delay of a request, the disk scheduler can know how long each request will take, and thus (greedily) pick the one that will take the least time to service first. Thus, the disk scheduler will try to follow the principle of SJF (shortest job first) in its operation. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "SSTF: Shortest Seek Time First ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "One early disk scheduling approach is known as shortest-seek-time-first (SSTF) (also called shortest-seek-first or SSF). SSTF orders the queue of I/O requests by track, picking requests on the nearest track to complete first. For example, assuming the current position of the head is over the inner track, and we have requests for sectors 21 (middle track) and 2 (outer track), we would then issue the request to 21 first, wait for it to complete, and then issue the request to 2 (Figure 37.7). ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "SSTF works well in this example, seeking to the middle track first and then the outer track. However, SSTF is not a panacea, for the following reasons. First, the drive geometry is not available to the host OS; rather, it sees an array of blocks. Fortunately, this problem is rather easily fixed. Instead of SSTF, an OS can simply implement nearest-block-first (NBF), which schedules the request with the nearest block address next. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "The second problem is more fundamental: starvation. Imagine in our example above if there were a steady stream of requests to the inner track, where the head currently is positioned. Requests to any other tracks would then be ignored completely by a pure SSTF approach. And thus the crux of the problem: ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "CRUX: HOW TO HANDLE DISK STARVATION How can we implement SSTF-like scheduling but avoid starvation? ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Elevator (a.k.a. SCAN or C-SCAN) ",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "The answer to this query was developed some time ago (see [CKR72] for example), and is relatively straightforward. The algorithm, originally called SCAN, simply moves back and forth across the disk servicing requests in order across the tracks. Let’s call a single pass across the disk (from outer to inner tracks, or inner to outer) a sweep. Thus, if a request comes for a block on a track that has already been serviced on this sweep of the disk, it is not handled immediately, but rather queued until the next sweep (in the other direction). ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "SCAN has a number of variants, all of which do about the same thing. For example, Coffman et al. introduced F-SCAN, which freezes the queue to be serviced when it is doing a sweep [CKR72]; this action places requests that come in during the sweep into a queue to be serviced later. Doing so avoids starvation of far-away requests, by delaying the servicing of late-arriving (but nearer by) requests. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "C-SCAN is another common variant, short for Circular SCAN. Instead of sweeping in both directions across the disk, the algorithm only sweeps from outer-to-inner, and then resets at the outer track to begin again. Doing so is a bit more fair to inner and outer tracks, as pure backand-forth SCAN favors the middle tracks, i.e., after servicing the outer track, SCAN passes through the middle twice before coming back to the outer track again. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "For reasons that should now be clear, the SCAN algorithm (and its cousins) is sometimes referred to as the elevator algorithm, because it behaves like an elevator which is either going up or down and not just servicing requests to floors based on which floor is closer. Imagine how annoying it would be if you were going down from floor 10 to 1, and somebody got on at 3 and pressed 4, and the elevator went up to 4 because it was “closer” than 1! As you can see, the elevator algorithm, when used in real life, prevents fights from taking place on elevators. In disks, it just prevents starvation. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Unfortunately, SCAN and its cousins do not represent the best scheduling technology. In particular, SCAN (or SSTF even) does not actually adhere as closely to the principle of SJF as they could. In particular, they ignore rotation. And thus, another crux: ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "CRUX: HOW TO ACCOUNT FOR DISK ROTATION COSTS How can we implement an algorithm that more closely approximates SJF by taking both seek and rotation into account? ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "SPTF: Shortest Positioning Time First ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Before discussing shortest positioning time first or SPTF scheduling (sometimes also called shortest access time first or SATF), which is the solution to our problem, let us make sure we understand the problem in more detail. Figure 37.8 presents an example. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "In the example, the head is currently positioned over sector 30 on the inner track. The scheduler thus has to decide: should it schedule sector 16 (on the middle track) or sector 8 (on the outer track) for its next request. So which should it service next? ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "The answer, of course, is “it depends”. In engineering, it turns out “it depends” is almost always the answer, reflecting that trade-offs are part of the life of the engineer; such maxims are also good in a pinch, e.g., when you don’t know an answer to your boss’s question, you might want to try this gem. However, it is almost always better to know why it depends, which is what we discuss here. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "What it depends on here is the relative time of seeking as compared to rotation. If, in our example, seek time is much higher than rotational delay, then SSTF (and variants) are just fine. However, imagine if seek is quite a bit faster than rotation. Then, in our example, it would make more sense to seek further to service request 8 on the outer track than it would to perform the shorter seek to the middle track to service 16, which has to rotate all the way around before passing under the disk head. ",
        "page_idx": 11
    },
    {
        "type": "image",
        "img_path": "images/1b3caaa53ee0a16e2d844a4cb379ad164b11436f9fd9fde0746947d8009465a9.jpg",
        "img_caption": [
            "Figure 37.8: SSTF: Sometimes Not Good Enough "
        ],
        "img_footnote": [],
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "WWW.OSTEP.ORG ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "TIP: IT ALWAYS DEPENDS (LIVNY’S LAW) ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Almost any question can be answered with “it depends”, as our colleague Miron Livny always says. However, use with caution, as if you answer too many questions this way, people will stop asking you questions altogether. For example, somebody asks: “want to go to lunch?” You reply: “it depends, are you coming along?” ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "On modern drives, as we saw above, both seek and rotation are roughly equivalent (depending, of course, on the exact requests), and thus SPTF is useful and improves performance. However, it is even more difficult to implement in an OS, which generally does not have a good idea where track boundaries are or where the disk head currently is (in a rotational sense). Thus, SPTF is usually performed inside a drive, described below. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Other Scheduling Issues ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "There are many other issues we do not discuss in this brief description of basic disk operation, scheduling, and related topics. One such issue is this: where is disk scheduling performed on modern systems? In older systems, the operating system did all the scheduling; after looking through the set of pending requests, the OS would pick the best one, and issue it to the disk. When that request completed, the next one would be chosen, and so forth. Disks were simpler then, and so was life. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "In modern systems, disks can accommodate multiple outstanding requests, and have sophisticated internal schedulers themselves (which can implement SPTF accurately; inside the disk controller, all relevant details are available, including exact head position). Thus, the OS scheduler usually picks what it thinks the best few requests are (say 16) and issues them all to disk; the disk then uses its internal knowledge of head position and detailed track layout information to service said requests in the best possible (SPTF) order. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Another important related task performed by disk schedulers is I/O merging. For example, imagine a series of requests to read blocks 33, then 8, then 34, as in Figure 37.8. In this case, the scheduler should merge the requests for blocks 33 and 34 into a single two-block request; any reordering that the scheduler does is performed upon the merged requests. Merging is particularly important at the OS level, as it reduces the number of requests sent to the disk and thus lowers overheads. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "One final problem that modern schedulers address is this: how long should the system wait before issuing an I/O to disk? One might naively think that the disk, once it has even a single I/O, should immediately issue the request to the drive; this approach is called work-conserving, as the disk will never be idle if there are requests to serve. However, research on anticipatory disk scheduling has shown that sometimes it is better to wait for a bit [ID01], in what is called a non-work-conserving approach. By waiting, a new and “better” request may arrive at the disk, and thus overall efficiency is increased. Of course, deciding when to wait, and for how long, can be tricky; see the research paper for details, or check out the Linux kernel implementation to see how such ideas are transitioned into practice (if you are the ambitious sort). ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 13
    }
]