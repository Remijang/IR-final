[
    {
        "type": "text",
        "text": "55.3 Using ACLs For Access Control ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "What if, in the tradition of old British clubs, Chez Andrea gives each member his own private room, in addition to access to the library, the dining room, the billiard parlor, and other shared spaces? In this case, we need to ensure not just that only members get into the club at all, but that Ken Thompson (known to be a bit of a scamp [T84]) can’t slip into Whitfield Diffie’s room and short-sheet his bed. We could have one big access control list that specifies allowable access to every room, but that would get unmanageable. Instead, why not have one ACL for each room in the club? ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "We do the same thing with files in a typical OS that relies on ACLs for access control. Each file has its own access control list, resulting in simpler, shorter lists and quicker access control checks. So our open() call in an ACL system will examine a list for /tmp/foo, not an ACL encoding all accesses for every file in the system. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "When this open() call traps to the operating system, the OS consults the running process’s PCB to determine who owns the process. That data structure indicates that user X owns the process. The system then must get hold of the access control list for $/ \\mathrm { t m p / \\mathrm { f o o } }$ . This ACL is more file metadata, akin to the things we discussed in the chapter titled ”Files and Directories.” So it’s likely to be stored with or near the rest of the metadata for this file. Somehow, we obtain that list from persistent storage. We now look up X on the list. Either X is there or isn’t. If not, no access for X. If yes, we’ll typically go a step further to determine if the ACL entry for X allows the type of access being requested. In our example, X wanted to open /tmp/foo for read and write. Perhaps the ACL allows $x$ to open that file for read, but not for write. In that case, the system will deny the access and return an error to the process. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "In principle, this isn’t too complicated, but remember the devil being in the details? He’s still there. Consider some of those details. For example, where exactly is the ACL persistently stored? It really does need to be persistent for most resources, since the ACLs effectively encode our chosen security policy, which is probably not changing very often. So it’s somewhere on the flash drive or disk. Unless it’s cached, we’ll need to read it off that device every time someone tries to open the file. In most file systems, as was discussed in the sections on persistence, you already need to perform several device reads to actually obtain any information from a file. Are we going to require another read to also get the ACL for the file? If so, where on the device do we put the ACL to ensure that it’s quick to access? It would be best if it was close to, or even part of, something we’re already reading, which suggests a few possible locations: the file’s directory entry, the file’s inode, or perhaps the first data block of the file. At the minimum, we want to have the ACL close to one of those locations, and it might be better if it was actually in one of them, such as the inode. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "That leads to another vexing detail: how big is this list? If we do the obvious thing and create a list of actual user IDs and access modes, in principle the list could be of arbitrary size, up to the number of users known to the system. For some systems, that could be thousands of entries. But typically files belong to one user and are often available only to that user and perhaps a couple friends. So we wouldn’t want to reserve enough space in every ACL for every possible user to be listed, since most users wouldn’t appear in most ACLs. With some exceptions, of course: a lot of files should be available in some mode (perhaps read or execute) to all users. After all, commonly used executables (like ls and mv) are stored in files, and we’ll be applying access control to them, just like any other file. Our users will share the same font files, configuration files for networking, and so forth. We have to allow all users to access these files or they won’t be able to do much of anything on the system. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "So the obvious implementation would reserve a big per-file list that would be totally filled for some files and nearly empty for others. That’s clearly wasteful. For the totally filled lists, there’s another worrying detail: every time we want to check access in the list, we’ll need to search it. Modern computers can search a list of a thousand entries rather quickly, but if we need to perform such searches all the time, we’ll add a lot of undesirable overhead to our system. We could solve the problem with variable-sized access control lists, only allocating the space required for each list. Spend a few moments thinking about how you would fit that kind of metadata into the types of file systems we’ve studied, and the implications for performance. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Fortunately, in most circumstances we can benefit from a bit of legacy handed down to us from the original Bell Labs Unix system. Back in those primeval days when computer science giants roamed the Earth (or at least certain parts of New Jersey), persistent storage was in short supply and pretty expensive. There was simply no way they could afford to store large ACLs for each file. In fact, when they worked it out, they figured they could afford about nine bits for each file’s ACL. Nine bits don’t go far, but fortunately those early Unix designers had plenty of cleverness to make up for their lack of hardware. They thought about their problem and figured out that there were effectively three modes of access they cared about (read, write, and execute, for most files), and they could handle most security policies with only three entries on each access control list. Of course, if they were going to use one bit per access mode per entry, they would have already used up their nine bits, leaving no bits to specify who the entry pertained to. So they cleverly partitioned the entries on their access control list into three groups. One is the owner of the file, whose identity they had already stored in the inode. One is the members of a particular group or users; this group ID was also stored in the inode. The final one is everybody else, i.e., everybody who wasn’t the owner or a member of his group. No need to use any bits to store that, since it was just the complement of the user and group. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "This solution not only solved the problem of the amount of storage eaten up by ACLs, but also solved the problem of the cost of accessing ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "and checking them. You already needed to access a file’s inode to do almost anything with it, so if the ACL was embedded in the inode, there would be no extra seeks and reads to obtain it. And instead of a search of an arbitrary sized list, a little simple logic on a few bits would provide the answer to the access control question. And that logic is still providing the answer in most systems that use Posix-compliant file systems to this very day. Of course, the approach has limitations, since it cannot express complex access modes and sharing relationships. For that reason, some modern systems (such as Windows) allow extensions that permit the use of more general ACLs, but many rely on the tried-and-true Unix-style nine-bit ACLs5. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "There are some good features of ACLs and some limiting features. Good points first. First, what if you want to figure out who is allowed to access a resource? If you’re using ACLs, that’s an easy question to answer, since you can simply look at the ACL itself. Second, if you want to change the set of subjects who can access an object, you merely need to change the ${ \\mathrm { A C L } } ,$ since nothing else can give the user access. Third, since the ACL is typically kept either with or near the file itself, if you can get to the file, you can get to all relevant access control information. This is particularly important in distributed systems, but it also has good performance implications for all systems, as long as your design keeps the ACL near the file or its inode. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Now for the less desirable features. First, ACLs require you to solve problems we mentioned earlier: having to store the access control information somewhere near the file and dealing with potentially expensive searches of long lists. We described some practical solutions that work pretty well in most systems, but these solutions limit what ACLs can do. Second, what if you want to figure out the entire set of resources some principal (a process or a user) is permitted to access? You’ll need to check every single ACL in the system, since that principal might be on any of them. Third, in a distributed environment, you need to have a common view of identity across all the machines for ACLs to be effective. If a user on cs.ucla.edu wants to access a file stored on cs.wisconsin.edu, the Wisconsin machine is going to check some identity provided by UCLA against an access control list stored at Wisconsin. Does user remzi at UCLA actually refer to the same principal as user remzi at Wisconsin? If not, you may allow a remote user to access something he shouldn’t. But trying to maintain a consistent name space of users across multiple different computing domains is challenging. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "ASIDE: NAME SPACES ",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "We just encountered one of the interesting and difficult problems in distributed systems: what do names mean on different machines? This name space problem is relatively easy on a single computer. If the name chosen for a new thing is already in use, don’t allow it to be assigned. So when a particular name is issued on that system by any user or process, it means the same thing. /etc/password is the same file for you and for all the other users on your computer. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "But what about distributed systems composed of multiple computers? If you want the same guarantee about unique names understood by all, you need to make sure someone on a machine at UCLA does not create a name already being used at the University of Wisconsin. How to do that? Different answers have different pluses and minuses. One approach is not to bother and to understand that the namespaces are different – that’s what we do with process IDs, for example. Another approach is to require an authority to approve name selection – that’s more or less how AFS handles file name creation. Another approach is to hand out portions of the name space to each participant and allow them to assign any name from that portion, but not any other name – that’s how the World Wide Web and the IPv4 address space handle the issue. None of these answers are universally right or wrong. Design your name space for your needs, but understand the implications. ",
        "page_idx": 7
    }
]