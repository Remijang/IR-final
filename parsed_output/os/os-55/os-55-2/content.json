[
    {
        "type": "text",
        "text": "55.2 Important Aspects Of The Access Control Problem ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "As usual, the system will run some kind of algorithm to make this decision. It will take certain inputs and produce a binary output, a yes-orno decision on granting access. At the high level, access control is usually spoken of in terms of subjects, objects, and access. A subject is the entity that wants to perform the access, perhaps a user or a process. An object is the thing the subject wants to access, perhaps a file or a device. Access is some particular mode of dealing with the object, such as reading it or writing it. So an access control decision is about whether a particular subject is allowed to perform a particular mode of access on a particular object. We sometimes refer to the process of determining if a particular subject is allowed to perform a particular form of access on a particular1 object as authorization. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "One relevant issue is when will access control decisions be made? The system must run whatever algorithm it uses every time it makes such a decision. The code that implements this algorithm is called a reference monitor, and there is an obvious incentive to make sure it is implemented both correctly and efficiently. If it’s not correct, you make the wrong access decisions – obviously bad. Its efficiency is important because it will inject some overhead whenever it is used. Perhaps we wish to minimize these overheads by not checking access control on every possible opportunity. On the other hand, remember that principle of complete mediation we introduced a couple of chapters back? That principle said we should check security conditions every time someone asked for something. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Clearly, we’ll need to balance costs against security benefits. But if we can find some beneficial special cases where we can achieve low cost without compromising security, we can possibly manage to avoid trading off one for the other, at least in those cases. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "One way to do so is to give subjects objects that belong only to them. If the object is inherently theirs, by its very nature and unchangeably so, the system can let the subject (a process, in the operating system case) access it freely. Virtualization allows us to create virtual objects of this kind. Virtual memory is an excellent example. A process is allowed to access its virtual memory freely2, with no special operating system access control check at the moment the process tries to use it. A good thing, too, since otherwise we would need to run our access control algorithm on every process memory reference, which would lead to a ridiculously slow system. We can play similar virtualization tricks with peripheral devices. If a process is given access to some virtual device, which is actually backed up by a real physical device controlled by the OS, and if no other process is allowed to use that device, the operating system need not check for access control every time the process wants to use it. For example, a process might be granted control of a GPU based on an initial access control decision, after which the process can write to the GPU’s memory or issue instructions directly to it without further intervention by the OS. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Of course, as discussed earlier, virtualization is mostly an operatingsystem provided illusion. Processes share memory, devices, and other computing resources. What appears to be theirs alone is actually shared, with the operating system running around behind the scenes to keep the illusion going, sometimes assisted by special hardware. That means the operating system, without the direct knowledge and participation of the applications using the virtualized resource, still has to make sure that only proper forms of access to it are allowed. So merely relying on virtualization to ensure proper access just pushes the problem down to protecting the virtualization functionality of the OS. Even if we leave that issue aside, sooner or later we have to move past cheap special cases and deal with the general problem. Subject X wants to read and write object /tmp/foo. Maybe it’s allowable, maybe it isn’t. Now what? ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Computer scientists have come up with two basic approaches to solving this question, relying on different data structures and different methods of making the decision. One is called access control lists and the other is called capabilities. It’s actually a little inaccurate to claim that computer scientists came up with these approaches, since they’ve been in use in non-computer contexts for millennia. Let’s look at them in a more general perspective before we consider operating system implementations. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Let’s say we want to start an exclusive nightclub (called, perhaps, Chez Andrea3) restricted to only the best operating system researchers and developers. We don’t want to let any of those database or programming language people slip in, so we’ll need to make sure only our approved customers get through the door. How might we do that? One way would be to hire a massive intimidating bouncer who has a list of all the approved members. When someone wants to enter the club, they would prove their identity to the bouncer, and the bouncer would see if they were on the list. If it was Linus Torvalds or Barbara Liskov, the bouncer would let them in, but would keep out the hoi polloi networking folks who had failed to distinguish themselves in operating systems. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Another approach would be to put a really great lock on the door of the club and hand out keys to that lock to all of our OS buddies. If Jerome Saltzer wanted to get in to Chez Andrea, he’d merely pull out his key and unlock the door. If some computer architects with no OS chops wanted to get in, they wouldn’t have a key and thus would be stuck outside. Compared to the other approach, we’d save on the salary of the bouncer, though we would have to pay for the locks and keys4. As new luminaries in the OS field emerge who we want to admit, we’ll need new keys for them, and once in a while we may make a mistake and hand out a key to someone who doesn’t deserve it, or a member might lose a key, in which case we need to make sure that key no longer opens the club door. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "The same ideas can be used in computer systems. Early computer scientists decided to call the approach that’s kind of like locks and keys a capability-based system, while the approach based on the bouncer and the list of those to admit was called an access control list system. Capabilities are thus like keys, or tickets to a movie, or tokens that let you ride a subway. Access control lists are thus like, well, lists. How does this work in an operating system? If you’re using capabilities, when a process belonging to user X wants to read and write file /tmp/foo, it hands a capability specific to that file to the system. (And precisely what, you may ask, is a capability in this context? Good question! We’ll get to that.) If you’re using access control lists (ACLs, for short), the system looks up user X on an ACL associated with /tmp/foo, only allowing the access if the user is on the list. In either case, the check can be made at the moment the access (an open() call, in our example) is requested. The check is made after trapping to the operating system, but before the access is actually permitted, with an early exit and error code returned if the access control check fails. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "At a high level, these two options may not sound very different, but when you start thinking about the algorithm you’ll need to run and the data structures required to support that algorithm, you’ll quickly see that there are major differences. Let’s walk through each in turn. ",
        "page_idx": 3
    }
]