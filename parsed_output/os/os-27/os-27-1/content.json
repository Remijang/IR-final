[
    {
        "type": "text",
        "text": "27.1 Thread Creation ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "The first thing you have to be able to do to write a multi-threaded program is to create new threads, and thus some kind of thread creation interface must exist. In POSIX, it is easy: ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "#include <pthread.h>   \nint   \npthread_create(pthread_t \\*thread, const pthread_attr_t $\\star$ attr, void $\\star$ (\\*start_routine)(void\\*), void \\*arg); ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "This declaration might look a little complex (particularly if you haven’t used function pointers in C), but actually it’s not too bad. There are four arguments: thread, attr, start routine, and arg. The first, thread, is a pointer to a structure of type pthread t; we’ll use this structure to interact with this thread, and thus we need to pass it to pthread create() in order to initialize it. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "The second argument, attr, is used to specify any attributes this thread might have. Some examples include setting the stack size or perhaps information about the scheduling priority of the thread. An attribute is initialized with a separate call to pthread attr init(); see the manual page for details. However, in most cases, the defaults will be fine; in this case, we will simply pass the value NULL in. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "The third argument is the most complex, but is really just asking: which function should this thread start running in? In C, we call this a function pointer, and this one tells us the following is expected: a function name (start routine), which is passed a single argument of type void $\\star$ (as indicated in the parentheses after start routine), and which returns a value of type void $\\star$ (i.e., a void pointer). ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "If this routine instead required an integer argument, instead of a void pointer, the declaration would look like this: ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "int pthread_create(..., // first two args are the same void $\\star$ (\\*start_routine)(int), int arg); ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "If instead the routine took a void pointer as an argument, but returned an integer, it would look like this: ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "int pthread_create(..., // first two args are the same int ( $\\star$ start_routine)(void $\\star$ ), void \\*arg); ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Finally, the fourth argument, arg, is exactly the argument to be passed to the function where the thread begins execution. You might ask: why do we need these void pointers? Well, the answer is quite simple: having a void pointer as an argument to the function start routine allows us to pass in any type of argument; having it as a return value allows the thread to return any type of result. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Let’s look at an example in Figure 27.1. Here we just create a thread that is passed two arguments, packaged into a single type we define ourselves (myarg t). The thread, once created, can simply cast its argument to the type it expects and thus unpack the arguments as desired. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "And there it is! Once you create a thread, you really have another live executing entity, complete with its own call stack, running within the same address space as all the currently existing threads in the program. The fun thus begins! ",
        "page_idx": 1
    }
]