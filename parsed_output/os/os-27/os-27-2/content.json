[
    {
        "type": "text",
        "text": "27.2 Thread Completion ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "The example above shows how to create a thread. However, what happens if you want to wait for a thread to complete? You need to do something special in order to wait for completion; in particular, you must call the routine pthread join(). ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "int pthread_join(pthread_t thread, void \\*\\*value_ptr); ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "WWW.OSTEP.ORG ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1 #include <stdio.h>   \n2 #include <pthread.h>   \n3   \n4 typedef struct {   \n5 int a;   \n6 int b;   \n7 } myarg_t;   \n8   \n9 void \\*mythread(void \\*arg) {   \n10 myarg_t \\*args $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ (myarg_t $\\star$ ) arg;   \n11 printf(\"%d %d\\n\", args->a, args->b);   \n12 return NULL;   \n13 }   \n14   \n15 int main(int argc, char \\*argv[]) {   \n16 pthread_t p;   \n17 myarg_t args $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ { 10, 20 };   \n18   \n19 int rc $\\mathbf { \\tau } = \\mathbf { \\tau }$ pthread_create(&p, NULL, mythread, &args);   \n20   \n} ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "This routine takes two arguments. The first is of type pthread t, and is used to specify which thread to wait for. This variable is initialized by the thread creation routine (when you pass a pointer to it as an argument to pthread create()); if you keep it around, you can use it to wait for that thread to terminate. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "The second argument is a pointer to the return value you expect to get back. Because the routine can return anything, it is defined to return a pointer to void; because the pthread join() routine changes the value of the passed in argument, you need to pass in a pointer to that value, not just the value itself. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Let’s look at another example (Figure 27.2, page 4). In the code, a single thread is again created, and passed a couple of arguments via the myarg t structure. To return values, the myret t type is used. Once the thread is finished running, the main thread, which has been waiting inside of the pthread join() routine1, then returns, and we can access the values returned from the thread, namely whatever is in myret t. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "A few things to note about this example. First, often times we don’t have to do all of this painful packing and unpacking of arguments. For example, if we just create a thread with no arguments, we can pass NULL in as an argument when the thread is created. Similarly, we can pass NULL into pthread join() if we don’t care about the return value. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "1 typedef struct { int a; int b; } myarg_t;   \n2 typedef struct { int x; int y; } myret_t;   \n3   \n4 void \\*mythread(void \\*arg) {   \n5 myret_t \\*rvals $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ Malloc(sizeof(myret_t));   \n6 rvals->x $\\mathit { \\Theta } = \\mathit { \\Theta } 1$ ;   \n7 rvals->y = 2;   \n8 return (void $\\star$ ) rvals;   \n9 }   \n10   \n11 int main(int argc, char \\*argv[]) {   \n12 pthread_t p;   \n13 myret_t \\*rvals;   \n14 myarg_t args $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ { 10, 20 };   \n15 Pthread_create(&p, NULL, mythread, &args);   \n16 Pthread_join(p, (void $\\star \\star$ ) &rvals);   \n17 printf(\"returned %d %d\\n\", rvals->x, rvals->y);   \n18 free(rvals);   \n19 return 0;   \n20 } ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Second, if we are just passing in a single value (e.g., a long long int), we don’t have to package it up as an argument. Figure 27.3 (page 5) shows an example. In this case, life is a bit simpler, as we don’t have to package arguments and return values inside of structures. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Third, we should note that one has to be extremely careful with how values are returned from a thread. Specifically, never return a pointer which refers to something allocated on the thread’s call stack. If you do, what do you think will happen? (think about it!) Here is an example of a dangerous piece of code, modified from the example in Figure 27.2. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "1 void \\*mythread(void \\*arg) {   \n2 myarg_t \\*args $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ (myarg_t $\\star$ ) arg;   \n3 printf(\"%d %d\\n\", args->a, args->b);   \n4 myret_t oops; // ALLOCATED ON STACK: BAD!   \n5 oops.x $\\mathit { \\Theta } = \\mathit { \\Theta } 1$ ;   \n6 $\\mathrm { \\texttt { o o p s . y } = \\ 2 } ;$ ;   \n7 return (void $\\star$ ) &oops;   \n8 } ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "In this case, the variable oops is allocated on the stack of mythread. However, when it returns, the value is automatically deallocated (that’s why the stack is so easy to use, after all!), and thus, passing back a pointer to a now deallocated variable will lead to all sorts of bad results. Cer",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "void \\*mythread(void \\*arg) { long long int value $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ (long long int) arg; printf(\"%lld\\n\", value); return (void $\\star$ ) (value + 1);   \n}   \nint main(int argc, char \\*argv[]) { pthread_t p; long long int rvalue; Pthread_create(&p, NULL, mythread, (void $\\star$ ) 100); Pthread_join(p, (void $\\star \\star$ ) &rvalue); printf(\"returned %lld\\n\", rvalue); return 0;   \n} ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "tainly, when you print out the values you think you returned, you’ll probably (but not necessarily!) be surprised. Try it and find out for yourself2! ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Finally, you might notice that the use of pthread create() to create a thread, followed by an immediate call to pthread join(), is a pretty strange way to create a thread. In fact, there is an easier way to accomplish this exact task; it’s called a procedure call. Clearly, we’ll usually be creating more than just one thread and waiting for it to complete, otherwise there is not much purpose to using threads at all. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "We should note that not all code that is multi-threaded uses the join routine. For example, a multi-threaded web server might create a number of worker threads, and then use the main thread to accept requests and pass them to the workers, indefinitely. Such long-lived programs thus may not need to join. However, a parallel program that creates threads to execute a particular task (in parallel) will likely use join to make sure all such work completes before exiting or moving onto the next stage of computation. ",
        "page_idx": 4
    }
]