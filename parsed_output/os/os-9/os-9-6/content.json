[
    {
        "type": "text",
        "text": "9.6 Stride Scheduling ",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "You might also be wondering: why use randomness at all? As we saw above, while randomness gets us a simple (and approximately correct) scheduler, it occasionally will not deliver the exact right proportions, especially over short time scales. For this reason, Waldspurger invented stride scheduling, a deterministic fair-share scheduler [W95]. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Stride scheduling is also straightforward. Each job in the system has a stride, which is inverse in proportion to the number of tickets it has. In our example above, with jobs A, B, and C, with 100, 50, and 250 tickets, respectively, we can compute the stride of each by dividing some large number by the number of tickets each process has been assigned. For example, if we divide 10,000 by each of those ticket values, we obtain the following stride values for A, B, and C: 100, 200, and 40. We call this value the stride of each process; every time a process runs, we will increment a counter for it (called its pass value) by its stride to track its global progress. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "The scheduler then uses the stride and pass to determine which process should run next. The basic idea is simple: at any given time, pick the process to run that has the lowest pass value so far; when you run a process, increment its pass counter by its stride. A pseudocode implementation is provided by Waldspurger [W95]: ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "curr $\\mathbf { \\tau } = \\mathbf { \\tau }$ remove_min(queue); // pick client with min pass schedule(curr); // run for quantum curr->pass $+ =$ curr->stride; // update pass using stride insert(queue, curr); // return curr to queue ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "In our example, we start with three processes (A, B, and C), with stride values of 100, 200, and 40, and all with pass values initially at 0. Thus, at first, any of the processes might run, as their pass values are equally low. Assume we pick A (arbitrarily; any of the processes with equal low pass values can be chosen). A runs; when finished with the time slice, we update its pass value to 100. Then we run B, whose pass value is then set to 200. Finally, we run C, whose pass value is incremented to 40. At this point, the algorithm will pick the lowest pass value, which is ${ \\mathrm { C ^ { \\prime } s } } ,$ and run it, updating its pass to 80 (C’s stride is 40, as you recall). Then C will ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/6976f2f4b9866588247f008b753249ac75667cdf1f32107ba414446ee64c1487.jpg",
        "img_caption": [
            "Figure 9.3: Stride Scheduling: A Trace "
        ],
        "img_footnote": [],
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "run again (still the lowest pass value), raising its pass to 120. A will run now, updating its pass to 200 (now equal to B’s). Then C will run twice more, updating its pass to 160 then 200. At this point, all pass values are equal again, and the process will repeat, ad infinitum. Figure 9.3 traces the behavior of the scheduler over time. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "As we can see from the figure, C ran five times, A twice, and B just once, exactly in proportion to their ticket values of 250, 100, and 50. Lottery scheduling achieves the proportions probabilistically over time; stride scheduling gets them exactly right at the end of each scheduling cycle. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "So you might be wondering: given the precision of stride scheduling, why use lottery scheduling at all? Well, lottery scheduling has one nice property that stride scheduling does not: no global state. Imagine a new job enters in the middle of our stride scheduling example above; what should its pass value be? Should it be set to 0? If so, it will monopolize the CPU. With lottery scheduling, there is no global state per process; we simply add a new process with whatever tickets it has, update the single global variable to track how many total tickets we have, and go from there. In this way, lottery makes it much easier to incorporate new processes in a sensible manner. ",
        "page_idx": 6
    }
]