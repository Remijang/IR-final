[
    {
        "type": "text",
        "text": "17.3 Basic Strategies ",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Now that we have some machinery under our belt, let’s go over some basic strategies for managing free space. These approaches are mostly based on pretty simple policies that you could think up yourself; try it before reading and see if you come up with all of the alternatives (or maybe some new ones!). ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "The ideal allocator is both fast and minimizes fragmentation. Unfortunately, because the stream of allocation and free requests can be arbitrary (after all, they are determined by the programmer), any particular strategy can do quite badly given the wrong set of inputs. Thus, we will not describe a “best” approach, but rather talk about some basics and discuss their pros and cons. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Best Fit ",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "The best fit strategy is quite simple: first, search through the free list and find chunks of free memory that are as big or bigger than the requested size. Then, return the one that is the smallest in that group of candidates; this is the so called best-fit chunk (it could be called smallest fit too). One pass through the free list is enough to find the correct block to return. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "The intuition behind best fit is simple: by returning a block that is close to what the user asks, best fit tries to reduce wasted space. However, there is a cost; naive implementations pay a heavy performance penalty when performing an exhaustive search for the correct free block. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Worst Fit ",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "The worst fit approach is the opposite of best fit; find the largest chunk and return the requested amount; keep the remaining (large) chunk on the free list. Worst fit tries to thus leave big chunks free instead of lots of small chunks that can arise from a best-fit approach. Once again, however, a full search of free space is required, and thus this approach can be costly. Worse, most studies show that it performs badly, leading to excess fragmentation while still having high overheads. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "First Fit ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "The first fit method simply finds the first block that is big enough and returns the requested amount to the user. As before, the remaining free space is kept free for subsequent requests. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "First fit has the advantage of speed — no exhaustive search of all the free spaces are necessary — but sometimes pollutes the beginning of the free list with small objects. Thus, how the allocator manages the free list’s order becomes an issue. One approach is to use address-based ordering; by keeping the list ordered by the address of the free space, coalescing becomes easier, and fragmentation tends to be reduced. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Next Fit ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Instead of always beginning the first-fit search at the beginning of the list, the next fit algorithm keeps an extra pointer to the location within the list where one was looking last. The idea is to spread the searches for free space throughout the list more uniformly, thus avoiding splintering of the beginning of the list. The performance of such an approach is quite similar to first fit, as an exhaustive search is once again avoided. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Examples ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Here are a few examples of the above strategies. Envision a free list with three elements on it, of sizes 10, 30, and 20 (we’ll ignore headers and other details here, instead just focusing on how strategies operate): ",
        "page_idx": 11
    },
    {
        "type": "image",
        "img_path": "images/b4d76e6e8cc298021317c5f4396cf117e1ba6424c9908c3e0dc313155ad6db52.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Assume an allocation request of size 15. A best-fit approach would search the entire list and find that 20 was the best fit, as it is the smallest free space that can accommodate the request. The resulting free list: ",
        "page_idx": 11
    },
    {
        "type": "image",
        "img_path": "images/37024c18f8f91bd2872055e43c355d1b9c448495d4e467fed677b0d2d809e640.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "As happens in this example, and often happens with a best-fit approach, a small free chunk is now left over. A worst-fit approach is similar but instead finds the largest chunk, in this example 30. The resulting list: ",
        "page_idx": 11
    },
    {
        "type": "image",
        "img_path": "images/e99cf229224bdb02d3bcec81dc0e825d536074de2304b4bb84430d30f0806b61.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "The first-fit strategy, in this example, does the same thing as worst-fit, also finding the first free block that can satisfy the request. The difference is in the search cost; both best-fit and worst-fit look through the entire list; first-fit only examines free chunks until it finds one that fits, thus reducing search cost. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "These examples just scratch the surface of allocation policies. More detailed analysis with real workloads and more complex allocator behaviors (e.g., coalescing) are required for a deeper understanding. Perhaps something for a homework section, you say? ",
        "page_idx": 12
    }
]