[
    {
        "type": "text",
        "text": "2.6 Some History ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Before closing this introduction, let us present a brief history of how operating systems developed. Like any system built by humans, good ideas accumulated in operating systems over time, as engineers learned what was important in their design. Here, we discuss a few major developments. For a richer treatment, see Brinch Hansen’s excellent history of operating systems [BH00]. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Early Operating Systems: Just Libraries ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "In the beginning, the operating system didn’t do too much. Basically, it was just a set of libraries of commonly-used functions; for example, instead of having each programmer of the system write low-level I/O ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "OPERATINGSYSTEMS[VERSION 1.10]",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "handling code, the ${ } ^ { \\prime \\prime } \\mathrm { O S } ^ { \\prime \\prime }$ would provide such APIs, and thus make life easier for the developer. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Usually, on these old mainframe systems, one program ran at a time, as controlled by a human operator. Much of what you think a modern OS would do (e.g., deciding what order to run jobs in) was performed by this operator. If you were a smart developer, you would be nice to this operator, so that they might move your job to the front of the queue. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "This mode of computing was known as batch processing, as a number of jobs were set up and then run in a “batch” by the operator. Computers, as of that point, were not used in an interactive manner, because of cost: it was simply too expensive to let a user sit in front of the computer and use it, as most of the time it would just sit idle then, costing the facility hundreds of thousands of dollars per hour [BH00]. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Beyond Libraries: Protection ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "In moving beyond being a simple library of commonly-used services, operating systems took on a more central role in managing machines. One important aspect of this was the realization that code run on behalf of the OS was special; it had control of devices and thus should be treated differently than normal application code. Why is this? Well, imagine if you allowed any application to read from anywhere on the disk; the notion of privacy goes out the window, as any program could read any file. Thus, implementing a file system (to manage your files) as a library makes little sense. Instead, something else was needed. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Thus, the idea of a system call was invented, pioneered by the Atlas computing system $[ \\mathrm { K } \\substack { + } \\dot { 6 } 1 , \\mathrm { L } 7 8 ]$ . Instead of providing OS routines as a library (where you just make a procedure call to access them), the idea here was to add a special pair of hardware instructions and hardware state to make the transition into the OS a more formal, controlled process. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "The key difference between a system call and a procedure call is that a system call transfers control (i.e., jumps) into the OS while simultaneously raising the hardware privilege level. User applications run in what is referred to as user mode which means the hardware restricts what applications can do; for example, an application running in user mode can’t typically initiate an I/O request to the disk, access any physical memory page, or send a packet on the network. When a system call is initiated (usually through a special hardware instruction called a trap), the hardware transfers control to a pre-specified trap handler (that the OS set up previously) and simultaneously raises the privilege level to kernel mode. In kernel mode, the OS has full access to the hardware of the system and thus can do things like initiate an $\\mathrm { I } / \\mathrm { O }$ request or make more memory available to a program. When the OS is done servicing the request, it passes control back to the user via a special return-from-trap instruction, which reverts to user mode while simultaneously passing control back to where the application left off. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "The Era of Multiprogramming ",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Where operating systems really took off was in the era of computing beyond the mainframe, that of the minicomputer. Classic machines like the PDP family from Digital Equipment made computers hugely more affordable; thus, instead of having one mainframe per large organization, now a smaller collection of people within an organization could likely have their own computer. Not surprisingly, one of the major impacts of this drop in cost was an increase in developer activity; more smart people got their hands on computers and thus made computer systems do more interesting and beautiful things. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "In particular, multiprogramming became commonplace due to the desire to make better use of machine resources. Instead of just running one job at a time, the OS would load a number of jobs into memory and switch rapidly between them, thus improving CPU utilization. This switching was particularly important because I/O devices were slow; having a program wait on the CPU while its I/O was being serviced was a waste of CPU time. Instead, why not switch to another job and run it for a while? ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "The desire to support multiprogramming and overlap in the presence of I/O and interrupts forced innovation in the conceptual development of operating systems along a number of directions. Issues such as memory protection became important; we wouldn’t want one program to be able to access the memory of another program. Understanding how to deal with the concurrency issues introduced by multiprogramming was also critical; making sure the OS was behaving correctly despite the presence of interrupts is a great challenge. We will study these issues and related topics later in the book. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "One of the major practical advances of the time was the introduction of the UNIX operating system, primarily thanks to Ken Thompson (and Dennis Ritchie) at Bell Labs (yes, the phone company). UNIX took many good ideas from different operating systems (particularly from Multics [O72], and some from systems like TENEX $[ \\mathrm { B } \\substack { + } 7 2 ]$ and the Berkeley TimeSharing System [S68]), but made them simpler and easier to use. Soon this team was shipping tapes containing UNIX source code to people around the world, many of whom then got involved and added to the system themselves; see the Aside (next page) for more detail10. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "The Modern Era ",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Beyond the minicomputer came a new type of machine, cheaper, faster, and for the masses: the personal computer, or PC as we call it today. Led by Apple’s early machines (e.g., the Apple II) and the IBM PC, this new breed of machine would soon become the dominant force in computing, ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "ASIDE: THE IMPORTANCE OF UNIX ",
        "text_level": 1,
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "It is difficult to overstate the importance of UNIX in the history of operating systems. Influenced by earlier systems (in particular, the famous Multics system from MIT), UNIX brought together many great ideas and made a system that was both simple and powerful. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Underlying the original “Bell Labs” UNIX was the unifying principle of building small powerful programs that could be connected together to form larger workflows. The shell, where you type commands, provided primitives such as pipes to enable such meta-level programming, and thus it became easy to string together programs to accomplish a bigger task. For example, to find lines of a text file that have the word “foo” in them, and then to count how many such lines exist, you would type: grep foo file.txt|wc -l, thus using the grep and wc (word count) programs to achieve your task. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "The UNIX environment was friendly for programmers and developers alike, also providing a compiler for the new C programming language. Making it easy for programmers to write their own programs, as well as share them, made UNIX enormously popular. And it probably helped a lot that the authors gave out copies for free to anyone who asked, an early form of open-source software. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Also of critical importance was the accessibility and readability of the code. Having a beautiful, small kernel written in C invited others to play with the kernel, adding new and cool features. For example, an enterprising group at Berkeley, led by Bill Joy, made a wonderful distribution (the Berkeley Systems Distribution, or BSD) which had some advanced virtual memory, file system, and networking subsystems. Joy later cofounded Sun Microsystems. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Unfortunately, the spread of UNIX was slowed a bit as companies tried to assert ownership and profit from it, an unfortunate (but common) result of lawyers getting involved. Many companies had their own variants: SunOS from Sun Microsystems, AIX from IBM, HPUX (a.k.a. “H-Pucks”) from HP, and IRIX from SGI. The legal wrangling among AT&T/Bell Labs and these other players cast a dark cloud over UNIX, and many wondered if it would survive, especially as Windows was introduced and took over much of the PC market... ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "as their low-cost enabled one machine per desktop instead of a shared minicomputer per workgroup. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Unfortunately, for operating systems, the PC at first represented a great leap backwards, as early systems forgot (or never knew of) the lessons learned in the era of minicomputers. For example, early operating systems such as DOS (the Disk Operating System, from Microsoft) didn’t think memory protection was important; thus, a malicious (or perhaps just a poorly-programmed) application could scribble all over mem",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "ASIDE: AND THEN CAME LINUX ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Fortunately for UNIX, a young Finnish hacker named Linus Torvalds decided to write his own version of UNIX which borrowed heavily on the principles and ideas behind the original system, but not from the code base, thus avoiding issues of legality. He enlisted help from many others around the world, took advantage of the sophisticated GNU tools that already existed [G85], and soon Linux was born (as well as the modern open-source software movement). ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "As the internet era came into place, most companies (such as Google, Amazon, Facebook, and others) chose to run Linux, as it was free and could be readily modified to suit their needs; indeed, it is hard to imagine the success of these new companies had such a system not existed. As smart phones became a dominant user-facing platform, Linux found a stronghold there too (via Android), for many of the same reasons. And Steve Jobs took his UNIX-based NeXTStep operating environment with him to Apple, thus making UNIX popular on desktops (though many users of Apple technology are probably not even aware of this fact). Thus UNIX lives on, more important today than ever before. The computing gods, if you believe in them, should be thanked for this wonderful outcome. ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "ory. The first generations of the Mac OS (v9 and earlier) took a cooperative approach to job scheduling; thus, a thread that accidentally got stuck in an infinite loop could take over the entire system, forcing a reboot. The painful list of OS features missing in this generation of systems is long, too long for a full discussion here. ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Fortunately, after some years of suffering, the old features of minicomputer operating systems started to find their way onto the desktop. For example, Mac OS X/macOS has UNIX at its core, including all of the features one would expect from such a mature system. Windows has similarly adopted many of the great ideas in computing history, starting in particular with Windows NT, a great leap forward in Microsoft OS technology. Even today’s cell phones run operating systems (such as Linux) that are much more like what a minicomputer ran in the 1970s than what a PC ran in the 1980s (thank goodness); it is good to see that the good ideas developed in the heyday of OS development have found their way into the modern world. Even better is that these ideas continue to develop, providing more features and making modern systems even better for users and applications. ",
        "page_idx": 15
    }
]