5.3.2 ALU Instructions

Let us now discuss the rich set of ALU instructions that x86 processors support.

Add and Subtract Instructions

Table 5.8 shows the add and subtract operations that are typically used in x86 processors. The basic add and subtract instructions add the values of the first and second operands, and treat the first operand also as the destination operand. They set the carry and overflow fields of the eflags register. The adc instruction adds its two source operands, and also adds the value of the carry bit. Similarly, the  instruction subtracts the second operand from the first, and then subtracts the carry bit from the result. We can use the adc and sbb instructions to add or subtract very large integers (refer to Example 62 and Example 63). In these examples, we first operate on the lower bytes. While operating on the higher bytes we need to take the carry generated by adding or subtracting the lower bytes into account. We use the adc and  instructions, respectively for this purpose.

Example 62

Write an x86 assembly program to add two 64-bit numbers. The first number is stored in the registers ebx, and eax, where ebx stores the higher byte, and eax stores the lower byte. The second number is stored in edx, and ecx. Save the result in ebx (higher byte), and eax(lower byte).

Answer:

add eax, ecx adc ebx, edx

Example 63

Write an x86 assembly program to subtract two 64-bit numbers. The first number is stored in the registers ebx, and eax, where ebx stores the higher byte, and eax stores the lower byte. The second number is stored in edx, and ecx. Subtract the second number from the first number. Save the result in ebx (higher byte), and eax(lower byte).

Answer:

sub eax, ecx sbb ebx, edx

inc, dec, and neg Instructions

Table 5.9 shows the semantics of increment (inc), decrement (dec), and negate  instructions. The inc instruction, adds 1 to the source operand. In this case also the source and destination operands are the same. Similarly, the dec instruction subtracts 1 from the source operand, which is also the destination operand. Note that the operand can either be a register or a memory location. The  instruction computes the negative of the value stored in the first operand (register or memory). Let us consider an example (see Example 64).

Example 64

Write an x86 assembly code snippet to compute eax = -1 \* (eax + 1).

Answer:

inc eax neg eax

The Compare(cmp) Instruction

Table 5.10 shows the cmp (compare) instruction. It compares two operands and sets the values of a few flags. It performs the comparison by subtracting the value of the second operand from the first operand. This is conceptually a subtract instruction that does not have a destination operand.

Multiplication and Division Instructions

Table 5.11 shows the signed multiplication and division instructions in x86. They are known as imul and idiv, respectively. The unsigned variants of the instructions are known as mul and div. They have exactly the same semantics as their signed counterparts. The signed instructions are more generic. Hence, we only discuss their operation in this section.

The imul instruction has three variants. The 1-address format variant has 1 source operand, which can either be a register or a memory address. This source operand is multiplied with the contents of  . Note that when we multiply two 32-bit numbers, we require at most 64 bits to save the result (see Section 8.2.1). Hence, to avoid overflows, the processor saves the results in the register pair  . edx contains the upper 32 bits, and eax contains the lower 32 bits of the final product. The 2-address format version is similar to other ALU instructions that we have studied. It multiplies the first and second source operands, and saves the result in the destination register (which is the first operand). Note that in this variant of the multiply instruction, the destination is always a register, and the result is truncated to fit in the register. The imul instruction has another variant that requires 3 operands. Here, it multiplies the contents of the second and third operands and stores the product in the register specified by the first operand. For this variant of the imul instruction, the first operand needs to be a register, the second operand can be a register or memory location, and the third operand needs to be an immediate value.

The idiv instruction takes just 1 operand (register or memory). It divides the contents of the register pair (edx:eax) by the contents of the operand. It saves the quotient in  , and the remainder in edx. Note that the remainder has the same sign as the dividend. A subtle point should be noted here. While using a positive dividend that fits in 32 bits, we need to explicitly set edx to 0, and for a negative dividend that fits in 32 bits, we need to explicitly set edx to -1 (for sign extension).

Let us consider a set of examples.

Example 65 Write an assembly code snippet to multiply 3 with -17, and save the result in eax.

Answer:

mov ebx, 3   
imul eax, ebx, -17

Example 66

Write an assembly code snippet to compute  , where  is the content of ecx, and save the result in eax.

Answer:

mov eax, ecx imul ecx imul ecx

Example 67

Write an assembly code snippet to divide -50 by 3. Save the quotient in eax, and remainder in edx.

Answer:

mov edx, -1 mov eax, -50 mov ebx, 3 idiv ebx

At the end eax contains -16, and edx contains -2.

Logical Instructions

Table 5.12 shows the semantics of four commonly used logical operations. and, or, and xor instructions have exactly the same format as add and sub instructions, and most of the other 2-address format instructions. They compute the bitwise AND, OR, and exclusive OR of the first two operands, respectively. The not instruction computes the 1â€™s complement (flips each bit) of the source operand, which is also the destination operand (format is similar to other 1-address format instructions such as inc, dec, and neg).

Shift Instructions

Table 5.13 shows the semantics of shift instructions. sar (shift arithmetic right) performs an arithmetic right shift by replicating the sign bit. shr (shift logical right), shifts the first operand to the right. Instead of replicating the sign bit, it fills the MSB bits with 0s. sal and  are the same instruction. They perform a left shift. Recall that we do not have an arithmetic left shift operation. Let us consider some examples.

Example 68 What is the final value of eax?

mov eax, 0xdeadc0de sal eax, 4

Answer: 0xeadc0de0

Example 69 What is the final value of eax?   
mov eax, 0xdeadc0de   
sar eax, 4   
Answer: 0xfdeadc0d

Example 70 What is the final value of eax?

mov eax, 0xdeadc0de shr eax, 4

Answer: 0xdeadc0d