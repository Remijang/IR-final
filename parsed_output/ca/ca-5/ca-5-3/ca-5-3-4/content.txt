5.3.4 Advanced Memory Instructions

String Instructions

The lea instruction stands for load effective address. It has a register operand, and a memory operand. The role of the lea instruction is to copy the address of the memory operand (not its contents) to the register.

Let us now introduce a special set of instructions known as string instructions. We shall introduce the following instructions: stos, lods, and movs. The stos instruction transfers data from the eax register to the location specified by the edi register. It comes in four flavors depending upon the amount of data that we wish to transfer. It uses the ’b’ suffix for 1 byte, ’w’ for 2 bytes, ’d’ for 4 bytes, and ’q’ for 8 bytes. We show an example of the stosd instruction in Table 5.18. The stosd instruction transfers the contents of eax (4 bytes) to the memory address specified by edi. Subsequently, this instruction increments or decrements the contents of edi by 4 depending on the direction flag. The direction flag  is a field in the f lags register similar to zero, carry, and overflow. If the direction flag is set (equal to 1), then the stos instruction subtracts the size of the operand from the contents of edi. Conversely, if  is equal to 0, then the stos instruction adds the size of the operand to edi.

We introduce two 0-address format instructions namely  and  to set and reset the direction flag, respectively.

The lods and movs set of instructions are defined similarly. For example, the lodsd instruction transfers the contents of the memory location specified by esi to eax. It subsequently increments or decrements the contents of esi by the size of the operands based on the value of  . The movs instruction combines the functionality of lods and stos. It first fetches a set of bytes from the memory address stored in esi. Subsequently, it writes the bytes to the memory address specified by edi. It increments or decrements esi and edi based on the value of the direction flag.

Trivia 2   
The si register (16-bit version of esi) stands for the source index register. Similarly, the di register stands for the destination index register.

Let us now look at a set of examples.

Example 79 What is the value of ebx?

lea edi, [esp+4]   
mov eax, 21   
stosd saves eax in [edi]   
mov ebx, [esp+4]

Answer: We save 21 (eax) in the memory address specified in edi by using the stosd instruction. This memory address is equal to (esp + 4). After executing the stosd instruction, we load the contents of this memory address into ebx. The result is equal to the value of eax seen by the stosd instruction, which is 21.

Example 80 What is the value of eax after executing this code snippet?

lea esi, [esp+4] mov dword [esp+4], 19 lodsd ; eax <-- [esi]

Answer: Note the use of the modifier dword here. We need to use it because we are saving an immediate to a memory location, and we need to specify its size. The value of eax is equal to the value stored in [esp  4], which is 19.

Example 81 What is the value of eax after executing this code snippet?

Answer: The movsd instruction transfer 4 bytes from the memory address specified in esi to the memory address specified in edi. Since we write 192 to the memory address specified in esi, we shall read back the same value in the last line.

Instructions with the rep Prefix

The string instructions can additionally increment or decrement the values of esi and  . We have not used this feature up till now. Let us use this feature to transfer an array of 10 integers from one location to another. This feature is very frequently used in modern processors to transfer large amounts of data between two locations.

Let us first show a conventional solution in Example 82.

Example 82 Write a program to create a copy of a 10 element integer array. Assume that the starting address of the original array is stored in esi, and the starting address of the destination array is stored in edi.

Answer:

Example 83 Write a program to create a copy of a 10 element integer array. Assume that the starting address of the original array is stored in esi, and the starting address of the destination array is stored in edi. Use the movsd instruction.

Answer:

As compared to Example 82, we reduce the number of instruction in the loop from 5 to 4.

In Example 83, we use the movsd instruction to replace a pair of load/store instructions with just one instruction. This reduces the number of instructions in the loop from 5 to 4. We were not able to get a bigger reduction because we still need to update the loop index, and compute the loop condition.

To make our code look even more elegant, the x86 ISA defines a rep prefix that can used with any string instruction. The rep prefix instructs the processor to execute a single string instruction  times, where  is the value stored in the ecx register. Every time the processor executes the string instruction, it decrements  . At the end, the value of  becomes 0. Its semantics is shown in Table 5.19.

Example 84 Write a program to create a copy of a 10 element integer array. Assume that the starting address of the original array is stored in esi, and the starting address of the destination array is stored in edi. Use the rep prefix with the movsd instruction.

Answer:

cld ; DF = 0 mov ecx, 10 ; Set the count to 10 rep movsd ; Execute movsd 10 times

The rep prefix thus allows us to fold an entire loop into just one instruction as shown in Example 84. The rep prefix is meant to be used with string instructions for copying large regions of data. It makes the code for operating on strings of data very compact and elegant. The rep instruction has two variants namely repe, and repne. These instructions use an additional termination condition, along with the value of  . Instructions prefixed with repe can also terminate when the zero flag becomes 0, and an instruction prefixed with repne also terminates when the zero flag becomes 1.