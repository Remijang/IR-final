[
    {
        "type": "text",
        "text": "5.4.5 Stack Cleanup Instructions ",
        "text_level": 1,
        "page_idx": 216
    },
    {
        "type": "table",
        "img_path": "images/2171ba6b6668c020336bf5f6622d2ea7ba5cbf4bfb113ec0f63479cd7126054e.jpg",
        "table_caption": [
            "Table 5.27: Floating point stack cleanup instructions "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Semantics</td><td>Example</td><td>Explanation</td></tr><tr><td>ffree reg</td><td>ffree st4</td><td>Free st4</td></tr><tr><td>finit</td><td>finit</td><td>Reset the status of the FP unit in- cluding the FP stack and registers</td></tr></table></body></html>\n\n",
        "page_idx": 216
    },
    {
        "type": "text",
        "text": "Table 5.27 shows two instructions for cleaning up the FP stack. The $f f r e e$ instruction sets the status of the register specified as an operand to empty. Using f f ree to free all the registers is a quick solution. For freeing the entire stack we need to invoke the ffree instruction iteratively. For deleting the entire FP stack, a cleaner solution is to use the f init instruction that does not take any arguments. It resets the FP unit, frees all the registers, and resets the stack pointer. The finit instruction ensures that an unrelated function can start from a clean state. ",
        "page_idx": 216
    }
]