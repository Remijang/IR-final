[
    {
        "type": "text",
        "text": "3.1.1 Software Developer\u2019s Perspective ",
        "text_level": 1,
        "page_idx": 93
    },
    {
        "type": "text",
        "text": "A human being understands natural languages such as English, Russian, and Spanish. With some additional training a human can also understand computer programming languages such as C or Java. However, a computer is a dumb machine as mentioned in Chapter 1. It is not smart enough to understand commands in a human language such as English, or even a programming language such as C. It only understands zeros and ones. Hence, to program a computer it is necessary to give it a sequence of zeros and ones. As a matter of fact, yesteryear programmers used to program computers by turning on or off a set of switches. Turning on a switch corresponded to a 1, and turning it off meant a 0. However, for today\u2019s massive multi-million line programs, this is not a feasible solution. We need a better method. ",
        "page_idx": 93
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 94
    },
    {
        "type": "text",
        "text": "Consequently, we need an automatic converter that can convert programs written in high level languages such as C or Java to a sequence of zeros and ones known as machine code. Machine code contains a set of instructions known as machine instructions. Each machine instruction is a sequence of zeros and ones, and instructs the processor to perform a certain action. A program that can convert a program written in a high level language to machine code is called a compiler(see Figure 3.1). ",
        "page_idx": 94
    },
    {
        "type": "text",
        "text": "Definition 24 ",
        "text_level": 1,
        "page_idx": 94
    },
    {
        "type": "text",
        "text": "A high level programming language such as $C$ or Java uses fairly complex constructs and statements. Each statement in these languages typically corresponds to a multitude of basic machine instructions. These languages are typically independent of the processor\u2019s ISA.   \n\u2022 A compiler is an executable program that converts a program written in a high level language to a sequence of machine instructions that are encoded using a sequence of zeros and ones. ",
        "page_idx": 94
    },
    {
        "type": "image",
        "img_path": "images/4fbbf0041c5159e2e42efe44b084149ac2d08128d2df98e5118767f29a391af3.jpg",
        "img_caption": [
            "Figure 3.1: The compilation process "
        ],
        "img_footnote": [],
        "page_idx": 94
    },
    {
        "type": "text",
        "text": "Note that the compiler is an executable program that typically runs on the machine that it is supposed to generate machine code for. A natural question that can arise is \u2013 who wrote the first compiler? See Trivia 1. ",
        "page_idx": 94
    },
    {
        "type": "text",
        "text": "Trivia 1 Who Wrote the First Compiler? If a programmer wrote the compiler in a high level language such as $C$ or Java, then she must have needed a compiler to compile it into machine code. However, she did not have a compiler with her at that point of time, because she was in the process of building one! Since she did not have a compiler, while building the compiler, how did she ultimately build it? This is an example of a chicken and egg problem. The classic chicken and egg problem poses a simple yet vexing question \u2013 did the chicken come first, or the egg come first? However, the chicken and egg problem has a solution that can be explained in terms of evolution. Scientists believe that early organisms reproduced by replication. At some point of time, due to a genetic mutation, an organism started to lay eggs. These organisms perpetuated, and started reproducing by only laying eggs. They evolved into all kinds of birds and reptiles, including chickens. ",
        "page_idx": 94
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 95
    },
    {
        "type": "text",
        "text": "We can explain this conundrum in a similar manner. The early programmers wrote simple compilers using machine instructions. A primitive compiler is just a sequence of zeros and ones. The early programmers then used these primitive compilers to compile programs. A special class of such programs were compilers themselves. They were written in high level languages and were better in terms of features, functionality and even performance. These first generation compilers were then used to create second generation compilers, and this process has continued till date. Nowadays, if a new processor is being developed, then it is not necessary to follow this procedure. Programmers, use another set of programs called cross-compilers. A cross-compiler runs on an existing processor, and produces an executable using the machine instructions of the new processor that is being developed. Once the new processor is ready, this program can be moved to the new processor and executed directly. It is thus possible to develop a large range of software including compilers for processors with new instruction sets. Hence, most modern day programmers do not have to write programs using raw machine instructions. ",
        "page_idx": 95
    },
    {
        "type": "text",
        "text": "Definition 25 ",
        "text_level": 1,
        "page_idx": 95
    },
    {
        "type": "text",
        "text": "A cross-compiler is a program that runs on machine A, and generates machine code for machine B. It is possible that B has a different ISA. ",
        "page_idx": 95
    },
    {
        "type": "text",
        "text": "Given the ubiquity of compilers, almost all programs are written in high level languages and compilers are used to convert them to machine code. However, there are important exceptions to this rule. Note that the role of a compiler is two-fold. First, it needs to correctly translate a program in a high level language to machine instructions. Second, it needs to produce efficient machine code that does not take a lot of space, and is fast. Consequently, algorithms in compilers have become increasingly complicated over the years. However, it is not always possible to meet these requirements. For example, in some scenarios, compilers might not be able to produce code that is fast enough, or has a certain kind of functionality that the programmer desires. Let us elaborate further. Algorithms in compilers are limited by the amount of analysis that they can perform on the program. For example, we do not want the process of compilation to be extremely slow. A lot of the problems in the area of compilers are computationally difficult to solve and are thus time consuming. Secondly, the compiler is not aware of the broad patterns in the code. For example, it is possible that a certain variable might only take a restricted set of values, and on the basis of this, it might be possible to optimize the machine code further. It is hard for a compiler to figure this out. However, smart programmers can sometimes produce machine code that is more optimal than a compiler because they are aware of some broad patterns of execution, and their brilliant brains can outsmart compilers. ",
        "page_idx": 95
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 96
    },
    {
        "type": "text",
        "text": "Secondly, it is also possible that a processor vendor might add new instructions in their ISA. In this case, compilers meant for older versions of the processor might not be able to leverage the new instructions. It will be necessary to add them manually in programs. Continuing this argument further, we observe that popular compilers such as gcc (GNU compiler collection) are fairly generic. They do not use all possible machine instructions that a processor provides while generating machine code. Typically, a lot of the missed out instructions are required by operating systems and device drivers (programs that interface with devices such as the printer, and scanner). These software programs require these instructions because they need low level access to the hardware. Consequently, system programmers have a strong incentive to occasionally bypass the compiler. ",
        "page_idx": 96
    },
    {
        "type": "text",
        "text": "In all of these situations, it is necessary for programmers to manually embed a sequence of machine instructions in a program. As mentioned, there are two primary reasons for doing so \u2013 efficiency and extra functionality. Hence, from the point of view of system software developers, it is necessary to know about machine instructions such that they can be more productive in their job. ",
        "page_idx": 96
    },
    {
        "type": "text",
        "text": "Now, our aim is to insulate modern day programmers from the intricate details of zeros and ones. Ideally, we do not want our programmers to program by manually turning on and off switches as was done fifty years ago. Consequently, a low level language called assembly language was developed (see Definition 26). Assembly language is a human readable form of machine code. Each assembly language statement typically corresponds to one machine instruction. Furthermore, it eases the burden on the programmer significantly by not forcing her to remember the exact sequence of zeros/ones that are needed to encode an instruction. ",
        "page_idx": 96
    },
    {
        "type": "text",
        "text": "Definition 26 ",
        "text_level": 1,
        "page_idx": 96
    },
    {
        "type": "text",
        "text": "\u2022 A low level programming language uses simple statements that correspond to typically just one machine instruction. These languages are specific to the ISA. \u2022 The term \u201cassembly language\u201d refers to a family of low level programming languages that are specific to each ISA. They have a generic structure that consists of a sequence of assembly statements. Typically, each assembly statement has two parts \u2013 (1) an instruction code that is a mnemonic for a basic machine instruction, and (2) and a list of operands. ",
        "page_idx": 96
    },
    {
        "type": "text",
        "text": "From a practical standpoint, it is possible to write stand-alone assembly programs and convert them to executables using a program called an assembler(Definition 27). Alternatively, it is also possible to embed snippets of assembly code in high level languages such as C or $\\mathrm { C } + +$ . The latter is more common. A compiler ensures that it is able to compile the combined program into machine code. The benefits of assembly languages are manifold. Since each line in assembly code corresponds to one machine instruction, it is as expressive as machine code. Because of this one to one mapping, we do not sacrifice efficiency by writing programs in assembly. Secondly, it is a human readable and elegant form of textually representing machine code. It makes it significantly easier to write programs using it, and it is also possible to cleanly embed snippets of assembly code in software written in high level languages such as C. The third advantage of assembly language is that it defines a level of abstraction over and above real machine code. It is possible that two processors might be compatible with the same variant of assembly language, but actually have different machine encodings for the same instruction. In this case, assembly programs will be compatible across both of these processors. ",
        "page_idx": 96
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "Definition 27 ",
        "text_level": 1,
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "An assembler is an executable program that converts an assembly program into machine code. ",
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "Example 20 ",
        "text_level": 1,
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "The core engines of high performance 3D games need to be optimized for speed as much as possible [Phelps and Parks, 2004]. Most compilers fail to produce code that runs fast enough. It becomes necessary for programmers to manually write sequences of machine instructions. ",
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "Example 21 ",
        "text_level": 1,
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "Vranas et al. [Vranas et al., 2006] describe a high performance computing application to study the structure of an atomic nucleus. Since the computational requirements are high, they needed to run their program on a supercomputer. They observed that the core of the program lies in a small set of functions that are just 1000 lines long. They further observed that compilers were not doing a good job in optimizing the output machine code. Consequently, they decided to write the important functions in assembly code, and obtained record speedups on a supercomputer. Durr et al. [Durr et al., 2009] subsequently used this framework to accurately calculate the mass of a proton and a neutron from first principles. The results were in complete agreement with experimentally observed values. ",
        "page_idx": 97
    }
]