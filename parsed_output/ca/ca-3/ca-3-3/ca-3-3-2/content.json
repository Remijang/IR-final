[
    {
        "type": "text",
        "text": "3.3.2 Model of the SimpleRisc Machine ",
        "text_level": 1,
        "page_idx": 110
    },
    {
        "type": "text",
        "text": "SimpleRisc assumes that we have 16 registers numbered $r 0 \\ldots r 1 5$ . The first 14 registers are general purpose registers, and can be used for any purpose within the program. Register $r 1 4$ is known as the stack pointer. We shall also refer to it as $s p$ . Register $r 1 5$ is known as the return address register, and it will also be referred as $r a$ . We shall discuss $s p$ and $r a$ , when we discuss how to implement functions in SimpleRisc . Each register is 32 bits wide. We assume a special internal register called f lags, which is not visible to the programmer. It contains two fields $f l a g s . E ( \\mathrm { e q u a l } )$ and $f l a g s . G T$ (greater than). $E$ is set to 1 if the result of a comparison is equality, and $G T$ is set to 1 if a comparison concludes that the first operand is greater than the second operand. The default values of both the fields are 0. ",
        "page_idx": 110
    },
    {
        "type": "text",
        "text": "Each instruction is encoded into a 32-bit value, and it requires 4 bytes of storage in memory. SimpleRisc assumes a memory model similar to the Von Neumann machine augmented with registers as described in Section 1.7.3. The memory is a large array of bytes. A part of it saves the program and the rest of the memory is devoted to storing data. We assume that multibyte data types such as integers are saved in the little endian format. ",
        "page_idx": 110
    }
]