3.3.11 Function Call/Return Instructions

SimpleRisc has two instructions for functions – call and ret. The call instruction takes a single argument – the label of the first instruction of the function. It transfers control to the label and saves the return address in register  . The ret instruction transfers the contents of  to the PC. It is a 0-address instruction because it does not require any operands. Table 3.9 shows the semantics of these instructions. In Table 3.9, we assume that the address method provides the address of the first instruction of the f oo function. Secondly, the return address is equal to  because we assume that each instruction is 4 bytes long. call and ret can be thought of as branch instructions because they change the value of the PC. However, they are not dependent on any condition such as the value stored in a register. Hence, these instructions are conceptually unconditional branch instructions.

Example 32

Write a function in SimpleRisc that adds the values in registers r0, and  , and saves the result in r2.

Answer:

SimpleRisc .foo: add r2, r0, r1 ret

Example 33

Write a function, f oo, in SimpleRisc that adds the values in registers r0, and  , and saves the result in  . Then write another function that invokes this function. The invoking function needs to first set r0 to 3, r1 to 5, and then invoke foo. After foo returns, it needs to add 10 to the result of foo, and finally save the sum in r3.

Answer:

SimpleRisc

.foo: add r2, r0, r1 ret   
.main: mov r0, 3 mov r1, 5 call .foo add r3, r2, 10

Example 34

Write a recursive function to compute the factorial of 10 that is initially stored in r0. Save the result in r1.

Answer: Let us first take a look at a small  program to compute the factorial of the variable num.

C

int factorial(int num) { if (num <= 1) return 1; return num \* factorial(num - 1);   
}   
void main() {

int result  factorial(10);

}

Let us now try to convert this program to SimpleRisc . SimpleRisc   
.factorial: cmp r0, 1 /\* compare (1,num) \*/ beq .return bgt .continue b .return   
.continue: sub sp, sp, 8 /\* create space on the stack \*/ st r0, [sp] /\* push r0 on the stack \*/ st ra, 4[sp] /\* push the return address register \*/ sub r0, r0, 1  call .factorial /\* result will be in r1 \*/ ld r0, [sp] /\* pop r0 from the stack \*/ ld ra, 4[sp] /\* restore the return address \*/ mul r1, r0, r1 /\* factorial(n) = n \* factorial(n-1) \*/ add sp, sp, 8 /\* delete the activation block \*/ ret   
.return: mov r1, 1 ret   
.main: mov r0, 10 call .factorial

This example uses the stack to save and restore the value of  . In this case, the caller saves and restores its registers.