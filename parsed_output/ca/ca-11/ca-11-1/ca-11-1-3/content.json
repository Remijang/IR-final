[
    {
        "type": "text",
        "text": "11.1.3 Temporal and Spatial Locality of Instruction Accesses ",
        "text_level": 1,
        "page_idx": 510
    },
    {
        "type": "text",
        "text": "The standard approach for tackling this problem, is to measure and characterize locality in a representative set of programs such as the SPEC benchmarks(see Section 10.9.4). Let us first start out by dividing memory accesses into two broad types \u2013 instruction and data. Instruction accesses are much easier to analyze informally. Hence, let us look at it first. ",
        "page_idx": 510
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 511
    },
    {
        "type": "text",
        "text": "Let us consider a typical program. It has assignment statements, decision statements (if,else), and loops. Most of the code in large programs is part of loops or some pieces of common code. There is a standard rule of thumb in computer architecture, which states that 90% of the code runs for $1 0 \\%$ of time, and $1 0 \\%$ of the code runs for 90% of the time. Let us consider a word processor. The code to process the user\u2019s input, and show the result on the screen runs much more frequently than the code for showing the help screen. Similarly, for scientific applications, most of the time is spent in a few loops in the program. In fact for most common applications, we find this pattern. Hence, computer architects have concluded that temporal locality for instruction accesses holds for an overwhelming majority of programs. ",
        "page_idx": 511
    },
    {
        "type": "text",
        "text": "Let us now consider spatial locality for instruction accesses. If there are no branch statements, then the next program counter is the current program counter plus 4 bytes for an ISA such as SimpleRisc . We consider two accesses to be \u201csimilar\u201d, if their memory addresses are close to each other. Clearly, we have spatial locality here. A majority of the instructions in programs are non-branches; hence, spatial locality holds. Moreover, a nice pattern in branches in most programs is that the branch target is actually not very far away. If we consider a simple if-then statement or for loop then the distance of the branch target is equal to the length of the loop or the if part of the statement. In most programs this is typically 10 to 100 instructions long, definitely not thousands of instructions long. Hence, architects have concluded that instruction memory accesses exhibit a good amount of spatial locality also. ",
        "page_idx": 511
    },
    {
        "type": "text",
        "text": "The situation for data accesses is slightly more complicated; however, not very different. For data accesses also we tend to reuse the same data, and access similar data items. Let us look at this in more detail. ",
        "page_idx": 511
    }
]