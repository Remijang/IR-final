[
    {
        "type": "text",
        "text": "13.2.5 Manchester Encoding ",
        "text_level": 1,
        "page_idx": 658
    },
    {
        "type": "text",
        "text": "Before proceeding to discuss Manchester encoding, let us differentiate between a physical bit, and a logical bit. Up till now we have assumed that they mean the same thing. However, this will cease to be true from now onwards. A physical bit such as a physical one or zero, is representative of the voltage across a link. For example, in an active high signaling method, a high voltage indicates that we are transmitting the bit, 1, and a low voltage (physical bit 0) indicates that we are transmitting the 0 bit. However, this ceases to be the case now because we assume that a logical bit (logical 0 or 1) is a function of the values of physical bits. For example, we can infer a logical 0, if the current and the previous physical bits are equal to 1 and 0, respectively. Likewise, we can have a different rule for inferring a logical 1. It is the job of the receiver to translate physical signals (or rather physical bits), into logical bits, and pass them to the higher layers of the I/O system. The next layer (data link layer discussed in Section 13.4) accepts logical bits from the physical layer. It is oblivious to the nature of the signaling, and the connotations of physical bits transmitted on the link. ",
        "page_idx": 658
    },
    {
        "type": "text",
        "text": "Let us now discuss one such mechanism known as Manchester encoding. Here, we encode logical bits as a transition of physical bits. Figure 13.10 shows an example. A $0  1$ transition of physical bits encodes a logical 1, and conversely a $1  0$ transition of physical bits encodes a logical 0. ",
        "page_idx": 658
    },
    {
        "type": "text",
        "text": "A Manchester code always has a transition to encode data. Most of the time at the middle of a bit period, we have a transition. If there is no transition, we can conclude that no signal is being transmitted and the link is idle. One advantage of Manchester encoding is that it is easy to decode the information that is sent on the link. We just need to detect the nature of the transition. Secondly, we do not need external strobe signals to synchronize the data. The data is said to be self clocked. This means that we can extract the clock of the sender from the data, and ensure that the receiver reads in data at the same speed at which it is sent by the sender. ",
        "page_idx": 658
    },
    {
        "type": "image",
        "img_path": "images/b22de2ff76dd7450f29b5e5fc64e19125aae728375d9aa1253adcbb44908c345.jpg",
        "img_caption": [
            "Figure 13.10: Manchester code (example) "
        ],
        "img_footnote": [],
        "page_idx": 659
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 659
    },
    {
        "type": "text",
        "text": "Definition 148 ",
        "text_level": 1,
        "page_idx": 659
    },
    {
        "type": "text",
        "text": "A self clocked signal allows the receiver to extract the clock of the sender by examining the transition of the physical bits in the signal. If there are periodic transitions in the signal, then the period of these transitions is equal to the clock period of the sender, and thus the receiver can read in data at the speed at which it is sent. ",
        "page_idx": 659
    },
    {
        "type": "text",
        "text": "Manchester encoding is used in the IEEE 802.3 communication protocol that forms the basis of today\u2019s Ethernet protocol for local area networks. Critics argue that since every logical bit is associated with a transition, we unnecessarily end up dissipating a lot of power. Every single transition requires us to charge/discharge a set of capacitors associated with the link, the drivers, and associated circuitry. The associated resistive loss is dissipated as heat. Let us thus try to reduce the number of transitions. ",
        "page_idx": 659
    }
]