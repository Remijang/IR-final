[
    {
        "type": "text",
        "text": "13.6 Protocol Layer ",
        "text_level": 1,
        "page_idx": 686
    },
    {
        "type": "text",
        "text": "Let us now discuss the last layer in the I/O system. The first three layers ensure that a message is correctly delivered from one device to another in the I/O system. Let us now look at the level of a complete I/O request such as printing an entire page, scanning an entire document, or reading a large block of data from the hard disk. Let us consider the example of printing a document. ",
        "page_idx": 686
    },
    {
        "type": "text",
        "text": "Assume that the printer is connected to a USB port. The printer device driver starts out by instructing the processor to send the contents of the document to the buffers associated with the USB port. Let us assume that each such buffer is assigned a unique port address, and the entire document fits within the set of buffers. Moreover, let us assume that the device driver is aware that the buffers are empty. To send the contents of the document, the device driver can use a sequence of out instructions, or can use memory-mapped I/O. After transferring the contents of the document, the last step is to write the PRINT command to a pre-specified I/O port. The USB controller manages all the I/O ports associated with it, and ensures that messages sent to these ports are sent to the attached printer. The printer starts the job of printing after receiving the PRINT command from the USB controller. ",
        "page_idx": 686
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 687
    },
    {
        "type": "text",
        "text": "Let us now assume that the user clicks the print button for another document. Before sending the new document to the printer, the driver needs to ensure that the printer has finished printing the previous document. The assumption here is that we have a simple printer that can only handle one document at a time. There should thus be a method for the driver to know if the printer is free. ",
        "page_idx": 687
    },
    {
        "type": "text",
        "text": "Before looking at different mechanisms for the printer to communicate with its driver, let us consider an analogy. Let us consider a scenario in which Sofia is waiting for a letter to be delivered to her. If the letter is being sent through one of Sofia\u2019s friends, then Sofia can keep calling her friend to find out when she will be back in town. Once she is back, Sofia can go to her house, and collect the letter. Alternatively, the sender can send the letter through a courier service. In this case, Sofia simply needs to wait for the courier delivery boy to come and deliver the letter. The former mechanism of receiving messages is known as polling, and the latter is known as interrupts. Let us now elaborate. ",
        "page_idx": 687
    }
]