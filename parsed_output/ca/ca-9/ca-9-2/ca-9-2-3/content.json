[
    {
        "type": "text",
        "text": "9.2.3 Operand Fetch Unit ",
        "text_level": 1,
        "page_idx": 366
    },
    {
        "type": "text",
        "text": "SimpleRisc Instruction Format ",
        "text_level": 1,
        "page_idx": 366
    },
    {
        "type": "text",
        "text": "Let us quickly recapitulate our knowledge about the SimpleRisc instruction format. The list of SimpleRisc instructions is shown in Table 9.2 along with their opcodes, and instruction format. SimpleRisc is a simple and regular instruction set. It has three classes of instruction formats as shown in Table 9.3. The instruction formats are branch, register, and immediate. The add, sub, mul, div, mod, and, or, cmp, not, lsl, lsr, asr, and mov instructions can have either the register or the immediate format. This is decided by the $I$ bit ( $2 7 ^ { t h }$ bit) in the instruction. The cmp instruction does not have a destination register. The mov and not instructions have only one source operand. For further details, the reader can refer to Table 9.2, or Section 3.3. ",
        "page_idx": 366
    },
    {
        "type": "image",
        "img_path": "images/e0fdfa6a6c11b4fe99006befe588b9a8acf06a13868d225a5f6dcb9133df125d.jpg",
        "img_caption": [
            "Figure 9.4: Relationship between the data path and control path "
        ],
        "img_footnote": [],
        "page_idx": 367
    },
    {
        "type": "table",
        "img_path": "images/300be3bff269a76a4d17895d8c9a7f371735e0a4f1d9e2dac4016621364a91d7.jpg",
        "table_caption": [
            "Table 9.2: List of instruction opcodes "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Inst.</td><td>Code</td><td>Format</td><td>Inst.</td><td>Code</td><td>Format</td></tr><tr><td>add</td><td>00000</td><td>add rd, rs1, (rs2/imm)</td><td>lsl</td><td>01010</td><td>lsl rd, rs1, (rs2/imm)</td></tr><tr><td>sub</td><td>00001</td><td>sub rd, rs1, (rs2/imm)</td><td>lsr</td><td>01011</td><td>lsr rd, rs1, (rs2/imm)</td></tr><tr><td>mul</td><td>00010</td><td>mul rd, rs1, (rs2/imm)</td><td>asr</td><td>01100</td><td>asr rd, rs1, (rs2/imm)</td></tr><tr><td>div</td><td>00011</td><td>div rd, rs1, (rs2/imm)</td><td>nop</td><td>01101</td><td>nop</td></tr><tr><td>mod</td><td>00100</td><td>mod rd,rsl, (rs2/imm)</td><td>ld</td><td>01110</td><td>ld rd, imm[rs1]</td></tr><tr><td>cmp</td><td>00101</td><td>cmp rs1, (rs2/imm)</td><td>st</td><td>01111</td><td>st rd,imm[rs1]</td></tr><tr><td>and</td><td>00110</td><td>and rd, rsl, (rs2/imm)</td><td>beq</td><td>10000</td><td>beq offset</td></tr><tr><td>or</td><td>00111</td><td>or rd,rs1, (rs2/imm)</td><td>bgt</td><td>10001</td><td>bgt offset</td></tr><tr><td>not</td><td>01000</td><td>not rd, (rs2/imm)</td><td>b</td><td>10010</td><td>b offset</td></tr><tr><td>mov</td><td>01001</td><td>mov rd, (rs2/imm)</td><td>call</td><td>10011</td><td>call offset</td></tr><tr><td></td><td></td><td></td><td>ret</td><td>10100</td><td>ret</td></tr></table></body></html>\n\n",
        "page_idx": 367
    },
    {
        "type": "table",
        "img_path": "images/839899b7c2f60bf33af696a6f597ad3c96ce9860aacb8686312eea39a0f254ff.jpg",
        "table_caption": [
            "Table 9.3: Summary of instruction formats "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Format</td><td colspan=\"7\">Definition</td></tr><tr><td>branch</td><td>op (28-32)</td><td>offset (1-27)</td><td></td><td colspan=\"4\"></td></tr><tr><td>register</td><td>op (28-32)</td><td>I (27)</td><td>rd (23-26)</td><td>rs1 (19-22)</td><td>rs2 (15-18)</td><td></td><td></td></tr><tr><td>immediate</td><td>op (28-32)</td><td>I (27)</td><td>rd (23-26)</td><td>rs1</td><td>(19-22)</td><td>imm (1-18)</td><td></td></tr><tr><td colspan=\"8\">op \u2192opcode, off set\u2192branch offset,I \u2192immediate bit,rd \u2192destination register</td></tr><tr><td colspan=\"8\">rs1 \u2192 source register 1, rs2 \u2192 source register 2,imm \u2192 immediate operand</td></tr></table></body></html>\n\n",
        "page_idx": 367
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 368
    },
    {
        "type": "text",
        "text": "The Operand Fetch Unit ",
        "text_level": 1,
        "page_idx": 368
    },
    {
        "type": "text",
        "text": "The operand fetch unit has two important functions \u2013 (1) calculate the values of the immediate operand and the branch target by unpacking the offset embedded in the instruction, and (2) read the source registers. ",
        "page_idx": 368
    },
    {
        "type": "text",
        "text": "Computation of the Immediate Operand and the Branch Target ",
        "text_level": 1,
        "page_idx": 368
    },
    {
        "type": "image",
        "img_path": "images/3a19c4052e1dc45a4e0b56dc9a68ec9f1453562e33fcf528ab31022dca1734f5.jpg",
        "img_caption": [
            "Figure 9.5: Calculation of the immediate operand and the branch target "
        ],
        "img_footnote": [],
        "page_idx": 368
    },
    {
        "type": "text",
        "text": "Figure 9.5 shows the circuit for calculating the immediate operand, and the branch target. To calculate the immediate operand, we need to first extract the imm field (bits 1-18) from the instruction. Subsequently, we extract the lower 16 bits, and create a 32-bit constant in accordance with the modifiers (bit 17, and 18). When no modifier is specified, we extend the sign of the 16-bit number to make it a 32-bit number. For the $u$ modifier, we fill the top 16 bits with 0s, and for the $h$ modifier, we shift the 16-bit number, 16 positions to the left. The newly constructed 32-bit value is termed as immx. ",
        "page_idx": 368
    },
    {
        "type": "text",
        "text": "Similarly, we can compute the signal, branchT arget (branch target for all types of branches excluding ret). We need to first extract the 27 bit offset (bits 1 to 27) from the instruction. Note that these 27 bits represent the offset in terms of memory words as described in Section 3.3.14. Thus, we need to shift the offset to the left by 2 bits to make it a 29 bit number, and then extend its sign to make it a 32-bit number. Since we use PC-relative addressing in SimpleRisc , to obtain the branch target we need to add the shifted offset to the PC. The branch target can either be derived from the instruction (branchT arget signal), as we have just described, or in the case of a ret instruction, the branch target is the contents of the ra register. In this case, the ra register comes from the register file. We choose between both the values in the next stage, and compute branchP C. ",
        "page_idx": 368
    },
    {
        "type": "text",
        "text": "There is a need to make an important observation here. We are calculating branchT arget and immx for all instructions. However, any instruction in the SimpleRisc format will only require at the most one of these fields (branchT arget or immx). The other field will have junk ",
        "page_idx": 368
    },
    {
        "type": "text",
        "text": "values. Nevertheless, it does not hurt to pre-compute both the values in the interest of speed.   \nIt is necessary to ensure that the correct value is used in the later stages of processing. ",
        "page_idx": 369
    },
    {
        "type": "text",
        "text": "Reading the Registers ",
        "text_level": 1,
        "page_idx": 369
    },
    {
        "type": "image",
        "img_path": "images/1cbace5bfdc7af79aff5772a17906050c4930fa3d05adba4fddc209380f65a6e.jpg",
        "img_caption": [
            "Figure 9.6: Reading the Source Registers "
        ],
        "img_footnote": [],
        "page_idx": 369
    },
    {
        "type": "text",
        "text": "In parallel, we can read the values of the source registers as shown. Here, also we follow the same strategy. We read more than what we require. Critics might argue that this approach wastes power. However, there is a reason for doing so. Extra circuitry is required to decide if a given operand is actually required. This has an adverse impact in terms of area, and time. The operand fetch unit becomes slower. Hence, we prioritize the case of simplicity, and read all the operands that might be required. ",
        "page_idx": 369
    },
    {
        "type": "text",
        "text": "The circuit for reading the values of source registers is shown in Figure 9.6. The register file has 16 registers, two read ports, and one write port (not shown in the figure). A port is a point of connection (an interface) in a hardware structure, and is used for the purpose of either entering inputs, or reading outputs. We can have a read port (exclusively for reading data), a write port (exclusively for writing data), and a read-write port (can be used for both reading and writing). ",
        "page_idx": 369
    },
    {
        "type": "text",
        "text": "Definition 59 ",
        "text_level": 1,
        "page_idx": 369
    },
    {
        "type": "text",
        "text": "$A$ port is a point of connection in a hardware structure, and is used for the purpose of either entering inputs, or reading outputs. We can have a read port (exclusively for reading data), a write port (exclusively for writing data), and a read-write port (can be used for both reading and writing). ",
        "page_idx": 369
    },
    {
        "type": "text",
        "text": "For the first register operand, op1, we have two choices. For ALU, and memory instructions, we need to read the first source register, rs1 (bits 19 to 22). For the ret instruction, we need to read the value of the return address register, $r a$ . To choose between the contents of the field, rs1, in the instruction and $r a$ , we use a multiplexer. The multiplexer is controlled by a signal, isRet. If isRet (is return) is equal to 1, then we choose $r a$ , otherwise we choose rs1. This value is an input to the register file\u2019s first read port. We term the output of the first read port as op1 (operand 1). ",
        "page_idx": 369
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 370
    },
    {
        "type": "text",
        "text": "We need to add a similar multiplexer for the second read port of the register file too. For all the instructions other than the store instruction, the second source register is specified by the $r s 2$ (bits 15 to 18) field in the instruction. However, the store instruction is an exception. It contains a source register in rd (bits 23 to 26). Recall that we had to make this bitter choice at the cost of introducing a new instruction format. Since we have a very consistent instruction format (see Table 9.3) the process of decoding is very simple. To extract different fields of the instruction (rs1, rs2, opcode, and imm) we do not need additional logic elements. We need to save each bit of the instruction in a latch, and then route the wires appropriately. ",
        "page_idx": 370
    },
    {
        "type": "text",
        "text": "Coming back to our original problem of choosing the second register operand, we observe that we need to choose the right source register \u2013 $r s 2$ or $^ { r d }$ . The corresponding multiplexer is controlled by the isSt (is store) signal. We can quickly find out if the instruction is a store by using a set of logic gates to verify if the opcode is equal to 01111. The result of the comparison is used to set the isSt signal. The corresponding output of the register file is termed as op2 (operand 2). ",
        "page_idx": 370
    },
    {
        "type": "image",
        "img_path": "images/88b30604883bae3f3d0dc0b4aa3e23d7a1581988b071d4d9fe71ff5328992a04.jpg",
        "img_caption": [
            "Figure 9.7: Operand Fetch Stage "
        ],
        "img_footnote": [],
        "page_idx": 370
    },
    {
        "type": "text",
        "text": "Lastly, it is necessary to send the opcode (5 bits), and the immediate bit (1 bit) to the control unit such that it can generate all the control signals. The complete circuit for the operand fetch unit is shown in Figure 9.7. op1, op2, branchT arget, and immx are passed to the execute unit. ",
        "page_idx": 371
    }
]