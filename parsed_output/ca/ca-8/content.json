[
    {
        "type": "text",
        "text": "In Chapter 7, we described the basic circuits for logical operations and storage elements. In this chapter, we will use this knowledge to design hardware algorithms for arithmetic operations. This chapter also requires the knowledge of binary 2\u2019s complement numbers and floating point numbers that we gained in Chapter 2. The plan for this chapter is as follows. ",
        "page_idx": 307
    },
    {
        "type": "text",
        "text": "In the first part, we shall describe algorithms for integer arithmetic. Initially, we describe the basic algorithms for adding two binary numbers. It turns out that there are many ways of doing these basic operations, and each method has its own set of pros and cons. Note that the problem of binary subtraction is conceptually the same as binary addition in the 2\u2019s complement system. Consequently, we do not need to treat it separately. Subsequently, we shall see that the problem of adding $n$ numbers is intimately related to the problem of multiplication, and it is a fast operation in hardware. Sadly, very efficient methods do not exist for integer division. Nevertheless, we shall consider two popular algorithms for dividing positive binary numbers. ",
        "page_idx": 307
    },
    {
        "type": "text",
        "text": "After covering integer arithmetic, we shall look at methods for floating point (numbers with a decimal point) arithmetic. Most of the algorithms for integer arithmetic can be ported to the realm of floating point numbers with minor modifications. As compared to integer division, floating point division can be done very efficiently. ",
        "page_idx": 307
    }
]