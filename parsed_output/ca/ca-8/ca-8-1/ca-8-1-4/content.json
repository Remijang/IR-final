[
    {
        "type": "text",
        "text": "8.1.4 Carry Select Adder ",
        "text_level": 1,
        "page_idx": 315
    },
    {
        "type": "text",
        "text": "A ripple carry adder is extremely slow for large values of $n$ such as 32 or 64. Consequently, we desire faster implementations. We observe that in hardware we can potentially do a lot of tasks in parallel. Unlike purely sequential C or Java programs where one statement executes after the next, hundreds or even thousands of actions can be performed in parallel in hardware. Let us use this insight to design a faster adder that runs in $O ( { \\sqrt { n } } )$ time. ",
        "page_idx": 315
    },
    {
        "type": "text",
        "text": "Let us consider the problem of adding two numbers $A$ and $B$ represented as $A _ { 3 2 } \\ldots A _ { 1 }$ and $B _ { 3 2 } \\ldots B _ { 1 }$ , respectively. We start by dividing the set of bits into blocks of let\u2019s say 4 bits. The blocks are shown in Figure 8.6. Each block contains a fragment of $A$ and a fragment of $B$ . We need to add the two fragments by considering the input carry to the block, and generate a set of sum bits and a carry out. This carry out is an input carry for the subsequent block. ",
        "page_idx": 315
    },
    {
        "type": "image",
        "img_path": "images/404622e1a66af0d44edbbbdf5896886735bb35a1bfeb853cc3120641d4b38dfc.jpg",
        "img_caption": [
            "Figure 8.6: Dividing the numbers into blocks "
        ],
        "img_footnote": [],
        "page_idx": 315
    },
    {
        "type": "text",
        "text": "In this case, a carry is propagated between blocks rather that between bit pairs. To add the pair of fragments within a block, we can use a simple ripple carry adder. For small values of $n$ , ripple carry adders are not very inefficient. However, our basic problem of carry propagation has not been solved yet. ",
        "page_idx": 315
    },
    {
        "type": "text",
        "text": "Let us now introduce the basic idea of the carry select adder. We divide the computation into two stages. In the first stage, we generate two results for each block. One result assumes that the input carry is 0, and the other result assumes that the input carry is 1. A result consists of 4 sum bits, and a carry out. We thus require two ripple carry adders per block. Note that each of these additions are independent of each other and thus can proceed in parallel. ",
        "page_idx": 315
    },
    {
        "type": "text",
        "text": "Now, at the beginning of the second stage two sets of results for the $n ^ { t h }$ block are ready. If we know the value of the input carry, $C _ { i n }$ produced by the $( n - 1 ) ^ { t h }$ block, then we can quickly calculate the value of the output carry, $C _ { o u t }$ , by using a simple multiplexer. We do not need to perform any extra additions. The inputs to the multiplexer are the values of $C _ { o u t }$ generated by the two ripple carry adders that assume $C _ { i n }$ to be 0 and 1, respectively. When the correct value of $C _ { i n }$ is available, it can be used to choose between the two values of $C _ { o u t }$ . This process is much faster than adding the two blocks. Simultaneously, we can also choose the right set of sum bits. Then we need to propagate the output carry, $C _ { o u t }$ , to the $( n + 1 ) ^ { t h }$ block. ",
        "page_idx": 315
    },
    {
        "type": "text",
        "text": "Let us now evaluate the time complexity of the carry select adder. Let us generalize the problem and assume the block size to be $k$ . The first stage takes $O ( k )$ time because we add each pair of fragments within a block using a regular ripple carry adder, and all the pairs of fragments are added in parallel. The second phase takes time $O ( n / k )$ . This is because we have $\\lceil n / k \\rceil$ blocks, and we assume that it takes 1 time unit for the input carry of a block to choose the right output carry in the multiplexer. The total time is thus: $O ( k + n / k )$ . Note that we are making some simplistic assumptions regarding the constants. However, our final answer will not change if we make our model more complicated. ",
        "page_idx": 315
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 316
    },
    {
        "type": "text",
        "text": "Let us now try to minimize the time taken. This can be done as follows: ",
        "page_idx": 316
    },
    {
        "type": "equation",
        "text": "$$\n\\begin{array} { c } { { \\displaystyle \\frac { \\partial ( k + n / k ) } { \\partial k } = 0 } } \\\\ { { \\displaystyle \\Rightarrow 1 - \\frac { n } { k ^ { 2 } } = 0 } } \\\\ { { \\displaystyle \\Rightarrow k = \\sqrt { n } } } \\end{array}\n$$",
        "text_format": "latex",
        "page_idx": 316
    },
    {
        "type": "text",
        "text": "Thus, the optimal block size is equal to $\\sqrt { n }$ . The total time complexity is thus $O ( { \\sqrt { n } } + { \\sqrt { n } } )$ , which is the same as $O ( { \\sqrt { n } } )$ . ",
        "page_idx": 316
    }
]