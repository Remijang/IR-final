2.1.6 Implementing Boolean Functions

Let us now consider a generic boolean function  . To implement it we need to create a circuit out of logic gates. Our aim should be to minimize the number of gates to save area, power, and time. Let us first look at a brute force method of implementing any Boolean function.

Simple Method

We can construct the truth table of the function, and then try to realize it with an optimal number of logic gates. The reason we start from a truth table is as follows. In some cases, the Boolean function that we are trying to implement might not be specified in a concise form. It might be possible to simplify it significantly. Secondly, using truth tables ensures that the process can be automated. For example, let us consider the following truth table of some function,  . We show only those lines that evaluate to 1.

Let us consider the first line. It can be represented by the Boolean function  . Similarly, the second and third lines can be represented as  and  , respectively. Thus, the function can be represented as:

We see that we have represented the function as an OR function of several terms. This representation is known as a sum-of-products representation, or a representation in the canonical form. Each such term is known as a minterm. Note that in a minterm, each variable appears only once. It is either in its original form or in its complemented form.

Definition 17 Let us consider a Boolean function  with n arguments.

minterm A minterm is an AND function on all n Boolean variables, where each variable appears only once (either in its original form or in its complemented form). A minterm corresponds to one line in the truth table, whose result is 1.

Canonical representation It is a Boolean formula, which is equivalent to the function  . It computes an OR operation of a set of minterms.

To summarize, to implement a truth table, we first get a list of minterms that might evaluate to a logical 1 (true), then create a canonical representation, and then realize it with logic gates. To realize the canonical representation using logic gates, we need to realize each minterm separately, and then compute an OR operation.

This process works, but is inefficient. The formula:  , can be simplified as  . Our simple approach is not powerful enough to simplify this formula.

Karnaugh Maps

Instead of directly converting the canonical representation into a circuit, let us build a structure called a Karnaugh map. This is a rectangular grid of cells, where each cell represents one minterm. To construct a Karnaugh map, let us first devise a method of numbering each minterm. Let us first represent all minterms such that the order of variables in them is the same (original or complemented). Second, if a variable is not complemented, then let us represent it by 1, otherwise, let us represent it by 0. Table 2.7 shows the representation of all the possible 8 minterms in a three variable function.

Now, given the representation of a minterm we use some bits to specify the row in the Karnaugh map, and the rest of the bits to specify the column. We number the rows and columns such that adjacent rows or columns differ in the value of only one variable. We treat the last row, and the first row as adjacent, and likewise, treat the first and last columns as adjacent. This method of numbering ensures that the difference in representation across any two adjacent cells (same row, or same column) in the Karnaugh map is in only one bit. Moreover, this also means that the corresponding minterms differ in the value of only one variable. One minterm contains the variable in its original form, and the other contains it in its complemented form.

Now, let us proceed to simplify or minimize the function. We construct the Karnaugh map as shown in Figure 2.2 for our simple function  . We mark all the cells(minterms) that are 1 using a dark color. Let us consider the first minterm,  . Its associated index is 110. We thus, locate the cell 110 in the Karnaugh map, and mark it. Similarly, we mark the cells for the other minterms â€“  , and  .

We see that we have three marked cells. Furthermore, since adjacent cells differ in the value of only one variable, we can combine them to a single Boolean expression. In Figure 2.2, we try to combine the cells with indices 110, and 111. They differ in the value of the Boolean variable,  . After combining them, we have the boolean expression:  . We have thus replaced two minterms by a smaller yet equivalent Boolean expression. We were able to combine the two adjacent cells, because they represented a logical OR of the Boolean expressions, which had the variable  in both its original and complemented form. Hence, the function  gets minimized to  .

Instead of combining, two cells in the same column, let us try to combine two cells in the same row as shown in Figure 2.3. In this case, we combine the minterms,  , and  . Since the variable  is present in both its original and complemented forms, we can eliminate it. Thus, the Boolean expression denoting the combination of the cells is  . Hence, function  is equal to  . We can readily verify that both the representations for   and  , are equivalent and optimal in terms of the number of Boolean terms.

Note that we cannot arbitrarily draw rectangles in the Karnaugh map. They cannot include any minterm that evaluates to 0 in the truth table. Secondly, the size of each rectangle needs to be a power of 2. This is because to remove  variables from a set of  minterms, we need to have all combinations of the  variables in the rectangle. It thus needs to have  minterms.

To minimize a function, we need to draw rectangles that are as large as possible. It is possible that two rectangles might have an overlap. However, one rectangle should not be a strict subset of the other.