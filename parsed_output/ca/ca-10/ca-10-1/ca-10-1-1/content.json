[
    {
        "type": "text",
        "text": "10.1.1 The Notion of Pipelining ",
        "text_level": 1,
        "page_idx": 413
    },
    {
        "type": "text",
        "text": "Issues with a Single-Cycle Processor ",
        "text_level": 1,
        "page_idx": 413
    },
    {
        "type": "text",
        "text": "We assumed that our hardwired processor presented in Section 9.2 takes a single cycle to fetch, execute, and write the results of an instruction to either the register file or memory. At an electrical level, this is achieved by signals flowing from the fetch unit to ultimately the register writeback unit via other units. It takes time for electrical signals to propagate from one unit to the other. ",
        "page_idx": 413
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 414
    },
    {
        "type": "text",
        "text": "For example, it takes some time to fetch an instruction from the instruction memory. Then it takes time to read values from the register file, and to compute the results with the ALU. Memory access and writing the results back to the register file are also fairly lengthy operations. We need to wait for all of these individual sub-operations to complete, before we can begin processing the next instruction. In other words, this means that there is a significant amount of idleness in our circuit. When the operand fetch unit is doing its job, all other units are idle. Likewise, when the ALUs are active, all the other units are inactive. If we assume that each of the five stages (IF,OF,EX,MA,RW) takes the same amount of time, then at any instant, about 80% of our circuit is idle! This represents a waste in computational power, and idling resources is definitely not a good idea. ",
        "page_idx": 414
    },
    {
        "type": "text",
        "text": "If we can find a method to keep all the units of a chip busy, then we can increase the rate at which we execute instructions. ",
        "page_idx": 414
    }
]