10.8.3 Precise Exceptions

Let us now discuss how we need to handle interrupts and exceptions. The processor needs to clearly stop what it is currently doing, and jump to the interrupt handling routine. After handling the interrupt, and performing the desired action, it needs to come back and start from exactly the same point in the program, at which it had stopped. Let us now define the notion of a precise exception. The term “precise exception” is also used in the case of interrupts. We can think of it as a generic term for all kinds of interrupts and exceptions.

Definition of Precise Exceptions

At any point of time, a program will typically have multiple instructions in the pipeline with different PCs. When the processor encounters an interrupt, it needs to branch to the starting location of the interrupt handler. To facilitate this process, it can have an interrupt handler table. This table typically stores a list of interrupt types, and the starting PCs of their interrupt handlers. The processor uses this table to branch to the appropriate interrupt handler. After finishing the processing of the interrupt handler, it needs to come back to exactly the same point in the original program. In other words, the original program should not be aware of the fact that another program such as the interrupt handler executed in the middle. This entire process needs to be orchestrated very carefully.

Let us elaborate. Assume that a program,  , is executing on the processor. Let us record all its dynamic instructions that leave the pipeline after successfully completing their execution, and number them  . A dynamic instruction is the instance of an instruction created by the processor. For example, if a loop has 5 instructions, and executes 100 times, then we have 500 dynamic instructions. Furthermore, an instruction completes its execution when it finishes its job and updates the state of the processor (registers or memory). A store instruction completes in the MA stage, and instructions with a destination register complete in the RW stage. All other instructions, are assumed to complete in the MA stage. The nop instruction is excluded from this discussion. Let  be the last instruction in  that completes its execution before the first instruction in the interrupt handler completes its execution. We wish to ensure that at the time that  leaves the pipeline, all the instructions in  before  have completed their execution and left the pipeline, and no instruction in  after  has completed or will complete its execution before the program resumes. Let the set of completed instructions at this point of time (when  leaves the pipeline) be  . Formally, we have:

An interrupt or exception implemented in this manner is said to be precise.

Definition 79

An interrupt or exception is precise if the following conditions are met:

Condition 1: Let  be the last dynamic instruction in the original program,  , that completes its execution before the first instruction in the interrupt handler completes its execution. Let  leave the pipeline at time,  . At  , all instructions  (  have also completed their execution.

Condition 2: No instruction after  in  completes its execution before all the instructions in the interrupt handler complete, and the program resumes execution.

Condition 3: After the interrupt handler finishes, we can seamlessly start executing all the instructions starting from  (if it has not completed successfully) or  .

When the interrupt handler returns, it needs to start executing instruction,  . For some special types of interrupts/ exceptions it might be required to re-execute  . Secondly, the register state (values of all the registers) needs to be restored before the original program,  , starts executing again. We can thus ensure that a processor can seamlessly switch to an interrupt handler and back without violating the correctness of the program.

Marking Instructions

Let us now discuss how to implement precise exceptions. Let us look at the three conditions in Definition 79 in more detail.

When an interrupt arrives, we can have at the most 5 instructions in the pipeline. We can designate one of these instructions as the last instruction before the interrupt handler executes such that the three conditions outlined in Definition 79 are satisfied. Now, we cannot designate the instruction in the RW stage as the last instruction (  ) because the instruction in the MA stage might be a store instruction. In the current cycle it will complete its execution, and thus condition 2 will get violated. However, we are free to designate instructions in any of the four other stages as the last instruction. Let us decide to mark the instruction in the MA stage as the last instruction.

Now, let us look at exceptions. Exceptions are typically caused by the erroneous execution of instructions. For example, in the IF stage we might fetch from an illegal address, try to perform an illegal arithmetic operation in the EX stage, or write to a non-existent address in the MA stage. In these situations it is necessary to take corrective action. The processor needs to invoke a dedicated exception handler. For example, a very common type of exception is a page fault as we shall discuss in Chapter 11. A page fault occurs when we try to read or write a memory address in a 4 KB block of memory for the first time. In this case, the operating system needs to read the 4 KB block from the hard disk and copy it to memory. The faulting instruction executes again, and it succeeds the second time. In this case, we need to re-execute the exception causing instruction  , and needless to say we need to implement a precise exception. To properly take care of exceptions, the first step is to mark an instruction, immediately after it causes an exception. For example, if we try to fetch from an uninitialized or illegal address we mark the instruction in the IF stage.

Making a Marked Instruction Proceed to the End of the Pipeline

Now, that we have marked instructions, we need to ensure two conditions. The first is that all the instructions before the marked instruction need to complete. The second is that all the instructions after the marked instruction should not be allowed to write to the register file, or the main memory. We should ideally not allow any writes to the flags register also. However, it is difficult to implement this functionality, because we are typically aware of interrupts at the end of the clock cycle. We shall devise an ingenious solution to handle updates to the flags register later.

For implementing a precise exception, we need to add an exception unit to our pipeline. Its role is to process interrupts and exceptions. Once an instruction is marked, it needs to let the exception unit know. Secondly, we envision a small circuit that sends a code identifying the exception/ interrupt to the exception unit. Subsequently, the exception unit needs to wait for the marked instruction to reach the end of the pipeline such that all the instructions before it complete their execution. Instructions fetched after the marked instruction need to be converted into bubbles. This needs to be done to ensure that instructions after a marked instruction do not complete. Once, the marked instruction reaches the end of the pipeline, the exception unit can load the PC with the starting address of the interrupt handler. The interrupt or exception handler can then begin execution. This mechanism ensures that asynchronous events such as interrupts and exceptions remain precise. Now, we have a mechanism to seamlessly transition to executing interrupt handlers. Sadly, we still do not have a mechanism to come back to exactly the same point in the original program, because we have not remembered the point at which we had left.