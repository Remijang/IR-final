[
    {
        "type": "text",
        "text": "10.7.2 Forwarding Paths in a Pipeline ",
        "text_level": 1,
        "page_idx": 443
    },
    {
        "type": "text",
        "text": "Let us discuss the basic tenets of forwarding that we shall broadly aim to follow. ",
        "page_idx": 443
    },
    {
        "type": "text",
        "text": "1. We add a forwarding path between a later stage and an earlier stage. 2. We forward a value as late as possible in the pipeline. For example, if a given value is not required in a given stage, and it is possible to get the value in a later stage from the producer instruction, then we wait to get the forwarded value in the later stage. ",
        "page_idx": 443
    },
    {
        "type": "text",
        "text": "Note that both of these basic tenets do not affect the correctness of programs. They simply allow us to eliminate redundant forwarding paths. Let us now systematically look at all the forwarding paths that we require in our pipeline. ",
        "page_idx": 443
    },
    {
        "type": "text",
        "text": "RW \u2192 MA : Let us consider the MA stage. It needs a forwarding path from the RW stage. Let us consider the code snippet shown in Figure 10.20 Here, instruction [2] needs the value of $r 1$ in the MA stage (cycle 5), and instruction [1] fetches the value of $r 1$ from memory by the end of cycle 4. Thus, it can forward its value to instruction [2] in cycle 5. ",
        "page_idx": 443
    },
    {
        "type": "text",
        "text": "$\\mathbf { R W } \\to \\mathbf { E X }$ : The code snippet shown in Figure 10.21 shows a load instruction that fetches the value of register $r 1$ by the end of cycle 4, and a subsequent ALU instruction that requires the value of $r 1$ in cycle 5. It is possible to forward the value because we are not going backwards in time. ",
        "page_idx": 443
    },
    {
        "type": "text",
        "text": "$\\mathbf { M A } \\to \\mathbf { E X } :$ The code snippet shown in Figure 10.22 shows an ALU instruction that computes the value of register $r 1$ by the end of cycle 3, and a consecutive ALU instruction that requires the value of $r 1$ in cycle 4. In this case also, it is possible to forward the data by adding an interconnection (forwarding path) between the MA and EX stages. ",
        "page_idx": 443
    },
    {
        "type": "image",
        "img_path": "images/dbd9709774124c3dabe73dea726ffdbee71bc156d23972ed27b9b93c5bd286d3.jpg",
        "img_caption": [
            "Figure 10.20: RW $$ MA forwarding "
        ],
        "img_footnote": [],
        "page_idx": 444
    },
    {
        "type": "image",
        "img_path": "images/d248bf27f20891e90f1f0c89ba4e4681ae018495865b1aaf375df66111ba4dd3.jpg",
        "img_caption": [
            "Figure 10.21: RW $$ EX forwarding "
        ],
        "img_footnote": [],
        "page_idx": 444
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 444
    },
    {
        "type": "text",
        "text": "$\\mathbf { R W } \\to \\mathbf { O F }$ : Typically the OF stage does not need forwarding paths because it does not have any functional units. Hence, it does not need to use a value immediately. We can thus forward the value later according to tenet 2. However, the only exception is forwarding from the RW stage. We cannot forward the value later because the instruction will not be there in the pipeline. Hence, it is necessary to add a forwarding path from the RW to the OF stage. An example of a code snippet that requires $R W  O F$ forwarding is shown in Figure 10.23. Instruction [1] produces the value of $r 1$ by reading its value from memory by the end of cycle 4. It then writes the value of $r 1$ to the register file in cycle 5. Meanwhile, instruction [4] tries to read the value of $r 1$ in the OF stage in cycle 5. Unfortunately, there is a conflict here. Hence, we propose to resolve the conflict by adding a forwarding path between the RW and OF stages. Thus, we prohibit instruction [4] from reading the register file for the value of $r 1$ . Instead, instruction [4] gets the value of $r 1$ from instruction [1] using the $R W  O F$ forwarding path. ",
        "page_idx": 444
    },
    {
        "type": "image",
        "img_path": "images/c79ec650aa0242978996d7fe84fc8967057da49086805e4029caf11e9928bfbf.jpg",
        "img_caption": [
            "Figure 10.22: MA $$ EX forwarding "
        ],
        "img_footnote": [],
        "page_idx": 445
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 445
    },
    {
        "type": "image",
        "img_path": "images/8078627d5d45a723b3b5e0abfc1c27d05a838b603cee94894ac17b86abc273b7.jpg",
        "img_caption": [
            "Figure 10.23: RW $$ OF forwarding "
        ],
        "img_footnote": [],
        "page_idx": 445
    },
    {
        "type": "text",
        "text": "Important Point 15 ",
        "text_level": 1,
        "page_idx": 445
    },
    {
        "type": "text",
        "text": "Forwarding from the RW to the OF stage is a very tricky operation. This is because the instruction in the RW stage is writing to the register file, and the instruction in the OF stage is also reading from the register file. If the value of the register is the same in these two instructions, then it is typically not possible to perform both the operations (read and write) in the same cycle. This is because reading and writing to the same SRAM cell can lead to incorrect operation of the circuit, and it is hard to ensure correctness. Consequently, it is a standard practice to allow the write from RW to go through, and cancel the register read operation issued by the instruction in the OF stage. Thus, this read operation does not go to the register file. Instead, the instruction in the OF stage gets the value of the register through the forwarding path. This strategy ensures that we do not have any remote chances of leaving data in an inconsistent state in the register file. The instruction in the OF stage also gets the right value of the operands. ",
        "page_idx": 445
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 446
    },
    {
        "type": "text",
        "text": "It is not necessary to add the following forwarding paths: MA OF, and $\\mathrm { E X }  \\mathrm { O F }$ . This is because, we can use the following forwarding paths ( $\\mathrm { R W } \\to \\mathrm { E X }$ ), and $\\mathrm { \\Delta M A } \\to \\mathrm { E X }$ ) instead. In accordance with tenet 2, we need to avoid redundant forwarding paths. Hence, we do not add the forwarding paths to the OF stage from the MA and EX stages. We do not add forwarding paths to the IF stage because at this stage, we have not decoded the instruction, and thus we do not know about its operands. ",
        "page_idx": 446
    }
]