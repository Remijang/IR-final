[
    {
        "type": "text",
        "text": "10.6.3 Ensuring the Branch-Lock condition ",
        "text_level": 1,
        "page_idx": 440
    },
    {
        "type": "text",
        "text": "Let us now assume that we have a branch instruction in the pipeline ( $b$ , beq, bgt, call, ret). If we have delay slots, then our data path is the same as that shown in Figure 10.16. We do not need to do any changes, because the entire complexity of execution has been offloaded to software. However, exposing the pipeline to software has its pros and cons as discussed in Table 10.1. If we add more stages in the pipeline, then existing executables might cease to work. To avoid this let us design a pipeline that does not expose delay slots to software. ",
        "page_idx": 440
    },
    {
        "type": "text",
        "text": "We have two design options here. The first is that we can assume that a branch is not taken till the outcome is decided. We can proceed to fetch the two instructions after a branch and process them. Once, the outcome of the branch is decided in the EX stage, we can take an appropriate action based on the outcome. If the branch is not taken, then the instructions fetched after the branch instruction, are on the correct path, and nothing more needs to be done. However, if the branch is taken, then it is necessary to cancel those two instructions, and replace them with pipeline bubbles ( $n O p$ instructions). ",
        "page_idx": 440
    },
    {
        "type": "text",
        "text": "The second option is to stall the pipeline till the outcome of the branch is decided, irrespective of the outcome. Clearly, the performance of this design is less than the first alternative that assumes that branches are not taken. For example, if a branch is not taken 30% of the time, then with the first design, we do useful work $3 0 \\%$ of the time. However, with the second option, we never do any useful work in the 2 cycles after a branch instruction is fetched. Hence, let us go with the first design in the interest of performance. We cancel the two instructions after the branch only if the branch is taken. We call this approach predict not taken, because we are effectively predicting the branch to be not taken. Later on if this prediction is found to be wrong, then can cancel the instructions on the wrong path. ",
        "page_idx": 440
    },
    {
        "type": "text",
        "text": "Important Point 14   \nIf the $P C$ of a branch instruction is equal to $p$ , then we choose to fetch the instructions at $p + 4$ , and $p + 8$ over the next two cycles. If the branch is not taken, then we resume execution. However, if the branch is taken, then we cancel these two instructions, and convert them to pipeline bubbles. ",
        "page_idx": 440
    },
    {
        "type": "text",
        "text": "We do not need to make any significant changes to the data path. We need a small branch hazard unit that takes an input from the EX stage. If the branch is taken, then in the next cycle it converts the instructions in the IF-OF and OF-EX stages to pipeline bubbles. The augmented data path with the branch interlock unit is shown in Figure 10.17. ",
        "page_idx": 440
    }
]