6.6.2 Further Reading

The most definitive resource for understanding the RISC-V ISA is its official manual[ris, ] that can be downloaded from https://riscv.org/. The site hosts two kinds of specifications: unprivileged specification and privileged specification. The privileged specification is for writing system software and operating systems. All the RISC-V specifications undergo active development and periodically new versions are released. A GitHub repository tracks the development of these specifications. It is accessible at https://github.com/riscv/. Readers can additionally refer to two classic books[Waterman, 2016, Patterson and Waterman, 2017] to learn more about the RISC-V ISA.

Readers should also read a few classical papers [Chen and Patterson, 2016, Greengard, 2020, Asanovi´c and Patterson, 2014, Mezger et al., 2022] to understand the history of RISC-V. This will give them a perspective of the developmental history of RISC-V and how this ISA came about in an era when instruction set development was considered to be an already solved problem that did not warrant further attention.

The next port of call can be papers that critically investigate the RISC-V ISA. The following references [Frolov et al., 2021, Kanter, 2016, Singh and Sarangi, 2021] will prove to be useful. They critique some design choices of the RISC-V ISA and compare it with other RISC and CISC ISAs (particularly reference [Singh and Sarangi, 2021]). In this context, readers should consider the formal specifications of RISC-V [Bourgeat et al., 2021] if they are considering implementing the ISA or designing a machine-accurate emulator for it.

Next, let us consider performance and implementation-related aspects. Researchers can look at architecture simulators that simulate RISC-V instructions and their vector extensions such as the simulator released by Ramirez et al. [Ramı´rez et al., 2020]. The next logical step is to study RISC-V processors such as BOOMv2 [Celio et al., 2017], RISC-V 2 [Patsidis et al., 2020] and the processor in reference [Stangherlin and Sachdev, 2022]. RISC-V processors are also being designed to operate in high-radiation environments like outer space. Many space research organizations are creating their bespoke RISC-V processors [Wessman et al., 2021].

Exercises

RISC-V Assembly Programming

Ex. 1 — Solve all the exercises listed at the end of the chapter on the ARM assembly language using RISC-V.

RISC-V Assembly Concepts

Ex. 2 — Why does RISC-V not have a mov instruction? What is the advantage of making this choice?

Ex. 3 — How does the assembler implement the  directive (pseudoinstruction)?

\* Ex. 4 — RISC-V does not have a flags register. However, it stores some information in the f csr register. Why is this required?

Ex. 5 — Explain the different rounding modes in RISC-V.

Ex. 6 — Why is it not a good idea to have instructions to load floating point immediates directly into registers (similar to addi and lui for integers)?

\* Ex. 7 — How does the assembler implement the la directive?

Ex. 8 — What is the advantage of maintaining the positions of the fields across the different RISC-V instruction encoding formats?

\* Ex. 9 — How do the opcode, funct3, funct5 and funct7 fields help in implementing RISCV extensions?

Ex. 10 — What is the advantage of making it easy to extract the sign bit of the immediate in the different formats, especially the B and J formats?

Design Problems

Ex. 11 — Extend the RISC-V assembler available on the author’s website to support the following extensions: double precision, vector, SIMD and cryptographic operations.

Ex. 12 — Cross-compile a piece of C code using the RISC-V and ARM cross-compilers. Use the -03 gcc optimization. Next, run them on the Qemu emulation engine. Compare the performance and find the reasons for the differences.

Part II