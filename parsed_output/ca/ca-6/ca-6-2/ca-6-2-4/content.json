[
    {
        "type": "text",
        "text": "6.2.4 Logical and Shift Instructions ",
        "text_level": 1,
        "page_idx": 235
    },
    {
        "type": "text",
        "text": "Table 6.7 shows a list of some prominent logical and shift instructions. The primary logical instructions are and, or and xor. We can attach an \u2018i\u2019 suffix to these instructions to accept an ",
        "page_idx": 235
    },
    {
        "type": "table",
        "img_path": "images/3ff538ca562ef87efae48906b6a192f01fb1693697710eb113a31cf1364cb444.jpg",
        "table_caption": [
            "Table 6.7: Logical and shift instructions "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Semantics</td><td>Example</td><td>Explanation</td><td></td></tr><tr><td></td><td>and rd, rs1, rs2 and x1,x2, x3</td><td>x1 \u2190 x2 AND x3</td><td></td></tr><tr><td></td><td>andi rd,rsl,imm andi x1, x2, 6</td><td>x1 \u2190 x2 AND 6</td><td></td></tr><tr><td>or rd,rsl,rs2</td><td>or xl, x2, x3</td><td>x1 \u2190 x2 OR x3</td><td></td></tr><tr><td>ori rd,rsl,imm</td><td>ori xl,x2,9</td><td>xl \u2190 x2 OR 9</td><td></td></tr><tr><td>xor rd, rsl, rs2</td><td>xor xl, x2, x3</td><td>x1 \u2190 x2 XOR x3</td><td></td></tr><tr><td>xori rd,rsl,imm</td><td>xori xl, x2, 7</td><td>x1 \u2190 x2 XOR 7</td><td></td></tr><tr><td>sll rd, rs1, rs2</td><td>sll x1, x2, x3</td><td>x1 \u2190x2 <<x3</td><td></td></tr><tr><td>srl rd, rs1,rs2</td><td>srl x1, x2, x3</td><td>x1 \u2191 x2 >> x3</td><td></td></tr><tr><td>sra rd, rsl,rs2</td><td>sra x1, x2, x3</td><td>x1\u2190x2 >>>x3</td><td></td></tr><tr><td>slli rd,rsl,imm</td><td>slli x1, x2, 3</td><td>x1 \u2190x2<<3</td><td></td></tr><tr><td>srli rd, rs1,imm</td><td>srli x1, x2, 3</td><td>x1 \u2190x2>>3</td><td></td></tr><tr><td>srai rd, rsl, imm</td><td>srai x1, x2, 3</td><td>x1 \u2190x2 >>>3</td><td></td></tr></table></body></html>\n\n",
        "page_idx": 236
    },
    {
        "type": "text",
        "text": "immediate value as the second source operand. The format is otherwise the same as the add and sub instructions. ",
        "page_idx": 236
    },
    {
        "type": "text",
        "text": "Example 98   \nWrite a RISC-V assembly program to compute the bitwise OR of A and $B$ . Let $A = 4$ and $B = 1$ . ",
        "page_idx": 236
    },
    {
        "type": "text",
        "text": "Answer: ",
        "page_idx": 236
    },
    {
        "type": "table",
        "img_path": "images/247a8ea6ab3bc06b9ce944dc6ee1c306e52bb2a89db9cc23406f2f52d302e312.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td></td><td></td><td>addi t1\uff0czero\uff0c</td><td>4</td><td></td><td>#t1=4</td><td># bitwise OR of</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>ori</td><td>t2\uff0c</td><td></td><td>t1\uff0c1</td><td></td><td></td><td></td><td></td><td></td><td></td><td>4</td><td>and 1</td><td></td></tr></table></body></html>\n\n",
        "page_idx": 236
    },
    {
        "type": "text",
        "text": "Akin to other ISAs, RISC-V has three shift instructions: shift left logical $( s l l )$ , shift right logical $( s r l )$ and shift right arithmetic (sra). They have their variants where the second source is an immediate. They are slli, srli and srai, respectively. ",
        "page_idx": 236
    },
    {
        "type": "text",
        "text": "Example 99 Write RISC-V assembly code to compute 50/4. ",
        "page_idx": 236
    },
    {
        "type": "text",
        "text": "Answer: ",
        "text_level": 1,
        "page_idx": 236
    },
    {
        "type": "table",
        "img_path": "images/e754fe1149bdd205fecb49cecab8d4cc0c537121fa61762c0fa6b4075f6fd79c.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>srai</td><td>addi t0\uff0czero\uff0c50 # t0 = 50 t1\uff0ct0\uff0c2 # t1 = 50/4</td><td></td></tr></table></body></html>\n\n",
        "page_idx": 236
    },
    {
        "type": "text",
        "text": "Example 100 ",
        "text_level": 1,
        "page_idx": 237
    },
    {
        "type": "text",
        "text": "Write RISC-V assembly code to compute $t 1 = t 2 + t 3 \\times 4$ . ",
        "page_idx": 237
    },
    {
        "type": "text",
        "text": "Answer: ",
        "text_level": 1,
        "page_idx": 237
    },
    {
        "type": "text",
        "text": "addi t3 , zero , 5   \naddi t2 , zero , 7   \nslli t4 , t3 , 2   \nadd t1 , t2 , t4   \n# t3 = 5   \n# t2 = 7   \n# t4 = t3 \\* 4   \n# t1 = t2 + t3 \\* 4 ",
        "page_idx": 237
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 237
    }
]