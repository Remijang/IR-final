[
    {
        "type": "text",
        "text": "6.2.2 Add and Subtract Instructions ",
        "text_level": 1,
        "page_idx": 233
    },
    {
        "type": "table",
        "img_path": "images/fdda0efdc0703ee266a8511196359525b36a6de4d4453409b09d9e4a98aa0887.jpg",
        "table_caption": [
            "Table 6.5: Arithmetic instructions: add and subtract "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Semantics</td><td>Example</td><td>Explanation</td></tr><tr><td>add rd, rsl, rs2</td><td>add x1,x2, x3</td><td>x1 \u2190x2+x3</td></tr><tr><td>addi rd,rs1,imm</td><td>addi x1, x2, 5</td><td>x1\u2190x2+ 5</td></tr><tr><td>sub rd, rsl, rs2</td><td>sub x1, x2, x3</td><td>x1 \u2190 x2 - x3</td></tr></table></body></html>\n\n",
        "page_idx": 233
    },
    {
        "type": "text",
        "text": "Table 6.5 shows the general form of the add and $s u b$ instructions in RISC-V. They have the same general format as SimpleRisc add and $s u b$ instructions, respectively. The generic format is inst rd, rs1, rs2/imm. ",
        "page_idx": 233
    },
    {
        "type": "text",
        "text": "Example 93 ",
        "text_level": 1,
        "page_idx": 233
    },
    {
        "type": "text",
        "text": "Write a RISC-V assembly program to compute $\\mathit { 4 } \\ : + \\ : 5 \\ : - \\ : 1 9$ . ",
        "page_idx": 233
    },
    {
        "type": "text",
        "text": "Answer: ",
        "page_idx": 233
    },
    {
        "type": "table",
        "img_path": "images/3066c98e5bdaba4b8fad5882abbeb320fa521280f69d04043c98e28fb812faef.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>addi</td><td>t0\uff0c</td><td>zero\uff0c4</td><td>#</td><td>load 4</td><td>into</td><td>t0</td></tr><tr><td>addi</td><td>t1,</td><td>zero\uff0c5</td><td>#</td><td>load 5</td><td>into t1</td><td></td></tr><tr><td>add</td><td>t2,</td><td>t0\uff0ct1</td><td>#</td><td>t2 =</td><td>t0 +t1</td><td></td></tr><tr><td>addi</td><td>t2,</td><td>t2\uff0c-19</td><td>#</td><td>subtract</td><td>19</td><td>from t2</td></tr></table></body></html>\n\n",
        "page_idx": 233
    },
    {
        "type": "text",
        "text": "Example 94 ",
        "text_level": 1,
        "page_idx": 233
    },
    {
        "type": "text",
        "text": "Write an assembly program to swap two numbers stored in x1 and x2. ",
        "page_idx": 233
    },
    {
        "type": "text",
        "text": "Answer: ",
        "text_level": 1,
        "page_idx": 233
    },
    {
        "type": "table",
        "img_path": "images/09e8bafbdd0891833c7c06f6228df3c59f952f11782fd587cec79f3bfe32a843.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>add x3\uff0cx0\uff0cx1</td><td></td><td></td><td></td><td></td><td># 83</td><td></td><td>= x1</td><td></td></tr><tr><td>add x1\uff0cx0\uff0cx2</td><td></td><td></td><td></td><td></td><td>#81</td><td></td><td>=</td><td></td></tr><tr><td>add x2\uff0cx0,</td><td></td><td></td><td>x3</td><td>#x2</td><td></td><td>= x3</td><td></td><td>(old x1)</td></tr></table></body></html>\n\n",
        "page_idx": 233
    },
    {
        "type": "table",
        "img_path": "images/8a7f48825237397dcf67280a34e8f447152a6acd74db960891393b9833999eea.jpg",
        "table_caption": [
            "6.2.3 Multiplication and Division Instructions "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Semantics</td><td>Example</td><td>Explanation</td></tr><tr><td>mul rd, rs1, rs2</td><td>mul x1, x2, x3</td><td>x1 \u2190x2 \u00d7 x3</td></tr><tr><td>div rd, rsl, rs2</td><td>div x1, x2, x3</td><td>x1\u2190x2 x3</td></tr><tr><td>rem rd, rsl,rs2</td><td>rem xl, x2,x3</td><td>x1\u2190rem (x2 x3)</td></tr></table></body></html>\n\n",
        "page_idx": 234
    },
    {
        "type": "text",
        "text": "Table 6.6 shows the multiplication and division instructions. They are a part of the \u2018M\u2019 extension. The reason for including them in an extension is to enable the creation of really low-end and low-power implementations that do not require such instructions. ",
        "page_idx": 234
    },
    {
        "type": "text",
        "text": "The multiplication instruction has some complications. The product requires 64 bits, which means that it will not fit in a single register. The default implementation thus places the lower 32 bits in the destination register. However, sometimes there is a need to store the full 64-bit product \u2013 this will require two registers. The default mul instruction computes the lower 32 bits. The mulh and mulhu instructions can next be used to store the upper 32 bits for signed $\\times$ signed and unsigned $\\times$ unsigned multiplication, respectively. Even though we require two separate instructions now, micro-architectures can fuse them dynamically. They can identify two consecutive multiplication instructions where one instruction computes the lower 32 bits and the next instruction computes the upper 32 bits. This sequence can be identified dynamically, and a single multiplication will only be required. ",
        "page_idx": 234
    },
    {
        "type": "table",
        "img_path": "images/da13ec0bca22838bad169171cdf009a3dd045af01e649ede005f2bd3223208dd.jpg",
        "table_caption": [
            "Table 6.6: Multiplication and division instructions "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>addi</td><td>t1\uff0czero\uff0c3</td><td></td><td># t1 =3</td><td></td><td></td><td></td><td></td></tr><tr><td>addi</td><td>t2\uff0czero\uff0c-17</td><td></td><td># t2 = -17</td><td></td><td></td><td></td><td></td></tr><tr><td>mul</td><td>t3\uff0ct1\uff0ct2</td><td></td><td></td><td></td><td></td><td># t3 = t1 * t2</td><td></td></tr></table></body></html>\n\n",
        "page_idx": 234
    }
]